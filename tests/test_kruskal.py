import pytest
from app.algorithms.kruskal import kruskal_generator
from app.utils.types import Event, Graph

def test_kruskal_basic_graph():
    """Test Kruskal's algorithm on a basic connected graph."""
    graph = {
        "A": [("B", 1), ("C", 4)],
        "B": [("A", 1), ("C", 2), ("D", 5)],
        "C": [("A", 4), ("B", 2), ("D", 1)],
        "D": [("B", 5), ("C", 1)]
    }
    expected_mst_edges = {frozenset(("A", "B")), frozenset(("C", "D")), frozenset(("B", "C"))}

    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data

    actual_mst_edges_set = {frozenset(edge) for edge in final_event.data["mst_edges"]}
    assert actual_mst_edges_set == expected_mst_edges

def test_kruskal_disconnected_graph():
    """Test Kruskal's algorithm on a disconnected graph."""
    graph = {
        "A": [("B", 1)],
        "B": [("A", 1)],
        "C": [("D", 2)],
        "D": [("C", 2)]
    }
    expected_mst_edges = {frozenset(("A", "B")), frozenset(("C", "D"))}

    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data

    actual_mst_edges_set = {frozenset(edge) for edge in final_event.data["mst_edges"]}
    assert actual_mst_edges_set == expected_mst_edges

def test_kruskal_empty_graph():
    """Test Kruskal's algorithm on an empty graph."""
    graph = {}
    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data
    assert final_event.data["mst_edges"] == []

def test_kruskal_single_node_graph():
    """Test Kruskal's algorithm on a graph with a single node."""
    graph = {"A": []}
    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data
    assert final_event.data["mst_edges"] == []

def test_kruskal_all_events_conform_schema():
    """Test that all events generated by Kruskal's conform to the schema."""
    graph = {
        "A": [("B", 1)],
        "B": [("A", 1), ("C", 2)],
        "C": [("B", 2)]
    }
    events = list(kruskal_generator(graph))

    for event in events:
        assert isinstance(event, Event)
        assert isinstance(event.step, int)
        assert isinstance(event.type, str)
        assert isinstance(event.details, str)
        assert isinstance(event.data, dict)