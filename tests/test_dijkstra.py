import pytest
from app.algorithms.dijkstra import dijkstra_generator
from app.utils.types import Event, Graph

def test_dijkstra_basic_graph():
    """Test Dijkstra's algorithm on a basic connected graph."""
    graph = {
        'A': [('B', 1), ('C', 4)],
        'B': [('A', 1), ('C', 2), ('D', 5)],
        'C': [('A', 4), ('B', 2), ('D', 1)],
        'D': [('B', 5), ('C', 1)]
    }
    start_node = 'A'
    expected_distances = {'A': 0, 'B': 1, 'C': 3, 'D': 4}

    events = list(dijkstra_generator(graph, start_node))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "distances" in final_event.data
    assert final_event.data["distances"] == expected_distances

def test_dijkstra_unreachable_nodes():
    """Test Dijkstra's with unreachable nodes."""
    graph = {
        'A': [('B', 1)],
        'B': [('A', 1)],
        'C': [('D', 1)],
        'D': [('C', 1)]
    }
    start_node = 'A'
    expected_distances = {'A': 0, 'B': 1, 'C': float('inf'), 'D': float('inf')}

    events = list(dijkstra_generator(graph, start_node))

    final_event = events[-1]
    assert final_event.type == "done"
    assert "distances" in final_event.data
    assert final_event.data["distances"] == expected_distances

def test_dijkstra_negative_weights():
    """Test Dijkstra's algorithm with negative weights (should abort)."""
    graph = {
        'A': [('B', -1)],
        'B': [('C', 2)],
        'C': []
    }
    start_node = 'A'

    events = list(dijkstra_generator(graph, start_node))

    assert len(events) > 0
    assert any(e.type == "error" for e in events)
    assert not any(e.type == "done" for e in events)

def test_dijkstra_empty_graph():
    """Test Dijkstra's algorithm on an empty graph."""
    graph = {}
    start_node = 'A'
    events = list(dijkstra_generator(graph, start_node))

    assert len(events) > 0
    assert any(e.type == "error" for e in events)
    assert not any(e.type == "done" for e in events)

def test_dijkstra_single_node_graph():
    """Test Dijkstra's algorithm on a graph with a single node."""
    graph = {"A": []}
    start_node = 'A'
    expected_distances = {'A': 0}

    events = list(dijkstra_generator(graph, start_node))

    final_event = events[-1]
    assert final_event.type == "done"
    assert "distances" in final_event.data
    assert final_event.data["distances"] == expected_distances

def test_dijkstra_all_events_conform_schema():
    """Test that all events generated by Dijkstra's conform to the schema."""
    graph = {
        'A': [('B', 1)],
        'B': [('C', 2)],
        'C': []
    }
    start_node = 'A'
    events = list(dijkstra_generator(graph, start_node))

    for event in events:
        assert isinstance(event, Event)
        assert isinstance(event.step, int)
        assert isinstance(event.type, str)
        assert isinstance(event.details, str)
        assert isinstance(event.data, dict)