=== محتويات مشروع technical_laboratory ===

تم إنشاء هذا الملف في: 09/28/2025 03:54:42


================================================================================
ملف: COMMIT_LOG.md
================================================================================
## Commit Log

This log summarizes the high-level commits and actions taken to build the AlgoVisEdu project.

-   **Initial Project Setup**: Created the basic directory structure, `requirements.txt`, and `pyproject.toml`.
-   **Core Types and Utilities**: Implemented `app/utils/types.py` for the `Event` dataclass and `app/utils/union_find.py` for Kruskal's algorithm helper.
-   **Merge Sort Implementation**: Developed the `merge_sort_generator` in `app/algorithms/merge_sort.py` and its corresponding unit tests in `tests/test_merge_sort.py`.
-   **Visualization Engine**: Implemented the `VisualizationEngine` in `app/visualization/engine.py` to manage event traces and state snapshots.
-   **Renderers**: Created `app/visualization/renderers.py` with functions to visualize arrays (bar charts) and graphs (network diagrams) using Matplotlib.
-   **Streamlit UI Components**: Developed `app/ui/components.py` for reusable UI elements like playback controls and data input forms.
-   **Main Streamlit Application**: Implemented `app/ui/streamlit_app.py` to integrate all components, engine, and renderers into an interactive web application.
-   **Algorithm Stubs**: Created placeholder files for `linear_search.py`, `quick_sort.py`, `kruskal.py`, and `dijkstra.py` to ensure the Streamlit app could run without import errors during initial UI development.
-   **Linear Search Implementation**: Implemented the `linear_search_generator` in `app/algorithms/linear_search.py` and its unit tests in `tests/test_linear_search.py`.
-   **Quick Sort Implementation**: Implemented the `quick_sort_generator` in `app/algorithms/quick_sort.py` and its unit tests in `tests/test_quick_sort.py`.
-   **Kruskal's Algorithm Implementation**: Implemented the `kruskal_generator` in `app/algorithms/kruskal.py` and its unit tests in `tests/test_kruskal.py`.
-   **Dijkstra's Algorithm Implementation**: Implemented the `dijkstra_generator` in `app/algorithms/dijkstra.py` and its unit tests in `tests/test_dijkstra.py`.
-   **Input Validators and IO Utilities**: Created `app/utils/validators.py` for input validation and `app/utils/io.py` for trace loading/saving.
-   **Sample Data Generators**: Developed `app/utils/sample_generators.py` for generating random arrays and graphs.
-   **Documentation**: Wrote `README.md` for project overview and setup, and `docs/API.md` for detailed API documentation and event schema.
-   **Sample Data and Traces**: Added `sample_data/sample_array.txt`, `sample_data/sample_graph.json`, and example trace JSON files in `examples/`.
-   **CI/CD Configuration**: Set up a basic GitHub Actions workflow in `.github/workflows/main.yml` for automated testing and linting.
-   **Integration Tests**: Added `tests/test_streamlit_app.py` for a smoke test of the Streamlit application.



================================================================================
ملف: project-contents.txt
================================================================================
=== محتويات مشروع technical_laboratory ===

تم إنشاء هذا الملف في: 09/28/2025 03:54:42


================================================================================
ملف: COMMIT_LOG.md
================================================================================
## Commit Log

This log summarizes the high-level commits and actions taken to build the AlgoVisEdu project.

-   **Initial Project Setup**: Created the basic directory structure, `requirements.txt`, and `pyproject.toml`.
-   **Core Types and Utilities**: Implemented `app/utils/types.py` for the `Event` dataclass and `app/utils/union_find.py` for Kruskal's algorithm helper.
-   **Merge Sort Implementation**: Developed the `merge_sort_generator` in `app/algorithms/merge_sort.py` and its corresponding unit tests in `tests/test_merge_sort.py`.
-   **Visualization Engine**: Implemented the `VisualizationEngine` in `app/visualization/engine.py` to manage event traces and state snapshots.
-   **Renderers**: Created `app/visualization/renderers.py` with functions to visualize arrays (bar charts) and graphs (network diagrams) using Matplotlib.
-   **Streamlit UI Components**: Developed `app/ui/components.py` for reusable UI elements like playback controls and data input forms.
-   **Main Streamlit Application**: Implemented `app/ui/streamlit_app.py` to integrate all components, engine, and renderers into an interactive web application.
-   **Algorithm Stubs**: Created placeholder files for `linear_search.py`, `quick_sort.py`, `kruskal.py`, and `dijkstra.py` to ensure the Streamlit app could run without import errors during initial UI development.
-   **Linear Search Implementation**: Implemented the `linear_search_generator` in `app/algorithms/linear_search.py` and its unit tests in `tests/test_linear_search.py`.
-   **Quick Sort Implementation**: Implemented the `quick_sort_generator` in `app/algorithms/quick_sort.py` and its unit tests in `tests/test_quick_sort.py`.
-   **Kruskal's Algorithm Implementation**: Implemented the `kruskal_generator` in `app/algorithms/kruskal.py` and its unit tests in `tests/test_kruskal.py`.
-   **Dijkstra's Algorithm Implementation**: Implemented the `dijkstra_generator` in `app/algorithms/dijkstra.py` and its unit tests in `tests/test_dijkstra.py`.
-   **Input Validators and IO Utilities**: Created `app/utils/validators.py` for input validation and `app/utils/io.py` for trace loading/saving.
-   **Sample Data Generators**: Developed `app/utils/sample_generators.py` for generating random arrays and graphs.
-   **Documentation**: Wrote `README.md` for project overview and setup, and `docs/API.md` for detailed API documentation and event schema.
-   **Sample Data and Traces**: Added `sample_data/sample_array.txt`, `sample_data/sample_graph.json`, and example trace JSON files in `examples/`.
-   **CI/CD Configuration**: Set up a basic GitHub Actions workflow in `.github/workflows/main.yml` for automated testing and linting.
-   **Integration Tests**: Added `tests/test_streamlit_app.py` for a smoke test of the Streamlit application.



================================================================================
ملف: project-contents.txt
================================================================================


================================================================================
ملف: pyproject.toml
================================================================================
[project]
name = "AlgoVisEdu"
version = "0.1.0"
description = "Interactive educational application for algorithm visualization and step-by-step explanation."
authors = [
    { name = "Manus AI", email = "ai@manus.im" }
]
dependencies = [
    "streamlit",
    "networkx",
    "matplotlib",
    "numpy",
    "pytest",
]

[project.optional-dependencies]
dev = [
    "black",
    "flake8",
    "isort",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
pythonpath = ["app"]

[tool.black]
line-length = 100
target-version = ['py310']

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["app"]

[tool.flake8]
max-line-length = 100
exclude = [".git", "__pycache__", "docs", "build", "dist"]



================================================================================
ملف: README.md
================================================================================
# AlgoVisEdu: Algorithm Visualizer & Educator

AlgoVisEdu is an interactive Python application built with Streamlit that visualizes and explains various algorithms step-by-step. It's designed to be an educational tool for understanding how algorithms work through dynamic visualization and detailed event logging.

## Features

- **Interactive Visualization**: See algorithms in action with real-time updates.
- **Step-by-Step Explanation**: Understand each operation with concise textual details.
- **Playback Controls**: Play, pause, step forward/backward, and adjust playback speed.
- **Algorithm Analysis**: View time and space complexity, along with pedagogical notes for each algorithm.
- **Trace Management**: Save and load algorithm execution traces as JSON files for replay and analysis.
- **Extensible Architecture**: Easily add new algorithms (sorting, searching, graph) by implementing a generator function.

## Implemented Algorithms (Initial Set)

- **Sorting Algorithms**:
    - Merge Sort
    - Quick Sort
- **Searching Algorithms**:
    - Linear Search
- **Graph Algorithms**:
    - Kruskal (Minimum Spanning Tree)
    - Dijkstra (Single Source Shortest Path)

## Project Structure

```
AlgoVisEdu/
├── app/
│   ├── algorithms/             # Algorithm implementations as event generators
│   │   ├── linear_search.py
│   │   ├── merge_sort.py
│   │   ├── quick_sort.py
│   │   ├── kruskal.py
│   │   └── dijkstra.py
│   ├── visualization/          # Core visualization engine and renderers
│   │   ├── engine.py
│   │   └── renderers.py
│   └── ui/                     # Streamlit UI components and main app
│       ├── streamlit_app.py
│       └── components.py
│   └── utils/                  # Utility functions (types, validators, IO, sample data generators)
│       ├── types.py
│       ├── validators.py
│       ├── io.py
│       ├── sample_generators.py
│       └── union_find.py       # Helper for Kruskal's
├── tests/                      # Unit tests for algorithms and components
│   └── test_merge_sort.py
│   └── ... (other algorithm tests)
├── docs/                       # Documentation files
│   ├── README.md
│   └── API.md
├── sample_data/                # Example input data for algorithms
├── examples/                   # Example trace JSON files
│   └── trace_samples.json
├── requirements.txt            # Python dependencies
└── pyproject.toml              # Project metadata and build configuration
```

## Setup and Installation

1.  **Clone the repository**:
    ```bash
    git clone https://github.com/your-username/AlgoVisEdu.git
    cd AlgoVisEdu
    ```

2.  **Create a virtual environment** (recommended):
    ```bash
    python3 -m venv venv
    source venv/bin/activate  # On Windows: `venv\Scripts\activate`
    ```

3.  **Install dependencies**:
    ```bash
    pip install -r requirements.txt
    ```
    Alternatively, if you prefer `poetry` or `pipenv`, you can use `pyproject.toml`.

## How to Run the Demo

To launch the interactive Streamlit application:

```bash
streamlit run app/ui/streamlit_app.py
```

This will open the application in your default web browser. If it doesn't, Streamlit will provide a local URL (e.g., `http://localhost:8501`).

## How to Add a New Algorithm (Developer Guide)

The architecture is designed to make adding new algorithms straightforward:

1.  **Create a new algorithm file**: In `app/algorithms/`, create a new Python file (e.g., `new_algo.py`).

2.  **Implement the generator**: Inside `new_algo.py`, implement your algorithm as a Python generator function. This function must `yield` `Event` objects (defined in `app/utils/types.py`) at every meaningful step of the algorithm. Ensure the `Event` objects conform to the [Event Schema](#event-schema).

    ```python
    # Example structure for new_algo.py
    from typing import Generator, List, Any
    from app.utils.types import Event, Array

    def new_algorithm_generator(data: Any) -> Generator[Event, None, None]:
        step_count = 0
        # ... algorithm logic ...
        yield Event(step=step_count, type="start", details="Algorithm started", data={})
        step_count += 1
        # ... yield more events ...
        yield Event(step=step_count, type="done", details="Algorithm finished", data={})
    ```

3.  **Register the algorithm**: Open `app/ui/streamlit_app.py` and:
    -   Import your new generator function.
    -   Add your algorithm to the `algorithms` dictionary, specifying its `generator` and `type` (e.g., `"array"` or `"graph"`).

    ```python
    # In app/ui/streamlit_app.py
    from app.algorithms.new_algo import new_algorithm_generator

    algorithms = {
        # ... existing algorithms ...
        "New Algorithm Name": {"generator": new_algorithm_generator, "type": "array"},
    }
    ```

4.  **(Optional) Create a renderer**: If your algorithm requires a unique visualization (e.g., a custom data structure), you might need to extend `app/visualization/renderers.py` with a new rendering function and integrate it into `streamlit_app.py`.

5.  **(Optional) Add unit tests**: Create a corresponding test file in `tests/` (e.g., `test_new_algo.py`) to ensure your generator produces correct events and the final result is accurate.

## Event Schema

The `Event` dataclass (defined in `app/utils/types.py`) is the core data structure for capturing algorithm steps. Each event is a dictionary or dataclass with at least the following fields:

-   `step` (int): A monotonically increasing step number.
-   `type` (str): A string categorizing the event (e.g., "compare", "swap", "visit", "add_mst_edge", "relax", "done").
-   `details` (str): A short, human-readable explanation of what happened in this step.
-   `data` (Dict[str, Any]): An optional dictionary containing event-specific data. This can include indices (`i`, `j`, `index`), values (`value`, `old_value`, `new_value`), graph nodes/edges (`u`, `v`, `weight`), distances (`distances`), or snapshots of the entire data structure (`array_snapshot`, `graph_snapshot`).

For a detailed API reference and examples, please refer to `docs/API.md`.

## Running Tests

To run the unit tests, navigate to the project root and execute `pytest`:

```bash
pytest
```

## CI/CD (GitHub Actions)

A simple GitHub Actions workflow is included to run tests and linting on pushes and pull requests. The configuration is located at `.github/workflows/main.yml`.

## License

This project is licensed under the MIT License - see the LICENSE file for details. (Note: LICENSE file not generated in this output, but should be added to a real project.)

## Acknowledgements

-   Streamlit for the amazing web framework.
-   Matplotlib and NetworkX for visualization capabilities.

---

*Generated by Manus AI*



================================================================================
ملف: requirements.txt
================================================================================
streamlit
networkx
matplotlib
numpy
pytest



================================================================================
ملف: .github\workflows\main.yml
================================================================================
name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero to treat all errors as warnings. The GitHub editor is 1-indexed for columns too
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    - name: Format with Black
      run: |
        black --check .
    - name: Check imports with isort
      run: |
        isort --check-only .
    - name: Test with pytest
      run: |
        pytest



================================================================================
ملف: .pytest_cache\.gitignore
================================================================================
# Created by pytest automatically.
*


================================================================================
ملف: .pytest_cache\CACHEDIR.TAG
================================================================================
Signature: 8a477f597d28d172789f06886806bc55
# This file is a cache directory tag created by pytest.
# For information about cache directory tags, see:
#	https://bford.info/cachedir/spec.html


================================================================================
ملف: .pytest_cache\README.md
================================================================================
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.


================================================================================
ملف: .pytest_cache\v\cache\lastfailed
================================================================================
{}

================================================================================
ملف: .pytest_cache\v\cache\nodeids
================================================================================
[
  "tests/test_dijkstra.py::test_dijkstra_all_events_conform_schema",
  "tests/test_dijkstra.py::test_dijkstra_basic_graph",
  "tests/test_dijkstra.py::test_dijkstra_empty_graph",
  "tests/test_dijkstra.py::test_dijkstra_negative_weights",
  "tests/test_dijkstra.py::test_dijkstra_single_node_graph",
  "tests/test_dijkstra.py::test_dijkstra_unreachable_nodes",
  "tests/test_kruskal.py::test_kruskal_all_events_conform_schema",
  "tests/test_kruskal.py::test_kruskal_basic_graph",
  "tests/test_kruskal.py::test_kruskal_disconnected_graph",
  "tests/test_kruskal.py::test_kruskal_empty_graph",
  "tests/test_kruskal.py::test_kruskal_single_node_graph",
  "tests/test_linear_search.py::test_linear_search_duplicate_elements",
  "tests/test_linear_search.py::test_linear_search_empty_array",
  "tests/test_linear_search.py::test_linear_search_first_element",
  "tests/test_linear_search.py::test_linear_search_found",
  "tests/test_linear_search.py::test_linear_search_last_element",
  "tests/test_linear_search.py::test_linear_search_not_found",
  "tests/test_merge_sort.py::test_merge_sort_already_sorted_array",
  "tests/test_merge_sort.py::test_merge_sort_basic",
  "tests/test_merge_sort.py::test_merge_sort_duplicate_elements",
  "tests/test_merge_sort.py::test_merge_sort_empty_array",
  "tests/test_merge_sort.py::test_merge_sort_reverse_sorted_array",
  "tests/test_merge_sort.py::test_merge_sort_single_element_array",
  "tests/test_quick_sort.py::test_quick_sort_already_sorted_array",
  "tests/test_quick_sort.py::test_quick_sort_basic",
  "tests/test_quick_sort.py::test_quick_sort_duplicate_elements",
  "tests/test_quick_sort.py::test_quick_sort_empty_array",
  "tests/test_quick_sort.py::test_quick_sort_reverse_sorted_array",
  "tests/test_quick_sort.py::test_quick_sort_single_element_array",
  "tests/test_streamlit_app.py::test_streamlit_app_smoke_test"
]

================================================================================
ملف: app\__init__.py
================================================================================

================================================================================
ملف: app\algorithms\dijkstra.py
================================================================================
from typing import List, Generator, Any, Dict, Tuple
from app.utils.types import Event, Graph
import heapq

def dijkstra_generator(graph: Graph, start_node: Any) -> Generator[Event, None, None]:
    """Generates events for visualizing Dijkstra's algorithm for Single Source Shortest Path (SSSP).

    Args:
        graph (Graph): The graph represented as an adjacency list
                       (e.g., {"A": [("B", 1)], "B": [("A", 1)]}).
        start_node (Any): The starting node for finding shortest paths.

    Yields:
        Event: An event object representing a step in the algorithm.
    """
    step_count = 0
    if not graph or start_node not in graph:
        yield Event(
            step=step_count,
            type="error",
            details=f"Start node {start_node} not found in graph or graph is empty.",
            data={"graph_snapshot": graph, "start_node": start_node}
        )
        step_count += 1
        yield Event(
            step=step_count,
            type="done",
            details="Dijkstra's algorithm aborted due to invalid start node or empty graph.",
            data={}
        )
        return

    distances = {node: float("inf") for node in graph}
    distances[start_node] = 0
    priority_queue = [(0, start_node)] # (distance, node)

    visited = set()
    path = {node: None for node in graph}

    # Initial snapshot
    yield Event(
        step=step_count,
        type="snapshot",
        details=f"Initial graph state, starting from {start_node}",
        data={"graph_snapshot": graph, "distances": {k: (v if v != float('inf') else 'inf') for k, v in distances.items()}, "start_node": start_node}
    )
    step_count += 1

    # Validate non-negative weights
    for u in graph:
        for v, weight in graph[u]:
            if weight < 0:
                yield Event(
                    step=step_count,
                    type="error",
                    details=f"Negative weight detected on edge {u}-{v}. Dijkstra's does not support negative weights.",
                    data={"u": u, "v": v, "weight": weight}
                )
                step_count += 1
                yield Event(
                    step=step_count,
                    type="done",
                    details="Dijkstra's algorithm aborted due to negative weights.",
                    data={}
                )
                return # Abort if negative weight found

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_node in visited:
            continue

        visited.add(current_node)

        yield Event(
            step=step_count,
            type="visit",
            details=f"Visiting node {current_node} with distance {current_distance}",
            data={"u": current_node, "distance": current_distance, "distances": {k: (v if v != float('inf') else 'inf') for k, v in distances.items()}, "graph_snapshot": graph}
        )
        step_count += 1

        for neighbor, weight in graph.get(current_node, []):
            yield Event(
                step=step_count,
                type="consider_edge",
                details=f"Considering edge {current_node}-{neighbor} with weight {weight}",
                data={"u": current_node, "v": neighbor, "weight": weight, "distances": {k: (v if v != float('inf') else 'inf') for k, v in distances.items()}, "graph_snapshot": graph}
            )
            step_count += 1

            if neighbor not in visited:
                new_distance = current_distance + weight
                if new_distance < distances[neighbor]:
                    old_distance = distances[neighbor]
                    distances[neighbor] = new_distance
                    path[neighbor] = current_node
                    heapq.heappush(priority_queue, (new_distance, neighbor))

                    yield Event(
                        step=step_count,
                        type="relax",
                        details=f"Relaxing edge {current_node}-{neighbor}. New distance to {neighbor} is {new_distance}",
                        data={"u": current_node, "v": neighbor, "weight": weight, "old_distance": (old_distance if old_distance != float('inf') else 'inf'), "new_distance": new_distance, "distances": {k: (v if v != float('inf') else 'inf') for k, v in distances.items()}, "graph_snapshot": graph}
                    )
                    step_count += 1

    yield Event(
        step=step_count,
        type="done",
        details="Dijkstra's algorithm completed",
        data={"final_distances": {k: (v if v != float('inf') else 'inf') for k, v in distances.items()}, "final_paths": path, "graph_snapshot": graph}
    )


if __name__ == '__main__':
    # Example graph from a common Dijkstra's visualization
    example_graph = {
        'A': [('B', 4), ('C', 2)],
        'B': [('A', 4), ('E', 3)],
        'C': [('A', 2), ('D', 2), ('F', 4)],
        'D': [('C', 2), ('E', 3)],
        'E': [('B', 3), ('D', 3), ('F', 1)],
        'F': [('C', 4), ('E', 1)]
    }
    start_node = 'A'

    print(f"Running Dijkstra's from node {start_node} on example graph:")
    events = list(dijkstra_generator(example_graph, start_node))

    print("\n--- Events ---")
    for event in events:
        print(event.to_json_serializable())

    print("\n--- Final Distances ---")
    final_event = next(e for e in reversed(events) if e.type == "done")
    print(final_event.data["final_distances"])

    expected_distances = {'A': 0, 'B': 4, 'C': 2, 'D': 4, 'E': 7, 'F': 6}
    assert final_event.data["final_distances"] == expected_distances
    print("Assertion passed: Final distances are correct.")

    # Test with negative weight (should abort)
    negative_weight_graph = {
        'A': [('B', -1)],
        'B': [('C', 2)],
        'C': []
    }
    print("\nRunning Dijkstra's on graph with negative weight:")
    events_negative = list(dijkstra_generator(negative_weight_graph, 'A'))
    assert any(e.type == "error" for e in events_negative)
    assert events_negative[-1].details == "Dijkstra's algorithm aborted due to negative weights."
    print("Negative weight test passed (algorithm aborted as expected).")



================================================================================
ملف: app\algorithms\kruskal.py
================================================================================
from typing import List, Generator, Any, Dict, Tuple
from app.utils.types import Event, Graph
from app.utils.union_find import UnionFind

def kruskal_generator(graph: Graph) -> Generator[Event, None, None]:
    """Generates events for visualizing Kruskal's algorithm for Minimum Spanning Tree (MST).

    Args:
        graph (Graph): The graph represented as an adjacency list
                       (e.g., {"A": [("B", 1)], "B": [("A", 1)]}).

    Yields:
        Event: An event object representing a step in the algorithm.
    """
    step_count = 0
    nodes = list(graph.keys())
    edges = []
    for u in graph:
        for v, weight in graph[u]:
            # Add each edge only once for undirected graphs
            if (v, u, weight) not in edges and (u, v, weight) not in edges:
                edges.append((u, v, weight))

    # Sort all edges by weight
    edges.sort(key=lambda x: x[2])

    mst_edges = []
    uf = UnionFind(nodes)

    yield Event(
        step=step_count,
        type="snapshot",
        details="Initial graph state",
        data={"graph_snapshot": graph, "nodes": nodes, "sorted_edges": edges}
    )
    step_count += 1

    for u, v, weight in edges:
        yield Event(
            step=step_count,
            type="consider_edge",
            details=f"Considering edge ({u}-{v}) with weight {weight}",
            data={"u": u, "v": v, "weight": weight, "mst_edges": list(mst_edges), "graph_snapshot": graph}
        )
        step_count += 1

        if uf.find(u) != uf.find(v):
            uf.union(u, v)
            mst_edges.append((u, v))
            yield Event(
                step=step_count,
                type="add_mst_edge",
                details=f"Adding edge ({u}-{v}) to MST (weight {weight})",
                data={"u": u, "v": v, "weight": weight, "mst_edges": list(mst_edges), "graph_snapshot": graph}
            )
            step_count += 1

    yield Event(
        step=step_count,
        type="done",
        details="Kruskal's algorithm completed",
        data={"mst_edges": mst_edges, "final_graph": graph}
    )


if __name__ == '__main__':
    # Example graph (from Wikipedia for Kruskal's)
    example_graph = {
        "A": [("B", 7), ("D", 5)],
        "B": [("A", 7), ("C", 8), ("D", 9), ("E", 7)],
        "C": [("B", 8), ("E", 5)],
        "D": [("A", 5), ("B", 9), ("E", 15), ("F", 6)],
        "E": [("B", 7), ("C", 5), ("D", 15), ("F", 8), ("G", 9)],
        "F": [("D", 6), ("E", 8), ("G", 11)],
        "G": [("E", 9), ("F", 11)]
    }

    print("Running Kruskal's on example graph:")
    events = list(kruskal_generator(example_graph))

    print("\n--- Events ---")
    for event in events:
        print(event.to_json_serializable())

    print("\n--- Final MST Edges ---")
    final_event = next(e for e in reversed(events) if e.type == "done")
    print(final_event.data["mst_edges"])

    # Expected MST edges (order might vary, but the set of edges should be the same)
    expected_mst_edges = [
        ("A", "D"), ("C", "E"), ("D", "F"), ("B", "E"), ("A", "B"), ("E", "G")
    ]
    # Convert to set of frozensets for order-independent comparison
    actual_mst_edges_set = {frozenset(edge) for edge in final_event.data["mst_edges"]}
    expected_mst_edges_set = {frozenset(edge) for edge in expected_mst_edges}

    assert actual_mst_edges_set == expected_mst_edges_set
    print("Assertion passed: MST edges are correct.")

    # Test with a disconnected graph (should still find MST for each component)
    disconnected_graph = {
        "A": [("B", 1)],
        "B": [("A", 1)],
        "C": [("D", 2)],
        "D": [("C", 2)]
    }
    print("\nRunning Kruskal's on disconnected graph:")
    events_disconnected = list(kruskal_generator(disconnected_graph))
    final_event_disconnected = next(e for e in reversed(events_disconnected) if e.type == "done")
    print(final_event_disconnected.data["mst_edges"])
    expected_disconnected_mst = [{frozenset(("A", "B"))}, {frozenset(("C", "D"))}]
    actual_disconnected_mst = [{frozenset(edge)} for edge in final_event_disconnected.data["mst_edges"]]
    assert all(item in expected_disconnected_mst for item in actual_disconnected_mst) and \
           all(item in actual_disconnected_mst for item in expected_disconnected_mst)
    print("Disconnected graph test passed.")



================================================================================
ملف: app\algorithms\linear_search.py
================================================================================
from typing import List, Generator, Any
from app.utils.types import Event, Array

def linear_search_generator(arr: Array, target: Any) -> Generator[Event, None, None]:
    """Generates events for visualizing the Linear Search algorithm.

    Args:
        arr (Array): The list of elements to search through.
        target (Any): The element to search for.

    Yields:
        Event: An event object representing a step in the algorithm.
    """
    step_count = 0
    n = len(arr)
    found = False

    yield Event(
        step=step_count,
        type="snapshot",
        details=f"Initial array state, searching for {target}",
        data={"array_snapshot": list(arr), "target": target}
    )
    step_count += 1

    for i in range(n):
        yield Event(
            step=step_count,
            type="visit",
            details=f"Visiting index {i}, comparing {arr[i]} with target {target}",
            data={"index": i, "value": arr[i], "target": target, "array_snapshot": list(arr)}
        )
        step_count += 1

        if arr[i] == target:
            yield Event(
                step=step_count,
                type="found",
                details=f"Target {target} found at index {i}",
                data={"index": i, "value": arr[i], "target": target, "array_snapshot": list(arr)}
            )
            step_count += 1
            found = True
            break

    if not found:
        yield Event(
            step=step_count,
            type="not_found",
            details=f"Target {target} not found in the array",
            data={"target": target, "array_snapshot": list(arr)}
        )
        step_count += 1

    yield Event(
        step=step_count,
        type="done",
        details="Linear Search completed",
        data={"found": found, "target": target, "final_array": list(arr)}
    )


if __name__ == '__main__':
    test_array = [38, 27, 43, 3, 9, 82, 10]
    target_found = 9
    target_not_found = 100

    print(f"Searching for {target_found} in {test_array}")
    events_found = list(linear_search_generator(test_array, target_found))
    for event in events_found:
        print(event.to_json_serializable())
    final_event_found = events_found[-1]
    assert final_event_found.data["found"] is True
    print("Found test passed.")

    print(f"\nSearching for {target_not_found} in {test_array}")
    events_not_found = list(linear_search_generator(test_array, target_not_found))
    for event in events_not_found:
        print(event.to_json_serializable())
    final_event_not_found = events_not_found[-1]
    assert final_event_not_found.data["found"] is False
    print("Not found test passed.")



================================================================================
ملف: app\algorithms\merge_sort.py
================================================================================
from typing import List, Generator, Any
from app.utils.types import Event, Array

def merge_sort_generator(arr: Array) -> Generator[Event, None, None]:
    """Generates events for visualizing the Merge Sort algorithm.

    Args:
        arr (Array): The list of numbers to be sorted.

    Yields:
        Event: An event object representing a step in the algorithm.
    """
    n = len(arr)
    temp_arr = list(arr) # Create a temporary array for merging
    step_count = 0

    yield Event(
        step=step_count,
        type="snapshot",
        details="Initial array state",
        data={"array_snapshot": list(arr)}
    )
    step_count += 1

    def _merge_sort(current_arr: Array, left: int, right: int) -> None:
        nonlocal step_count
        if left < right:
            mid = (left + right) // 2

            yield Event(
                step=step_count,
                type="divide",
                details=f"Dividing array from index {left} to {right} into two halves",
                data={"left": left, "right": right, "mid": mid, "array_snapshot": list(current_arr)}
            )
            step_count += 1

            yield from _merge_sort(current_arr, left, mid)
            yield from _merge_sort(current_arr, mid + 1, right)

            yield from _merge(current_arr, left, mid, right)

    def _merge(current_arr: Array, left: int, mid: int, right: int) -> Generator[Event, None, None]:
        nonlocal step_count
        i = left
        j = mid + 1
        k = left

        yield Event(
            step=step_count,
            type="merge_start",
            details=f"Starting merge for sub-array from {left} to {right}",
            data={"left": left, "mid": mid, "right": right, "array_snapshot": list(current_arr)}
        )
        step_count += 1

        while i <= mid and j <= right:
            yield Event(
                step=step_count,
                type="compare",
                details=f"Comparing elements at index {i} ({current_arr[i]}) and {j} ({current_arr[j]})",
                data={"i": i, "j": j, "value_i": current_arr[i], "value_j": current_arr[j], "array_snapshot": list(current_arr)}
            )
            step_count += 1

            if current_arr[i] <= current_arr[j]:
                temp_arr[k] = current_arr[i]
                yield Event(
                    step=step_count,
                    type="overwrite",
                    details=f"Overwriting temp_arr[{k}] with current_arr[{i}] ({current_arr[i]})",
                    data={"index": k, "value": current_arr[i], "source_index": i, "array_snapshot": list(current_arr)}
                )
                step_count += 1
                i += 1
            else:
                temp_arr[k] = current_arr[j]
                yield Event(
                    step=step_count,
                    type="overwrite",
                    details=f"Overwriting temp_arr[{k}] with current_arr[{j}] ({current_arr[j]})",
                    data={"index": k, "value": current_arr[j], "source_index": j, "array_snapshot": list(current_arr)}
                )
                step_count += 1
                j += 1
            k += 1

        while i <= mid:
            temp_arr[k] = current_arr[i]
            yield Event(
                step=step_count,
                type="overwrite",
                details=f"Copying remaining element current_arr[{i}] ({current_arr[i]}) to temp_arr[{k}]",
                data={"index": k, "value": current_arr[i], "source_index": i, "array_snapshot": list(current_arr)}
            )
            step_count += 1
            i += 1
            k += 1

        while j <= right:
            temp_arr[k] = current_arr[j]
            yield Event(
                step=step_count,
                type="overwrite",
                details=f"Copying remaining element current_arr[{j}] ({current_arr[j]}) to temp_arr[{k}]",
                data={"index": k, "value": current_arr[j], "source_index": j, "array_snapshot": list(current_arr)}
            )
            step_count += 1
            j += 1
            k += 1

        for x in range(left, right + 1):
            current_arr[x] = temp_arr[x]
            yield Event(
                step=step_count,
                type="copy_back",
                details=f"Copying temp_arr[{x}] ({temp_arr[x]}) back to current_arr[{x}]",
                data={"index": x, "value": temp_arr[x], "array_snapshot": list(current_arr)}
            )
            step_count += 1

        yield Event(
            step=step_count,
            type="merge_end",
            details=f"Finished merging sub-array from {left} to {right}",
            data={"left": left, "right": right, "array_snapshot": list(current_arr)}
        )
        step_count += 1

    # Initial call to the recursive merge sort function
    yield from _merge_sort(arr, 0, n - 1)

    yield Event(
        step=step_count,
        type="done",
        details="Merge Sort completed",
        data={"sorted_array": list(arr)}
    )


if __name__ == '__main__':
    # Example usage and verification
    test_array = [38, 27, 43, 3, 9, 82, 10]
    print(f"Original array: {test_array}")
    events = list(merge_sort_generator(test_array))

    print("\n--- Events ---")
    for event in events:
        print(event.to_json_serializable())

    print("\n--- Final Array ---")
    final_array_event = next(e for e in reversed(events) if e.type == "done")
    print(final_array_event.data["sorted_array"])
    assert final_array_event.data["sorted_array"] == sorted([38, 27, 43, 3, 9, 82, 10])
    print("Assertion passed: Array is sorted correctly.")



================================================================================
ملف: app\algorithms\quick_sort.py
================================================================================
from typing import List, Generator, Any
from app.utils.types import Event, Array

def quick_sort_generator(arr: Array) -> Generator[Event, None, None]:
    """Generates events for visualizing the Quick Sort algorithm.

    Args:
        arr (Array): The list of numbers to be sorted.

    Yields:
        Event: An event object representing a step in the algorithm.
    """
    n = len(arr)
    current_arr = list(arr) # Work on a copy
    step_count = 0

    yield Event(
        step=step_count,
        type="snapshot",
        details="Initial array state",
        data={"array_snapshot": list(current_arr)}
    )
    step_count += 1

    def _partition(low: int, high: int) -> int:
        nonlocal step_count
        pivot = current_arr[high] # Choose the last element as the pivot
        pivot_index = high

        yield Event(
            step=step_count,
            type="set_pivot",
            details=f"Setting pivot to {pivot} at index {pivot_index}",
            data={"index": pivot_index, "value": pivot, "array_snapshot": list(current_arr)}
        )
        step_count += 1

        i = low - 1
        for j in range(low, high):
            yield Event(
                step=step_count,
                type="compare",
                details=f"Comparing arr[{j}] ({current_arr[j]}) with pivot {pivot}",
                data={"i": j, "j": pivot_index, "value_i": current_arr[j], "value_j": pivot, "array_snapshot": list(current_arr)}
            )
            step_count += 1

            if current_arr[j] <= pivot:
                i += 1
                current_arr[i], current_arr[j] = current_arr[j], current_arr[i]
                yield Event(
                    step=step_count,
                    type="swap",
                    details=f"Swapping arr[{i}] ({current_arr[j]}) and arr[{j}] ({current_arr[i]})",
                    data={"i": i, "j": j, "array_snapshot": list(current_arr)}
                )
                step_count += 1

        current_arr[i + 1], current_arr[high] = current_arr[high], current_arr[i + 1]
        yield Event(
            step=step_count,
            type="swap",
            details=f"Swapping pivot {pivot} with arr[{i + 1}] ({current_arr[high]})",
            data={"i": i + 1, "j": high, "array_snapshot": list(current_arr)}
        )
        step_count += 1

        return i + 1

    def _quick_sort(low: int, high: int) -> None:
        nonlocal step_count
        if low < high:
            yield Event(
                step=step_count,
                type="divide",
                details=f"QuickSort on sub-array from index {low} to {high}",
                data={"low": low, "high": high, "array_snapshot": list(current_arr)}
            )
            step_count += 1

            pi = yield from _partition_generator(low, high) # Use yield from for sub-generator

            yield from _quick_sort(low, pi - 1)
            yield from _quick_sort(pi + 1, high)

    # Wrapper for partition to make it a generator
    def _partition_generator(low: int, high: int) -> Generator[Event, None, int]:
        nonlocal step_count
        pivot_val = current_arr[high]
        pivot_idx = high

        yield Event(
            step=step_count,
            type="set_pivot",
            details=f"Setting pivot to {pivot_val} at index {pivot_idx}",
            data={"index": pivot_idx, "value": pivot_val, "array_snapshot": list(current_arr)}
        )
        step_count += 1

        i = low - 1
        for j in range(low, high):
            yield Event(
                step=step_count,
                type="compare",
                details=f"Comparing arr[{j}] ({current_arr[j]}) with pivot {pivot_val}",
                data={"i": j, "j": pivot_idx, "value_i": current_arr[j], "value_j": pivot_val, "array_snapshot": list(current_arr)}
            )
            step_count += 1

            if current_arr[j] <= pivot_val:
                i += 1
                if i != j:
                    current_arr[i], current_arr[j] = current_arr[j], current_arr[i]
                    yield Event(
                        step=step_count,
                        type="swap",
                        details=f"Swapping arr[{i}] ({current_arr[i]}) and arr[{j}] ({current_arr[j]})",
                        data={"i": i, "j": j, "array_snapshot": list(current_arr)}
                    )
                    step_count += 1

        current_arr[i + 1], current_arr[high] = current_arr[high], current_arr[i + 1]
        yield Event(
            step=step_count,
            type="swap",
            details=f"Placing pivot {pivot_val} at its correct position arr[{i + 1}]",
            data={"i": i + 1, "j": high, "array_snapshot": list(current_arr)}
        )
        step_count += 1
        return i + 1


    yield from _quick_sort(0, n - 1)

    yield Event(
        step=step_count,
        type="done",
        details="Quick Sort completed",
        data={"sorted_array": list(current_arr)}
    )


if __name__ == '__main__':
    test_array = [3,1,4,1,5,9,2,6]
    print(f"Original array: {test_array}")
    events = list(quick_sort_generator(test_array))

    print("\n--- Events ---")
    for event in events:
        print(event.to_json_serializable())

    print("\n--- Final Array ---")
    final_array_event = next(e for e in reversed(events) if e.type == "done")
    print(final_array_event.data["sorted_array"])
    assert final_array_event.data["sorted_array"] == sorted([3,1,4,1,5,9,2,6])
    print("Assertion passed: Array is sorted correctly.")

    test_array_2 = [3, 1, 4, 1, 5, 9, 2, 6]
    print(f"\nOriginal array 2: {test_array_2}")
    events_2 = list(quick_sort_generator(test_array_2))
    final_array_event_2 = next(e for e in reversed(events_2) if e.type == "done")
    assert final_array_event_2.data["sorted_array"] == sorted([3, 1, 4, 1, 5, 9, 2, 6])
    print("Assertion 2 passed: Array is sorted correctly.")


================================================================================
ملف: app\algorithms\__init__.py
================================================================================

================================================================================
ملف: app\algorithms\__pycache__\dijkstra.cpython-311.pyc
================================================================================
�
    we�h>  �            	       ��  � d dl mZmZmZmZmZ d dlmZmZ d dl	Z	dededeeddf         fd�Z
edk    �r-d	d
gddgg d�d
dgg d�ddgd�ZdZ ede� d��  �          e e
ee�  �        �  �        Z ed�  �         eD ]Z ee�                    �   �         �  �         �  ed�  �          ed�  ee�  �        D �   �         �  �        Z eej        d         �  �         d dddddd�Zej        d         ek    sJ � ed�  �         dgd
gg d�Z ed �  �          e e
ed�  �        �  �        Z ed!� eD �   �         �  �        sJ �ed"         j        d#k    sJ � ed$�  �         dS dS )%�    )�List�	Generator�Any�Dict�Tuple)�Event�GraphN�graph�
start_node�returnc              #   �h  K  � d}| r|| vr8t          |dd|� d�| |d���  �        V � |dz  }t          |dd	i ��  �        V � d
S d� | D �   �         }d||<   d|fg}t          �   �         }d� | D �   �         }t          |dd|� �| d� |�                    �   �         D �   �         |d���  �        V � |dz  }| D ]T}| |         D ]I\  }}	|	dk     r>t          |dd|� d|� d�|||	d���  �        V � |dz  }t          |ddi ��  �        V �   d
S �J�U|�rst          j        |�  �        \  }
}||v r�|�                    |�  �         t          |dd|� d|
� �||
d� |�                    �   �         D �   �         | d���  �        V � |dz  }| �                    |g �  �        D ]�\  }}	t          |dd|� d|� d|	� �|||	d� |�                    �   �         D �   �         | d���  �        V � |dz  }||vr�|
|	z   }|||         k     r�||         }|||<   |||<   t          j        |||f�  �         t          |d d!|� d|� d"|� d#|� �|||	|t          d$�  �        k    r|nd$|d%� |�                    �   �         D �   �         | d&���  �        V � |dz  }��|��st          |dd'd(� |�                    �   �         D �   �         || d)���  �        V � d
S )*a�  Generates events for visualizing Dijkstra's algorithm for Single Source Shortest Path (SSSP).

    Args:
        graph (Graph): The graph represented as an adjacency list
                       (e.g., {"A": [("B", 1)], "B": [("A", 1)]}).
        start_node (Any): The starting node for finding shortest paths.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   �errorzStart node z& not found in graph or graph is empty.)�graph_snapshotr   )�step�type�details�data�   �donezFDijkstra's algorithm aborted due to invalid start node or empty graph.Nc                 �.   � i | ]}|t          d �  �        ��S ��inf��float��.0�nodes     �=/home/ubuntu/AlgoVisEdu/AlgoVisEdu/app/algorithms/dijkstra.py�
<dictcomp>z&dijkstra_generator.<locals>.<dictcomp>!   s    � �6�6�6���u�U�|�|�6�6�6�    c                 �   � i | ]}|d ��S )N� r   s     r   r   z&dijkstra_generator.<locals>.<dictcomp>&   s   � �)�)�)�4�D�$�)�)�)r    �snapshotz#Initial graph state, starting from c                 �D   � i | ]\  }}||t          d �  �        k    r|nd ��S r   r   �r   �k�vs      r   r   z&dijkstra_generator.<locals>.<dictcomp>-   s6   � �4z�4z�4z�`d�`a�cd�Q�a�5��<�<�>O�9Z���UZ�4z�4z�4zr    )r   �	distancesr   z!Negative weight detected on edge �-z/. Dijkstra's does not support negative weights.)�ur'   �weight�5Dijkstra's algorithm aborted due to negative weights.�visitzVisiting node z with distance c                 �D   � i | ]\  }}||t          d �  �        k    r|nd ��S r   r   r%   s      r   r   z&dijkstra_generator.<locals>.<dictcomp>P   s^   � �  QW�  QW�  QW�  }A�|}�  @A�QR�Z[�_d�ej�_k�_k�Zk�Uv�UV�UV�qv�  QW�  QW�  QWr    )r*   �distancer(   r   �consider_edgezConsidering edge z with weight c                 �D   � i | ]\  }}||t          d �  �        k    r|nd ��S r   r   r%   s      r   r   z&dijkstra_generator.<locals>.<dictcomp>Y   sb   � �  X^�  X^�  X^�  DH�  DE�  GH�XY�ab�fk�lq�fr�fr�ar�\}�\]�\]�x}�  X^�  X^�  X^r    )r*   r'   r+   r(   r   �relaxzRelaxing edge z. New distance to z is r   c                 �D   � i | ]\  }}||t          d �  �        k    r|nd ��S r   r   r%   s      r   r   z&dijkstra_generator.<locals>.<dictcomp>i   s�   � �  IO�  IO�  IO�  uy�  uv�  xy�  JK�  ST�  X]�  ^c�  Xd�  Xd�  Sd�  No�  NO�  NO�  jo�  IO�  IO�  IOr    )r*   r'   r+   �old_distance�new_distancer(   r   zDijkstra's algorithm completedc                 �D   � i | ]\  }}||t          d �  �        k    r|nd ��S r   r   r%   s      r   r   z&dijkstra_generator.<locals>.<dictcomp>q   s3   � �!g�!g�!g�T�Q�PQ�!�1��e���+<�&G�a�a�%�!g�!g�!gr    )�final_distances�final_pathsr   )	r   �set�items�heapq�heappop�add�get�heappushr   )r
   r   �
step_countr(   �priority_queue�visited�pathr*   r'   r+   �current_distance�current_node�neighborr5   r4   s                  r   �dijkstra_generatorrG      s�  � � � � �J�� �J�e�+� ����T�*�T�T�T�$)��D�D�	
� 
� 
� 	
� 	
� 	
� 	�a��
����\��	
� 
� 
� 	
� 	
� 	
� 	��6�6��6�6�6�I��I�j���*�o�&�N��e�e�G�)�)�5�)�)�)�D� ���B�j�B�B� %�4z�4z�hq�hw�hw�hy�hy�4z�4z�4z�  KU�  V�  V�	� � � � � � �!�O�J� � � ���q�� 	� 	�I�A�v���z� ��#� �v��v�v�A�v�v�v� �q�F�;�;�	� � � � � � �a��
��#��S��	� � � � � � �����	�" � '$�).��~�)F�)F�&��,��7�"� 	�����L�!�!�!����T�\�T�T�BR�T�T�#�1A�  QW�  QW�  EN�  ET�  ET�  EV�  EV�  QW�  QW�  QW�  kp�  q�  q�	
� 
� 
� 	
� 	
� 	
� 	�a��
� %�	�	�,�� ;� ;� 	$� 	$��H�f���$�Z�L�Z�Z�8�Z�Z�RX�Z�Z�'�h�&�  X^�  X^�  LU�  L[�  L[�  L]�  L]�  X^�  X^�  X^�  rw�  x�  x�	� � � � � � �!�O�J��w�&� $�/�&�8���)�H�"5�5� $�#,�X�#6�L�*6�I�h�'�%1�D��N��N�>�L�(�3K�L�L�L��'�$� x�� x� x�� x� x�\d� x� x�jv� x� x�#/�h�&�s�  DI�  JO�  DP�  DP�  tP�  d[�co�co�  V[�  nz�  IO�  IO�  }F�  }L�  }L�  }N�  }N�  IO�  IO�  IO�  ch�  i�  i�	� � � � � � �!�O�J��O � '$�R ���0�!g�!g�U^�Ud�Ud�Uf�Uf�!g�!g�!g�x|�  QV�  W�  W�	� � � � � � � r    �__main__)�B�   )�C�   )�ArJ   )�E�   ))rM   rL   )�DrL   )�FrJ   ))rI   rO   )rP   rO   )rQ   r   )rK   rJ   )rN   r   )rM   rI   rK   rP   rN   rQ   rM   zRunning Dijkstra's from node z on example graph:z
--- Events ---z
--- Final Distances ---c              #   �0   K  � | ]}|j         d k    �|V � �dS )r   N�r   �r   �es     r   �	<genexpr>rV   �   s.   � � � �G�G�Q�a�f��6F�G�q�G�G�G�G�G�Gr    r7   rJ   rL   �   rO   z.Assertion passed: Final distances are correct.)rI   �����)rM   rI   rK   z2
Running Dijkstra's on graph with negative weight:c              #   �,   K  � | ]}|j         d k    V � �dS )r   NrS   rT   s     r   rV   rV   �   s)   � � � �:�:�Q�q�v�� �:�:�:�:�:�:r    rX   r,   z<Negative weight test passed (algorithm aborted as expected).)�typingr   r   r   r   r   �app.utils.typesr   r	   r;   rG   �__name__�example_graphr   �print�list�events�event�to_json_serializable�next�reversed�final_eventr   �expected_distances�negative_weight_graph�events_negative�anyr   r"   r    r   �<module>rj      s�  �� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� (� (� (� (� (� (� (� (� ����m�e� m�� m��5�$�PT�CT�9U� m� m� m� m�` �z�� %J� ��!���!�+�+�+���!�+�+�+���!�� �M� �J�	�E�
H�*�
H�
H�
H�I�I�I��T�$�$�]�J�?�?�@�@�F�	�E�
����� ,� ,����e�(�(�*�*�+�+�+�+�	�E�
%�&�&�&��$�G�G�(�(�6�"2�"2�G�G�G�G�G�K�	�E�+�
�,�
-�.�.�.� �q�q�q�q�q�I�I����-�.�2D�D�D�D�D�	�E�
:�;�;�;� �[��Z��� ��
 
�E�
?�@�@�@��d�-�-�.C�S�I�I�J�J�O��3�:�:�/�:�:�:�:�:�:�:�:��2��&�*a�a�a�a�a�	�E�
H�I�I�I�I�I�K%J� %Jr    

================================================================================
ملف: app\algorithms\__pycache__\dijkstra.cpython-312.pyc
================================================================================
�
    8o�h>  �            	       �X  � d dl mZmZmZmZmZ d dlmZmZ d dl	Z	dededeeddf   fd�Z
edk(  r�d	d
gddgg d�d
dgg d�ddgd�ZdZ ede� d��        e e
ee�      �      Z ed�       eD ]  Z eej%                  �       �       �  ed�        ed�  ee�      D �       �      Z eej,                  d   �       d dddddd�Zej,                  d   ek(  sJ � ed�       dgd
gg d�Z ed �        e e
ed�      �      Z ed!� eD �       �      sJ �ed"   j6                  d#k(  sJ � ed$�       yy)%�    )�List�	Generator�Any�Dict�Tuple)�Event�GraphN�graph�
start_node�returnc              #   �N  K  � d}| r|| vr/t        |dd|� d�| |d���      �� |dz  }t        |dd	i ��      �� y
| D �ci c]  }|t        d�      �� }}d||<   d|fg}t        �       }| D �ci c]  }|d
�� }}t        |dd|� �| |j                  �       D ��	ci c]  \  }}	||	t        d�      k7  r|	nd�� c}	}|d���      �� |dz  }| D ]I  }
| |
   D ]?  \  }	}|dk  s�t        |dd|
� d|	� d�|
|	|d���      �� |dz  }t        |ddi ��      ��   y
 �K |�r�t	        j
                  |�      \  }}||v r� |j                  |�       t        |dd|� d|� �|||j                  �       D ��	ci c]  \  }}	||	t        d�      k7  r|	nd�� c}	}| d���      �� |dz  }| j                  |g �      D �]  \  }}t        |dd|� d|� d|� �||||j                  �       D ��	ci c]  \  }}	||	t        d�      k7  r|	nd�� c}	}| d���      �� |dz  }||vs�c||z   }|||   k  s�q||   }|||<   |||<   t	        j                  |||f�       t        |dd|� d|� d|� d|� �||||t        d�      k7  r|nd||j                  �       D ��	ci c]  \  }}	||	t        d�      k7  r|	nd�� c}	}| d ���      �� |dz  }�� |r���t        |dd!|j                  �       D ��	ci c]  \  }}	||	t        d�      k7  r|	nd�� c}	}|| d"���      �� y
c c}w c c}w c c}	}w c c}	}w c c}	}w c c}	}w c c}	}w �w)#a�  Generates events for visualizing Dijkstra's algorithm for Single Source Shortest Path (SSSP).

    Args:
        graph (Graph): The graph represented as an adjacency list
                       (e.g., {"A": [("B", 1)], "B": [("A", 1)]}).
        start_node (Any): The starting node for finding shortest paths.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   �errorzStart node z& not found in graph or graph is empty.)�graph_snapshotr   )�step�type�details�data�   �donezFDijkstra's algorithm aborted due to invalid start node or empty graph.N�inf�snapshotz#Initial graph state, starting from )r   �	distancesr   z!Negative weight detected on edge �-z/. Dijkstra's does not support negative weights.)�u�v�weight�5Dijkstra's algorithm aborted due to negative weights.�visitzVisiting node z with distance )r   �distancer   r   �consider_edgezConsidering edge z with weight )r   r   r   r   r   �relaxzRelaxing edge z. New distance to z is )r   r   r   �old_distance�new_distancer   r   zDijkstra's algorithm completed)�final_distances�final_pathsr   )	r   �float�set�items�heapq�heappop�add�get�heappush)r
   r   �
step_count�noder   �priority_queue�visited�path�kr   r   r   �current_distance�current_node�neighborr#   r"   s                    �TC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\algorithms\dijkstra.py�dijkstra_generatorr8      s=  � �� � �J��J�e�+����!�*��-S�T�$)��D�	
� 	
� 	�a��
����\��	
� 	
� 	�05�6����u�U�|�#��I�6��I�j���*�o�&�N��e�G�#(�)�5�4�D�$�J�5�D�)� ���5�j�\�B� %�hq�hw�hw�hy�4z�hy�`d�`a�cd�Q�a�5��<�>O��UZ�5Z�hy�4z�  KU�  V�	� � �!�O�J� ���q��I�A�v���z��#� �?��s�!�A�3�Fu�v� �q�F�;�	� � �a��
��#��S��	� � � "� �$ �).���~�)F�&��,��7�"�����L�!����$�\�N�/�BR�AS�T�#�1A�  EN�  ET�  ET�  EV�  QW�  EV�  }A�|}�  @A�QR�Z[�_d�ej�_k�Zk�UV�qv�Qv�  EV�  QW�  kp�  q�	
� 	
� 	�a��
� %�	�	�,�� ;��H�f���$�+�L�>��8�*�M�RX�QY�Z�'�h�&�  LU�  L[�  L[�  L]�  X^�  L]�  DH�  DE�  GH�XY�ab�fk�lq�fr�ar�\]�x}�X}�  L]�  X^�  rw�  x�	� � �!�O�J��w�&�/�&�8���)�H�"5�5�#,�X�#6�L�*6�I�h�'�%1�D��N��N�N�>�L�(�3K�L��'�$�"0���a��z�I[�\d�[e�ei�jv�iw� x�#/�h�&�s�  DI�  JO�  DP�  tP�co�  V[�  nz�  }F�  }L�  }L�  }N�  IO�  }N�  uy�  uv�  xy�  JK�  ST�  X]�  ^c�  Xd�  Sd�  NO�  jo�  Jo�  }N�  IO�  ch�  i�	� � �!�O�J�/ !<�! �R ���0�U^�Ud�Ud�Uf�!g�Uf�T�Q�PQ�!�1��e��+<�a�%�"G�Uf�!g�x|�  QV�  W�	� ��Y 7��
 *�� 5{��F QW�� X^��  IO�� "h�ss   �<L%�K=�L%�+
L�5!L%�L�3(L%�BL%�(L�AL%�L�5L%�L%�A#L%�>L�L%�5L%�L�-8L%�__main__)�B�   )�C�   )�Ar;   )�E�   ))r>   r=   )�Dr=   )�Fr;   ))r:   r@   )rA   r@   )rB   r   )r<   r;   )r?   r   )r>   r:   r<   rA   r?   rB   r>   zRunning Dijkstra's from node z on example graph:z
--- Events ---z
--- Final Distances ---c              #   �@   K  � | ]  }|j                   d k(  s�|�� � y�w)r   N�r   ��.0�es     r7   �	<genexpr>rH   �   s   � �� �G�"2�Q�a�f�f��6F�q�"2�s   ��r$   r;   r=   �   �   z.Assertion passed: Final distances are correct.)r:   �����)r>   r:   r<   z2
Running Dijkstra's on graph with negative weight:c              #   �:   K  � | ]  }|j                   d k(  �� � y�w)r   NrD   rE   s     r7   rH   rH   �   s   � �� �:�/�Q�q�v�v�� �/�s   �rK   r   z<Negative weight test passed (algorithm aborted as expected).)�typingr   r   r   r   r   �app.utils.typesr   r	   r)   r8   �__name__�example_graphr   �print�list�events�event�to_json_serializable�next�reversed�final_eventr   �expected_distances�negative_weight_graph�events_negative�anyr   � �    r7   �<module>r_      s�  �� 4� 4� (� �m�e� m�� m��5�$�PT�CT�9U� m�` �z�� ��!���!�+���!�+���!��M� �J�	�)�*��5G�
H�I��$�]�J�?�@�F�	�
�����e�(�(�*�+� � 
�
%�&��G�(�6�"2�G�G�K�	�+�
�
�,�
-�.� �q�q�q�q�q�I�����-�.�2D�D�D�D�	�
:�;� �[��Z����
 
�
?�@��-�.C�S�I�J�O��:�/�:�:�:�:��2��&�&�*a�a�a�a�	�
H�I�K r^   

================================================================================
ملف: app\algorithms\__pycache__\kruskal.cpython-311.pyc
================================================================================
�
    ��h�  �                   �  � d dl mZmZmZmZmZ d dlmZmZ d dl	m
Z
 dedeeddf         fd�Zedk    �r�d	d
gg d�ddgg d�g d�g d�ddgd�Z ed�  �          e ee�  �        �  �        Z ed�  �         eD ]Z ee�                    �   �         �  �         �  ed�  �          ed�  ee�  �        D �   �         �  �        Z eej        d         �  �         g d�Zd� ej        d         D �   �         Zd� eD �   �         Zeek    sJ � ed�  �         dgdgdgd gd!�Z ed"�  �          e ee�  �        �  �        Z ed#�  ee�  �        D �   �         �  �        Z eej        d         �  �          ed$�  �        h ed%�  �        hgZd&� ej        d         D �   �         Z e d'� eD �   �         �  �        r e d(� eD �   �         �  �        sJ � ed)�  �         dS dS )*�    )�List�	Generator�Any�Dict�Tuple)�Event�Graph)�	UnionFind�graph�returnNc              #   �   K  � d}t          | �                    �   �         �  �        }g }| D ]6}| |         D ]+\  }}|||f|vr|||f|vr|�                    |||f�  �         �,�7|�                    d� ��  �         g }t	          |�  �        }t          |dd| ||d���  �        V � |dz  }|D ]�\  }}}t          |d	d
|� d|� d|� �|||t          |�  �        | d���  �        V � |dz  }|�                    |�  �        |�                    |�  �        k    rd|�                    ||�  �         |�                    ||f�  �         t          |dd|� d|� d|� d�|||t          |�  �        | d���  �        V � |dz  }��t          |dd|| d���  �        V � dS )a<  Generates events for visualizing Kruskal's algorithm for Minimum Spanning Tree (MST).

    Args:
        graph (Graph): The graph represented as an adjacency list
                       (e.g., {"A": [("B", 1)], "B": [("A", 1)]}).

    Yields:
        Event: An event object representing a step in the algorithm.
    r   c                 �   � | d         S )N�   � )�xs    �</home/ubuntu/AlgoVisEdu/AlgoVisEdu/app/algorithms/kruskal.py�<lambda>z#kruskal_generator.<locals>.<lambda>   s
   � �Q�q�T� �    )�key�snapshotzInitial graph state)�graph_snapshot�nodes�sorted_edges)�step�type�details�data�   �consider_edgezConsidering edge (�-z) with weight )�u�v�weight�	mst_edgesr   �add_mst_edgezAdding edge (z) to MST (weight �)�donezKruskal's algorithm completed)r$   �final_graphN)�list�keys�append�sortr
   r   �find�union)	r   �
step_countr   �edgesr!   r"   r#   r$   �ufs	            r   �kruskal_generatorr2      sh  � � � � �J���������E��E�� -� -���q�� 	-� 	-�I�A�v��1�f�~�U�*� -��1�f�~�U�/J� -����a��F�^�,�,�,��	-� 
�J�J�>�>�J�"�"�"��I�	�5�	�	�B�
���%� %��u�M�M�	� � � � � � �!�O�J�� � ���1�f��� �F��F�F�Q�F�F�f�F�F��q�F��i���di�j�j�	
� 
� 
� 	
� 	
� 	
� 	�a��
��7�7�1�:�:�������#� 		��H�H�Q��N�N�N����a��V�$�$�$���#�I��I�I�A�I�I��I�I�I��1��T�)�_�_�hm�n�n�	� � � � � � �!�O�J��
���/�$�U�;�;�	� � � � � � � r   �__main__��B�   )�D�   ))�Ar6   )�C�   )r7   �	   )�Er6   )r5   r;   )r=   r8   ))r9   r8   )r5   r<   )r=   �   )�F�   )r4   )r:   r8   )r7   r>   )r?   r;   )�Gr<   ))r7   r@   )r=   r;   )rA   �   )r=   r<   )r?   rB   )r9   r5   r:   r7   r=   r?   rA   z#Running Kruskal's on example graph:z
--- Events ---z
--- Final MST Edges ---c              #   �0   K  � | ]}|j         d k    �|V � �dS �r'   N�r   ��.0�es     r   �	<genexpr>rI   V   s.   � � � �G�G�Q�a�f��6F�G�q�G�G�G�G�G�Gr   r$   ))r9   r7   )r:   r=   )r7   r?   )r5   r=   �r9   r5   )r=   rA   c                 �,   � h | ]}t          |�  �        ��S r   ��	frozenset�rG   �edges     r   �	<setcomp>rP   ^   s   � �V�V�V��I�d�O�O�V�V�Vr   c                 �,   � h | ]}t          |�  �        ��S r   rL   rN   s     r   rP   rP   _   s   � �M�M�M�$�i��o�o�M�M�Mr   z(Assertion passed: MST edges are correct.)r5   r   )r9   r   )r7   r   )r:   r   )r9   r5   r:   r7   z)
Running Kruskal's on disconnected graph:c              #   �0   K  � | ]}|j         d k    �|V � �dS rD   rE   rF   s     r   rI   rI   m   s1   � � � �#a�#a�!�PQ�PV�Z`�P`�#a�A�#a�#a�#a�#a�#a�#ar   rJ   )r:   r7   c                 �.   � g | ]}t          |�  �        h��S r   rL   rN   s     r   �
<listcomp>rT   p   s!   � �h�h�h�T�	�$���0�h�h�hr   c              #   �(   K  � | ]}|t           v V � �d S �N)�expected_disconnected_mst�rG   �items     r   rI   rI   q   s(   � � � �U�U�T�t�0�0�U�U�U�U�U�Ur   c              #   �(   K  � | ]}|t           v V � �d S rV   )�actual_disconnected_mstrX   s     r   rI   rI   r   s(   � � � �U�U�4�t�.�.�U�U�U�U�U�Ur   zDisconnected graph test passed.)!�typingr   r   r   r   r   �app.utils.typesr   r	   �app.utils.union_findr
   r2   �__name__�example_graph�printr)   �events�event�to_json_serializable�next�reversed�final_eventr   �expected_mst_edges�actual_mst_edges_set�expected_mst_edges_set�disconnected_graph�events_disconnected�final_event_disconnectedrM   rW   r[   �allr   r   r   �<module>ro      sU  �� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� 4� (� (� (� (� (� (� (� (� *� *� *� *� *� *�:�U� :�y���d�1B�'C� :� :� :� :�z �z�� 1-� ��!�5�5�5���!�6�6�6�@�@�@�,�,�,��	�"�� �M� 
�E�
/�0�0�0��T�#�#�M�2�2�3�3�F�	�E�
����� ,� ,����e�(�(�*�*�+�+�+�+�	�E�
%�&�&�&��$�G�G�(�(�6�"2�"2�G�G�G�G�G�K�	�E�+�
�;�
'�(�(�(�� � �� W�V��8H��8U�V�V�V��M�M�:L�M�M�M���#9�9�9�9�9�	�E�
4�5�5�5� �Z��Z��Z��Z�	� �� 
�E�
6�7�7�7��$�0�0�1C�D�D�E�E��#�t�#a�#a�x�x�8K�/L�/L�#a�#a�#a�a�a��	�E�
"�
'��
4�5�5�5�"+�)�J�"7�"7�!8�9�9�Z�;P�;P�:Q� R��h�h�=U�=Z�[f�=g�h�h�h���3�U�U�=T�U�U�U�U�U� V��3�U�U�;T�U�U�U�U�U�V� V� V�	�E�
+�,�,�,�,�,�c1-� 1-r   

================================================================================
ملف: app\algorithms\__pycache__\kruskal.cpython-312.pyc
================================================================================
�
    |��h�  �                   �x  � d dl mZmZmZmZmZ d dlmZmZ d dl	m
Z
 dedeeddf   fd�Zedk(  �r{d	d
gg d�ddgg d�g d�g d�ddgd�Z ed�        e ee�      �      Z ed�       eD ]  Z eej%                  �       �       �  ed�        ed�  ee�      D �       �      Z eej,                  d   �       g d�Zej,                  d   D � ch c]
  }  e| �      �� c} ZeD � ch c]
  }  e| �      �� c} Zeek(  sJ � ed�       dgdgdgdgd�Z ed �        e ee�      �      Z ed!�  ee�      D �       �      Z eej,                  d   �        ed"�      h ed#�      hgZej,                  d   D � cg c]  }  e| �      h�� c} Z e d$� eD �       �      r e d%� eD �       �      sJ � ed&�       yyc c} w c c} w c c} w )'�    )�List�	Generator�Any�Dict�Tuple)�Event�Graph)�	UnionFind�graph�returnNc              #   �  K  � d}t        | j                  �       �      }g }| D ]3  }| |   D ])  \  }}|||f|vs�|||f|vs�|j                  |||f�       �+ �5 |j                  d� ��       g }t	        |�      }t        |dd| ||d���      �� |dz  }|D ]�  \  }}}t        |d	d
|� d|� d|� �|||t        |�      | d���      �� |dz  }|j                  |�      |j                  |�      k7  s�Y|j                  ||�       |j                  ||f�       t        |dd|� d|� d|� d�|||t        |�      | d���      �� |dz  }�� t        |dd|| d���      �� y�w)a<  Generates events for visualizing Kruskal's algorithm for Minimum Spanning Tree (MST).

    Args:
        graph (Graph): The graph represented as an adjacency list
                       (e.g., {"A": [("B", 1)], "B": [("A", 1)]}).

    Yields:
        Event: An event object representing a step in the algorithm.
    r   c                 �   � | d   S )N�   � )�xs    �SC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\algorithms\kruskal.py�<lambda>z#kruskal_generator.<locals>.<lambda>   s   � �Q�q�T�    )�key�snapshotzInitial graph state)�graph_snapshot�nodes�sorted_edges)�step�type�details�data�   �consider_edgezConsidering edge (�-z) with weight )�u�v�weight�	mst_edgesr   �add_mst_edgezAdding edge (z) to MST (weight �)�donezKruskal's algorithm completed)r$   �final_graphN)�list�keys�append�sortr
   r   �find�union)	r   �
step_countr   �edgesr!   r"   r#   r$   �ufs	            r   �kruskal_generatorr2      s�  � �� � �J�������E��E����q��I�A�v��1�f�~�U�*��1�f�~�U�/J����a��F�^�,� "� � 
�J�J�>�J�"��I�	�5�	�B�
���%� %��u�M�	� � �!�O�J����1�f��� �(���1�Q�C�~�f�X�F��q�F��i��di�j�	
� 	
� 	�a��
��7�7�1�:������#��H�H�Q��N����a��V�$���#�'��s�!�A�3�.?��x�q�I��1��T�)�_�hm�n�	� � �!�O�J�% �( ���/�$�U�;�	� �s   �5E�E� B,E�-A+E�__main__��B�   )�D�   ))�Ar6   )�C�   )r7   �	   )�Er6   )r5   r;   )r=   r8   ))r9   r8   )r5   r<   )r=   �   )�F�   )r4   )r:   r8   )r7   r>   )r?   r;   )�Gr<   ))r7   r@   )r=   r;   )rA   �   )r=   r<   )r?   rB   )r9   r5   r:   r7   r=   r?   rA   z#Running Kruskal's on example graph:z
--- Events ---z
--- Final MST Edges ---c              #   �@   K  � | ]  }|j                   d k(  s�|�� � y�w�r'   N�r   ��.0�es     r   �	<genexpr>rI   V   s   � �� �G�"2�Q�a�f�f��6F�q�"2��   ��r$   ))r9   r7   )r:   r=   )r7   r?   )r5   r=   �r9   r5   )r=   rA   z(Assertion passed: MST edges are correct.)r5   r   )r9   r   )r7   r   )r:   r   )r9   r5   r:   r7   z)
Running Kruskal's on disconnected graph:c              #   �@   K  � | ]  }|j                   d k(  s�|�� � y�wrD   rE   rF   s     r   rI   rI   m   s"   � �� �#a�/L�!�PQ�PV�PV�Z`�P`�A�/L�rJ   rK   )r:   r7   c              #   �,   K  � | ]  }|t         v �� � y �w�N)�expected_disconnected_mst�rG   �items     r   rI   rI   q   s   � �� �U�=T�T�t�0�0�=T��   �c              #   �,   K  � | ]  }|t         v �� � y �wrN   )�actual_disconnected_mstrP   s     r   rI   rI   r   s   � �� �U�;T�4�t�.�.�;T�rR   zDisconnected graph test passed.)!�typingr   r   r   r   r   �app.utils.typesr   r	   �app.utils.union_findr
   r2   �__name__�example_graph�printr)   �events�event�to_json_serializable�next�reversed�final_eventr   �expected_mst_edges�	frozenset�actual_mst_edges_set�expected_mst_edges_set�disconnected_graph�events_disconnected�final_event_disconnectedrO   rT   �all)�edges   0r   �<module>rj      s1  �� 4� 4� (� *�:�U� :�y���d�1B�'C� :�z �z�� ��!�5���!�6�@�,��	�"��M� 
�
/�0��#�M�2�3�F�	�
�����e�(�(�*�+� � 
�
%�&��G�(�6�"2�G�G�K�	�+�
�
�;�
'�(��� 9D�8H�8H��8U�V�8U��I�d�O�8U�V��:L�M�:L�$�i��o�:L�M���#9�9�9�9�	�
4�5� �Z��Z��Z��Z�	�� 
�
6�7��0�1C�D�E��#�#a�x�8K�/L�#a�a��	�
"�
'�
'��
4�5�"+�J�"7�!8�9�Z�;P�:Q� R��=U�=Z�=Z�[f�=g�h�=g�T�	�$��0�=g�h���U�=T�U�U��U�;T�U�U�V� V�	�
+�,�c ��8 W��M��" is   �F-�!F2�0F7

================================================================================
ملف: app\algorithms\__pycache__\linear_search.cpython-311.pyc
================================================================================
�
    ��hn
  �            	       �   � d dl mZmZmZ d dlmZmZ dededeeddf         fd�Zedk    r�g d	�Z	d
Z
dZ ede
� de	� ��  �          e ee	e
�  �        �  �        ZeD ]Z ee�                    �   �         �  �         � ed         Zej        d         du sJ � ed�  �          ede� de	� ��  �          e ee	e�  �        �  �        ZeD ]Z ee�                    �   �         �  �         � ed         Zej        d         du sJ � ed�  �         dS dS )�    )�List�	Generator�Any)�Event�Array�arr�target�returnNc              #   �l  K  � d}t          | �  �        }d}t          |dd|� �t          | �  �        |d���  �        V � |dz  }t          |�  �        D ]�}t          |dd	|� d
| |         � d|� �|| |         |t          | �  �        d���  �        V � |dz  }| |         |k    r<t          |dd|� d|� �|| |         |t          | �  �        d���  �        V � |dz  }d} n��|s.t          |dd|� d�|t          | �  �        d���  �        V � |dz  }t          |dd||t          | �  �        d���  �        V � dS )a  Generates events for visualizing the Linear Search algorithm.

    Args:
        arr (Array): The list of elements to search through.
        target (Any): The element to search for.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   F�snapshotz#Initial array state, searching for )�array_snapshotr	   )�step�type�details�data�   �visitzVisiting index z, comparing z with target )�index�valuer	   r   �foundzTarget z found at index T�	not_foundz not found in the array)r	   r   �donezLinear Search completed)r   r	   �final_arrayN)�lenr   �list�range)r   r	   �
step_count�nr   �is         �B/home/ubuntu/AlgoVisEdu/AlgoVisEdu/app/algorithms/linear_search.py�linear_search_generatorr!      s  � � � � �J��C���A��E�
���>�f�>�>� $�S�	�	�V�<�<�	� � � � � � �!�O�J��1�X�X� � �����R�a�R�R�S��V�R�R�&�R�R��s�1�v��SW�X[�S\�S\�]�]�	
� 
� 
� 	
� 	
� 	
� 	�a��
��q�6�V�� 		����=�&�=�=�!�=�=� �3�q�6�V�W[�\_�W`�W`�a�a�	� � � � � � �!�O�J��E��E�		� � ����=�f�=�=�=�"�d�3�i�i�@�@�	
� 
� 
� 	
� 	
� 	
� 	�a��
�
���)���t�C�y�y�I�I�	� � � � � � � �    �__main__)�&   �   �+   �   �	   �R   �
   r(   �d   zSearching for z in �����r   TzFound test passed.z
Searching for FzNot found test passed.)�typingr   r   r   �app.utils.typesr   r   r!   �__name__�
test_array�target_found�target_not_found�printr   �events_found�event�to_json_serializable�final_event_foundr   �events_not_found�final_event_not_found� r"   r    �<module>r;      s�  �� '� '� '� '� '� '� '� '� '� '� (� (� (� (� (� (� (� (�8�� 8�� 8�	�%��t�BS�8T� 8� 8� 8� 8�v �z�� $�+�+�+�J��L���	�E�
9�<�
9�
9�Z�
9�
9�:�:�:��4�/�/�
�L�I�I�J�J�L�� ,� ,����e�(�(�*�*�+�+�+�+�$�R�(���!�'�*�d�2�2�2�2�	�E�
����	�E�
?�-�
?�
?�:�
?�
?�@�@�@��t�3�3�J�@P�Q�Q�R�R��!� ,� ,����e�(�(�*�*�+�+�+�+�,�R�0�� �%�g�.�%�7�7�7�7�	�E�
"�#�#�#�#�#�'$� $r"   

================================================================================
ملف: app\algorithms\__pycache__\linear_search.cpython-312.pyc
================================================================================
�
    d��hn
  �            	       ��  � d dl mZmZmZ d dlmZmZ dededeeddf   fd�Zedk(  r�g d	�Z	d
Z
dZ ede
� de	� ��        e ee	e
�      �      ZeD ]  Z eej!                  �       �       � ed   Zej$                  d   du sJ � ed�        ede� de	� ��        e ee	e�      �      ZeD ]  Z eej!                  �       �       � ed   Zej$                  d   du sJ � ed�       yy)�    )�List�	Generator�Any)�Event�Array�arr�target�returnNc              #   ��  K  � d}t        | �      }d}t        |dd|� �t        | �      |d���      �� |dz  }t        |�      D ]n  }t        |dd	|� d
| |   � d|� �|| |   |t        | �      d���      �� |dz  }| |   |k(  s�?t        |dd|� d|� �|| |   |t        | �      d���      �� |dz  }d} n |s&t        |dd|� d�|t        | �      d���      �� |dz  }t        |dd||t        | �      d���      �� y�w)a  Generates events for visualizing the Linear Search algorithm.

    Args:
        arr (Array): The list of elements to search through.
        target (Any): The element to search for.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   F�snapshotz#Initial array state, searching for )�array_snapshotr	   )�step�type�details�data�   �visitzVisiting index z, comparing z with target )�index�valuer	   r   �foundzTarget z found at index T�	not_foundz not found in the array)r	   r   �donezLinear Search completed)r   r	   �final_arrayN)�lenr   �list�range)r   r	   �
step_count�nr   �is         �YC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\algorithms\linear_search.py�linear_search_generatorr!      sf  � �� � �J��C��A��E�
���5�f�X�>� $�S�	�V�<�	� � �!�O�J��1�X�����%�a�S��S��V�H�M�&��R��s�1�v��SW�X[�S\�]�	
� 	
� 	�a��
��q�6�V�����!�&��)9�!��=� �3�q�6�V�W[�\_�W`�a�	� � �!�O�J��E��% �( �����f�X�%<�=�"�d�3�i�@�	
� 	
� 	�a��
�
���)���t�C�y�I�	� �s   �A>C:�A9C:�__main__)�&   �   �+   �   �	   �R   �
   r'   �d   zSearching for z in �����r   TzFound test passed.z
Searching for FzNot found test passed.)�typingr   r   r   �app.utils.typesr   r   r!   �__name__�
test_array�target_found�target_not_found�printr   �events_found�event�to_json_serializable�final_event_foundr   �events_not_found�final_event_not_found� �    r    �<module>r;      s7  �� '� '� (�8�� 8�� 8�	�%��t�BS�8T� 8�v �z��+�J��L���	�N�<�.��Z�L�
9�:��/�
�L�I�J�L����e�(�(�*�+� �$�R�(���!�!�'�*�d�2�2�2�	�
��	��-�.�d�:�,�
?�@��3�J�@P�Q�R��!���e�(�(�*�+� "�,�R�0�� �%�%�g�.�%�7�7�7�	�
"�#�' r:   

================================================================================
ملف: app\algorithms\__pycache__\merge_sort.cpython-311.pyc
================================================================================
�
    H�h   �                   ��  � d dl mZmZmZ d dlmZmZ dedeeddf         fd�Zedk    r�g d�Z	 e
d	e	� ��  �          e ee	�  �        �  �        Z e
d
�  �         eD ]Z e
e�                    �   �         �  �         �  e
d�  �          ed�  ee�  �        D �   �         �  �        Z e
ej        d         �  �         ej        d          eg d��  �        k    sJ � e
d�  �         dS dS )�    )�List�	Generator�Any)�Event�Array�arr�returnNc              #   ��  ����K  � t          | �  �        }t          | �  �        �d�t          �dddt          | �  �        i��  �        V � �dz  �dt          dt          d	t          d
df���fd��dt          dt          dt          d	t          d
t
          t          ddf         f
��fd�� �| d|dz
  �  �        E d{V �� t          �dddt          | �  �        i��  �        V � dS )z�Generates events for visualizing the Merge Sort algorithm.

    Args:
        arr (Array): The list of numbers to be sorted.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   �snapshotzInitial array state�array_snapshot��step�type�details�data�   �current_arr�left�rightr	   Nc              3   �  �K  � ||k     rz||z   dz  }t          �dd|� d|� d�|||t          | �  �        d���  �        V � �dz  � �| ||�  �        E d {V ��  �| |dz   |�  �        E d {V ��  �| |||�  �        E d {V �� d S d S )	N�   �dividezDividing array from index � to z into two halves)r   r   �midr   r   r   )r   �list)r   r   r   r   �_merge�_merge_sort�
step_counts       ����?/home/ubuntu/AlgoVisEdu/AlgoVisEdu/app/algorithms/merge_sort.pyr   z)merge_sort_generator.<locals>._merge_sort   s
  �� � � ��%�<� 	=��%�<�A�%�C����V�T�V�V�u�V�V�V�"�U�3�RV�Wb�Rc�Rc�d�d�	� � � � � � �!�O�J�"�{�;��c�:�:�:�:�:�:�:�:�:�"�{�;��a���?�?�?�?�?�?�?�?�?��v�k�4��e�<�<�<�<�<�<�<�<�<�<�<�	=� 	=�    r   c              3   �  �K  � |}|dz   }|}t          �dd|� d|� �|||t          | �  �        d���  �        V � �dz  �||k    �r"||k    �rt          �dd|� d	| |         � d
|� d	| |         � d�	||| |         | |         t          | �  �        d���  �        V � �dz  �| |         | |         k    rS| |         �	|<   t          �dd|� d|� d| |         � d�|| |         |t          | �  �        d���  �        V � �dz  �|dz  }nR| |         �	|<   t          �dd|� d|� d| |         � d�|| |         |t          | �  �        d���  �        V � �dz  �|dz  }|dz  }||k    r||k    ��||k    r]| |         �	|<   t          �dd|� d| |         � d|� d�|| |         |t          | �  �        d���  �        V � �dz  �|dz  }|dz  }||k    �]||k    r]| |         �	|<   t          �dd|� d| |         � d|� d�|| |         |t          | �  �        d���  �        V � �dz  �|dz  }|dz  }||k    �]t          ||dz   �  �        D ]N}�	|         | |<   t          �dd|� d�	|         � d|� d�|�	|         t          | �  �        d���  �        V � �dz  ��Ot          �dd|� d|� �||t          | �  �        d���  �        V � �dz  �d S )Nr   �merge_startz"Starting merge for sub-array from r   )r   r   r   r   r   �comparezComparing elements at index z (z) and �))�i�j�value_i�value_jr   �	overwritezOverwriting temp_arr[z] with current_arr[z] ()�index�value�source_indexr   z&Copying remaining element current_arr[z) to temp_arr[�]�	copy_backzCopying temp_arr[z) back to current_arr[)r*   r+   r   �	merge_endz Finished merging sub-array from )r   r   r   )r   r   �range)
r   r   r   r   r%   r&   �k�xr   �temp_arrs
           ��r   r   z$merge_sort_generator.<locals>._merge+   s�  �� � � ����!�G�������J��J�J�5�J�J��s�U�d�S^�N_�N_�`�`�	
� 
� 
� 	
� 	
� 	
� 	�a��
��3�h� 	�1��:� 	����h�q�h�h�K��N�h�h�RS�h�h�Wb�cd�We�h�h�h��1��Q��K�XY�N�nr�s~�n�n�  A�  A�	� � � � � � �!�O�J��1�~��Q��/� �)�!�n�����#�$�a�A�a�a�!�a�a�P[�\]�P^�a�a�a�#$�{�1�~�q�dh�it�du�du�v�v�	� � � � � � �a��
��Q����)�!�n�����#�$�a�A�a�a�!�a�a�P[�\]�P^�a�a�a�#$�{�1�~�q�dh�it�du�du�v�v�	� � � � � � �a��
��Q�����F�A�; �3�h� 	�1��:� 	�> �3�h� 
	�%�a�.�H�Q�K��� �i��i�i�{�ST�~�i�i�ef�i�i�i� �;�q�>�1�`d�ep�`q�`q�r�r�	� � � � � � �!�O�J���F�A���F�A� �3�h� 
	� �5�j� 
	�%�a�.�H�Q�K��� �i��i�i�{�ST�~�i�i�ef�i�i�i� �;�q�>�1�`d�ep�`q�`q�r�r�	� � � � � � �!�O�J���F�A���F�A� �5�j� 
	� �t�U�Q�Y�'�'� 	� 	�A�%�a�[�K��N��� �Y�A�Y�Y�(�1�+�Y�Y�UV�Y�Y�Y� �8�A�;�$�{�J[�J[�\�\�	� � � � � � �!�O�J�J����H�t�H�H��H�H���$�{�BS�BS�T�T�	
� 
� 
� 	
� 	
� 	
� 	�a��
�
�
r    �donezMerge Sort completed�sorted_array)�lenr   r   r   �intr   )r   �nr   r   r   r3   s     @@@@r   �merge_sort_generatorr9      s~  ����� � � � 	�C���A��C�y�y�H��J�
���%���S�	�	�*�	� � � � � � �!�O�J�=�� =�c� =�#� =�$� =� =� =� =� =� =� =� =�$U�E� U�� U�3� U�s� U�y�QV�X\�^b�Qb�Gc� U� U� U� U� U� U� U�p �{�3��1�q�5�)�)�)�)�)�)�)�)�)�
���&��d�3�i�i�(�	� � � � � � � r    �__main__)�&   �   �+   �   �	   �R   �
   zOriginal array: z
--- Events ---z
--- Final Array ---c              #   �0   K  � | ]}|j         d k    �|V � �dS )r4   N)r   )�.0�es     r   �	<genexpr>rE   �   s.   � � � �M�M�1�A�F�f�<L�M�Q�M�M�M�M�M�Mr    r5   z,Assertion passed: Array is sorted correctly.)�typingr   r   r   �app.utils.typesr   r   r9   �__name__�
test_array�printr   �events�event�to_json_serializable�next�reversed�final_array_eventr   �sorted� r    r   �<module>rS      s�  �� '� '� '� '� '� '� '� '� '� '� (� (� (� (� (� (� (� (�F�e� F�	�%��t�2C�(D� F� F� F� F�R �z�� :�+�+�+�J�	�E�
)�Z�
)�
)�*�*�*��T�&�&�z�2�2�3�3�F�	�E�
����� ,� ,����e�(�(�*�*�+�+�+�+�	�E�
!�"�"�"���M�M����(8�(8�M�M�M�M�M��	�E�
�
 ��
0�1�1�1��!�.�1�V�V�<V�<V�<V�5W�5W�W�W�W�W�	�E�
8�9�9�9�9�9�:� :r    

================================================================================
ملف: app\algorithms\__pycache__\merge_sort.cpython-312.pyc
================================================================================
�
    ز�h   �                   �  � d dl mZmZmZ d dlmZmZ dedeeddf   fd�Zedk(  r�g d�Z	 e
d	e	� ��        e ee	�      �      Z e
d
�       eD ]  Z e
ej                  �       �       �  e
d�        ed�  ee�      D �       �      Z e
ej$                  d   �       ej$                  d    eg d��      k(  sJ � e
d�       yy)�    )�List�	Generator�Any)�Event�Array�arr�returnNc              #   �  ����K  � t        | �      }t        | �      �d�t        �dddt        | �      i��      �� �dz  �dt        dt        d	t        d
df���fd��dt        dt        dt        d	t        d
t
        t        ddf   f
��fd�� �| d|dz
  �      E d{  ���  t        �dddt        | �      i��      �� y7 �!�w)z�Generates events for visualizing the Merge Sort algorithm.

    Args:
        arr (Array): The list of numbers to be sorted.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   �snapshotzInitial array state�array_snapshot��step�type�details�data�   �current_arr�left�rightr	   Nc              3   �   �K  � ||k  rn||z   dz  }t        �dd|� d|� d�|||t        | �      d���      �� �dz  � �| ||�      E d {  ���   �| |dz   |�      E d {  ���   �| |||�      E d {  ���  y y 7 �.7 �7 �
�w)	N�   �dividezDividing array from index � to z into two halves)r   r   �midr   r   r   )r   �list)r   r   r   r   �_merge�_merge_sort�
step_counts       ����VC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\algorithms\merge_sort.pyr   z)merge_sort_generator.<locals>._merge_sort   s�   �� �� ��%�<��%�<�A�%�C����4�T�F�$�u�g�EU�V�"�U�3�RV�Wb�Rc�d�	� � �!�O�J�"�;��c�:�:�:�"�;��a���?�?�?��k�4��e�<�<�<� � ;��?��<�s6   �AA>�	A8�
A>�A:�A>�1A<�2A>�:A>�<A>r   c              3   �t  �K  � |}|dz   }|}t        �dd|� d|� �|||t        | �      d���      �� �dz  �||k  r�||k  r�t        �dd|� d	| |   � d
|� d	| |   � d�	||| |   | |   t        | �      d���      �� �dz  �| |   | |   k  rB| |   �	|<   t        �dd|� d|� d| |   � d�|| |   |t        | �      d���      �� �dz  �|dz  }nA| |   �	|<   t        �dd|� d|� d| |   � d�|| |   |t        | �      d���      �� �dz  �|dz  }|dz  }||k  r||k  r��||k  rL| |   �	|<   t        �dd|� d| |   � d|� d�|| |   |t        | �      d���      �� �dz  �|dz  }|dz  }||k  r�L||k  rL| |   �	|<   t        �dd|� d| |   � d|� d�|| |   |t        | �      d���      �� �dz  �|dz  }|dz  }||k  r�Lt        ||dz   �      D ]=  }�	|   | |<   t        �dd|� d�	|   � d|� d�|�	|   t        | �      d���      �� �dz  ��? t        �dd|� d|� �||t        | �      d���      �� �dz  �y �w)Nr   �merge_startz"Starting merge for sub-array from r   )r   r   r   r   r   �comparezComparing elements at index z (z) and �))�i�j�value_i�value_jr   �	overwritezOverwriting temp_arr[z] with current_arr[z] ()�index�value�source_indexr   z&Copying remaining element current_arr[z) to temp_arr[�]�	copy_backzCopying temp_arr[z) back to current_arr[)r)   r*   r   �	merge_endz Finished merging sub-array from )r   r   r   )r   r   �range)
r   r   r   r   r$   r%   �k�xr   �temp_arrs
           ��r   r   z$merge_sort_generator.<locals>._merge+   s�  �� �� ����!�G�������8���d�5�'�J��s�U�d�S^�N_�`�	
� 	
� 	�a��
��3�h�1��:����6�q�c��K��N�;K�6�RS�QT�TV�Wb�cd�We�Vf�fg�h��1��Q��K�XY�N�nr�s~�n�  A�	� � �!�O�J��1�~��Q��/�)�!�n�����#�$�3�A�3�6I�!��C�P[�\]�P^�O_�_`�a�#$�{�1�~�q�dh�it�du�v�	� � �a��
��Q���)�!�n�����#�$�3�A�3�6I�!��C�P[�\]�P^�O_�_`�a�#$�{�1�~�q�dh�it�du�v�	� � �a��
��Q�����F�A�; �3�h�1��:�> �3�h�%�a�.�H�Q�K��� �@���3�{�ST�~�FV�Vd�ef�dg�gh�i� �;�q�>�1�`d�ep�`q�r�	� � �!�O�J���F�A���F�A� �3�h� �5�j�%�a�.�H�Q�K��� �@���3�{�ST�~�FV�Vd�ef�dg�gh�i� �;�q�>�1�`d�ep�`q�r�	� � �!�O�J���F�A���F�A� �5�j� �t�U�Q�Y�'�A�%�a�[�K��N��� �+�A�3�c�(�1�+��>T�UV�TW�WX�Y� �8�A�;�$�{�J[�\�	� � �!�O�J� (� ���6�t�f�D���H���$�{�BS�T�	
� 	
� 	�a��
�s   �DH8�AH8�.AH8�?A9H8�donezMerge Sort completed�sorted_array)�lenr   r   r   �intr   )r   �nr   r   r   r2   s     @@@@r   �merge_sort_generatorr8      s�   �� �� � 	�C��A��C�y�H��J�
���%���S�	�*�	� � �!�O�J�=�� =�c� =�#� =�$� =�$U�E� U�� U�3� U�s� U�y�QV�X\�^b�Qb�Gc� U�p �3��1�q�5�)�)�)�
���&��d�3�i�(�	� � *�s   �BB?�B=�"B?�__main__)�&   �   �+   �   �	   �R   �
   zOriginal array: z
--- Events ---z
--- Final Array ---c              #   �@   K  � | ]  }|j                   d k(  s�|�� � y�w)r3   N)r   )�.0�es     r   �	<genexpr>rD   �   s   � �� �M�(8�1�A�F�F�f�<L�Q�(8�s   ��r4   z,Assertion passed: Array is sorted correctly.)�typingr   r   r   �app.utils.typesr   r   r8   �__name__�
test_array�printr   �events�event�to_json_serializable�next�reversed�final_array_eventr   �sorted� �    r   �<module>rS      s�   �� '� '� (�F�e� F�	�%��t�2C�(D� F�R �z��+�J�	��Z�L�
)�*��&�z�2�3�F�	�
�����e�(�(�*�+� � 
�
!�"��M���(8�M�M��	�
�
 �
 ��
0�1��!�!�.�1�V�<V�5W�W�W�W�	�
8�9� rR   

================================================================================
ملف: app\algorithms\__pycache__\quick_sort.cpython-311.pyc
================================================================================
�
    ��hZ  �                   �  � d dl mZmZmZ d dlmZmZ dedeeddf         fd�Zedk    �r*g d�Z	 e
d	e	� ��  �          e ee	�  �        �  �        Z e
d
�  �         eD ]Z e
e�                    �   �         �  �         �  e
d�  �          ed�  ee�  �        D �   �         �  �        Z e
ej        d         �  �         ej        d          eg d��  �        k    sJ � e
d�  �         g d�Z e
de� ��  �          e ee�  �        �  �        Z ed�  ee�  �        D �   �         �  �        Zej        d          eg d��  �        k    sJ � e
d�  �         dS dS )�    )�List�	Generator�Any)�Event�Array�arr�returnNc           	   #   ��  ����K  � t          | �  �        }t          | �  �        �d�t          �dddt          ��  �        i��  �        V � �dz  �dt          dt          d	t          f��fd
�}dt          dt          d	df����fd��dt          dt          d	t          t          dt          f         f��fd�� �d|dz
  �  �        E d{V �� t          �dddt          ��  �        i��  �        V � dS )z�Generates events for visualizing the Quick Sort algorithm.

    Args:
        arr (Array): The list of numbers to be sorted.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   �snapshotzInitial array state�array_snapshot��step�type�details�data�   �low�highr	   c              3   ��  �K  � �|         }|}t          �dd|� d|� �||t          ��  �        d���  �        V � �dz  �| dz
  }t          | |�  �        D ]�}t          �dd|� d	�|         � d
|� �||�|         |t          ��  �        d���  �        V � �dz  ��|         |k    r`|dz  }�|         �|         c�|<   �|<   t          �dd|� d	�|         � d|� d	�|         � d�	||t          ��  �        d���  �        V � �dz  ����|         �|dz            c�|dz   <   �|<   t          �dd|� d|dz   � d	�|         � d�|dz   |t          ��  �        d���  �        V � �dz  �|dz   S )N�	set_pivot�Setting pivot to �
 at index ��index�valuer   r   r   �compare�Comparing arr[�] (�) with pivot ��i�j�value_i�value_jr   �swap�Swapping arr[�
) and arr[�)�r!   r"   r   zSwapping pivot z
 with arr[�r   �list�range)r   r   �pivot�pivot_indexr!   r"   �current_arr�
step_counts         ���?/home/ubuntu/AlgoVisEdu/AlgoVisEdu/app/algorithms/quick_sort.py�
_partitionz(quick_sort_generator.<locals>._partition   sd  �� � � ��D�!�������F��F�F��F�F�&��$�{�J[�J[�\�\�	
� 
� 
� 	
� 	
� 	
� 	�a��
��!�G���s�D�!�!� 	 � 	 �A����S��S�S�{�1�~�S�S�E�S�S��;�;�q�>�V[�os�t�  pA�  pA�  B�  B�	� � � � � � �!�O�J��1�~��&� 	 ��Q���1<�Q���Q��.��A���A���#��c�A�c�c�+�a�.�c�c�A�c�c�R]�^_�R`�c�c�c� �q�D��<M�<M�N�N�	� � � � � � �a��
��0;�D�0A�;�q�ST�u�CU�-��A��E��K��-����U�e�U�U�q�1�u�U�U��T�AR�U�U�U��1�u�4�4��;L�;L�M�M�	
� 
� 
� 	
� 	
� 	
� 	�a��
��1�u��    Nc           
   3   ��   �K  � | |k     rot          �dd| � d|� �| |t          ��  �        d���  �        V � �dz  � �| |�  �        E d {V ��} �| |dz
  �  �        E d {V ��  �|dz   |�  �        E d {V �� d S d S )N�dividez"QuickSort on sub-array from index z to )r   r   r   r   r   )r   r+   )r   r   �pi�_partition_generator�_quick_sortr/   r0   s      ����r1   r8   z)quick_sort_generator.<locals>._quick_sortF   s�   �� � � ���:� 	1����L�S�L�L�d�L�L� �$�$�{�BS�BS�T�T�	� � � � � � �!�O�J�0�0��d�;�;�;�;�;�;�;�;�B�"�{�3��Q��/�/�/�/�/�/�/�/�/�"�{�2��6�4�0�0�0�0�0�0�0�0�0�0�0�	1� 	1r3   c              3   ��  �K  � �|         }|}t          �dd|� d|� �||t          ��  �        d���  �        V � �dz  �| dz
  }t          | |�  �        D ]�}t          �dd|� d	�|         � d
|� �||�|         |t          ��  �        d���  �        V � �dz  ��|         |k    rf|dz  }||k    r[�|         �|         c�|<   �|<   t          �dd|� d	�|         � d|� d	�|         � d�	||t          ��  �        d���  �        V � �dz  ����|         �|dz            c�|dz   <   �|<   |dz   |k    r8t          �dd|� d|dz   � d�|dz   |t          ��  �        d���  �        V � �dz  �|dz   S )Nr   r   r   r   r   r   r   r   r   r   r    r%   r&   r'   r(   r)   zPlacing pivot z at its correct position arr[�]r*   )r   r   �	pivot_val�	pivot_idxr!   r"   r/   r0   s         ��r1   r7   z2quick_sort_generator.<locals>._partition_generatorW   s}  �� � � ���%�	��	����H�	�H�H�Y�H�H�$�y�D�Q\�L]�L]�^�^�	
� 
� 
� 	
� 	
� 	
� 	�a��
��!�G���s�D�!�!� 	$� 	$�A����W��W�W�{�1�~�W�W�I�W�W��9��Q��T]�qu�  wB�  rC�  rC�  D�  D�	� � � � � � �!�O�J��1�~��*� 
$��Q�����6� $�5@��^�[�QR�^�2�K��N�K��N��'�#� g�� g� g�k�!�n� g� g�PQ� g� g�Va�bc�Vd� g� g� g�#$�1��[�@Q�@Q�R�R�	� � � � � � �!�O�J��0;�D�0A�;�q�ST�u�CU�-��A��E��K��-��q�5�D�=� 	����Y��Y�Y�QR�UV�QV�Y�Y�Y��q�5�t�t�K�?P�?P�Q�Q�	� � � � � � �!�O�J��1�u�r3   �donezQuick Sort completed�sorted_array)�lenr+   r   �intr   )r   �nr2   r7   r8   r/   r0   s      @@@@r1   �quick_sort_generatorrB      s�  ����� � � � 	�C���A��s�)�)�K��J�
���%���[� 1� 1�2�	� � � � � � �!�O�J�+�� +�3� +�3� +� +� +� +� +� +� +�Z1�� 1�C� 1�D� 1� 1� 1� 1� 1� 1� 1� 1� 1�"-�#� -�S� -�Y�u�d�C�?O�5P� -� -� -� -� -� -� -�^ �{�1�a�!�e�$�$�$�$�$�$�$�$�$�
���&��d�;�/�/�0�	� � � � � � � r3   �__main__)�
   �   �   �	   r   �   zOriginal array: z
--- Events ---z
--- Final Array ---c              #   �0   K  � | ]}|j         d k    �|V � �dS �r=   N�r   ��.0�es     r1   �	<genexpr>rO   �   s.   � � � �M�M�1�A�F�f�<L�M�Q�M�M�M�M�M�Mr3   r>   z,Assertion passed: Array is sorted correctly.)�   r   �   r   rH   rG   �   �   z
Original array 2: c              #   �0   K  � | ]}|j         d k    �|V � �dS rJ   rK   rL   s     r1   rO   rO   �   s.   � � � �Q�Q�Q���&�@P�Q�q�Q�Q�Q�Q�Q�Qr3   z.Assertion 2 passed: Array is sorted correctly.)�typingr   r   r   �app.utils.typesr   r   rB   �__name__�
test_array�printr+   �events�event�to_json_serializable�next�reversed�final_array_eventr   �sorted�test_array_2�events_2�final_array_event_2� r3   r1   �<module>re      s>  �� '� '� '� '� '� '� '� '� '� '� (� (� (� (� (� (� (� (�I�e� I�	�%��t�2C�(D� I� I� I� I�X �z�� <�$�$�$�J�	�E�
)�Z�
)�
)�*�*�*��T�&�&�z�2�2�3�3�F�	�E�
����� ,� ,����e�(�(�*�*�+�+�+�+�	�E�
!�"�"�"���M�M����(8�(8�M�M�M�M�M��	�E�
�
 ��
0�1�1�1��!�.�1�V�V�<O�<O�<O�5P�5P�P�P�P�P�	�E�
8�9�9�9�+�+�+�L�	�E�
/��
/�
/�0�0�0��t�(�(��6�6�7�7�H��$�Q�Q�(�(�8�*<�*<�Q�Q�Q�Q�Q���#�N�3�v�v�>V�>V�>V�7W�7W�W�W�W�W�	�E�
:�;�;�;�;�;�)<� <r3   

================================================================================
ملف: app\algorithms\__pycache__\quick_sort.cpython-312.pyc
================================================================================
�
    d|�h  �                   �,  � d dl mZmZmZ d dlmZmZ dedeeddf   fd�Zedk(  r�g d�Z	 e
d	e	� ��        e ee	�      �      Z e
d
�       eD ]  Z e
ej                  �       �       �  e
d�        ed�  ee�      D �       �      Z e
ej$                  d   �       ej$                  d    eg d��      k(  sJ � e
d�       g d�Z e
de� ��        e ee�      �      Z ed�  ee�      D �       �      Zej$                  d    eg d��      k(  sJ � e
d�       yy)�    )�List�	Generator�Any)�Event�Array�arr�returnNc           	   #   �  ����K  � t        | �      }t        | �      �d�t        �dddt        ��      i��      �� �dz  �dt        dt        d	t        f��fd
�}dt        dt        d	df����fd��dt        dt        d	t        t        dt        f   f��fd�� �d|dz
  �      E d{  ���  t        �dddt        ��      i��      �� y7 �!�w)z�Generates events for visualizing the Quick Sort algorithm.

    Args:
        arr (Array): The list of numbers to be sorted.

    Yields:
        Event: An event object representing a step in the algorithm.
    r   �snapshotzInitial array state�array_snapshot��step�type�details�data�   �low�highr	   c              3   �N  �K  � �|   }|}t        �dd|� d|� �||t        ��      d���      �� �dz  �| dz
  }t        | |�      D ]�  }t        �dd|� d	�|   � d
|� �||�|   |t        ��      d���      �� �dz  ��|   |k  s�@|dz  }�|   �|   c�|<   �|<   t        �dd|� d	�|   � d|� d	�|   � d�	||t        ��      d���      �� �dz  ��� �|   �|dz      c�|dz   <   �|<   t        �dd|� d|dz   � d	�|   � d�|dz   |t        ��      d���      �� �dz  �|dz   S �w)N�	set_pivot�Setting pivot to �
 at index ��index�valuer   r   r   �compare�Comparing arr[�] (�) with pivot ��i�j�value_i�value_jr   �swap�Swapping arr[�
) and arr[�)�r!   r"   r   zSwapping pivot z
 with arr[�r   �list�range)r   r   �pivot�pivot_indexr!   r"   �current_arr�
step_counts         ���VC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\algorithms\quick_sort.py�
_partitionz(quick_sort_generator.<locals>._partition   s�  �� �� ��D�!�������'��w�j���F�&��$�{�J[�\�	
� 	
� 	�a��
��!�G���s�D�!�A����(���3�{�1�~�.>�m�E�7�S��;�;�q�>�V[�os�t�  pA�  B�	� � �!�O�J��1�~��&��Q���1<�Q���Q��.��A���A���#��+�A�3�c�+�a�.�1A��A�3�c�R]�^_�R`�Qa�ab�c� �q�D��<M�N�	� � �a��
�% "�( 1<�D�0A�;�q�ST�u�CU�-��A��E��K��-����%�e�W�J�q�1�u�g�S��T�AR�@S�ST�U��1�u�4�4��;L�M�	
� 	
� 	�a��
��1�u��s   �BD%�B D%Nc           
   3   ��   �K  � | |k  rct        �dd| � d|� �| |t        ��      d���      �� �dz  � �| |�      E d {  ��� } �| |dz
  �      E d {  ���   �|dz   |�      E d {  ���  y y 7 �.7 �7 �
�w)N�dividez"QuickSort on sub-array from index z to )r   r   r   r   r   )r   r+   )r   r   �pi�_partition_generator�_quick_sortr/   r0   s      ����r1   r7   z)quick_sort_generator.<locals>._quick_sortF   s�   �� �� ���:����<�S�E��d�V�L� �$�$�{�BS�T�	� � �!�O�J�0��d�;�;�B�"�3��Q��/�/�/�"�2��6�4�0�0�0� � <��/��0�s3   �;A3�A-�A3�A/�A3�&A1�'A3�/A3�1A3c              3   �N  �K  � �|   }|}t        �dd|� d|� �||t        ��      d���      �� �dz  �| dz
  }t        | |�      D ]�  }t        �dd|� d	�|   � d
|� �||�|   |t        ��      d���      �� �dz  ��|   |k  s�@|dz  }||k7  s�K�|   �|   c�|<   �|<   t        �dd|� d	�|   � d|� d	�|   � d�	||t        ��      d���      �� �dz  ��� �|   �|dz      c�|dz   <   �|<   t        �dd|� d|dz   � d�|dz   |t        ��      d���      �� �dz  �|dz   S �w)Nr   r   r   r   r   r   r   r   r   r   r    r%   r&   r'   r(   r)   zPlacing pivot z at its correct position arr[�]r*   )r   r   �	pivot_val�	pivot_idxr!   r"   r/   r0   s         ��r1   r6   z2quick_sort_generator.<locals>._partition_generatorW   s�  �� �� ���%�	��	����'�	�{�*�Y�K�H�$�y�D�Q\�L]�^�	
� 	
� 	�a��
��!�G���s�D�!�A����(���3�{�1�~�.>�m�I�;�W��9��Q��T]�qu�  wB�  rC�  D�	� � �!�O�J��1�~��*��Q�����6�5@��^�[�QR�^�2�K��N�K��N��'�#�"/��s�#�k�!�n�5E�Z�PQ�s�RU�Va�bc�Vd�Ue�ef� g�#$�1��[�@Q�R�	� � �!�O�J�' "�* 1<�D�0A�;�q�ST�u�CU�-��A��E��K��-����$�Y�K�/L�Q�QR�U�G�ST�U��1�u�4�4��;L�M�	
� 	
� 	�a��
��1�u��s   �BD%�
D%�BD%�donezQuick Sort completed�sorted_array)�lenr+   r   �intr   )r   �nr2   r6   r7   r/   r0   s      @@@@r1   �quick_sort_generatorrA      s�   �� �� � 	�C��A��s�)�K��J�
���%���[� 1�2�	� � �!�O�J�+�� +�3� +�3� +�Z1�� 1�C� 1�D� 1� 1�"+�#� +�S� +�Y�u�d�C�?O�5P� +�\ �1�a�!�e�$�$�$�
���&��d�;�/�0�	� � %�s   �B C
�&C�'"C
�__main__)�   r   �   r   �   �	   �   �   zOriginal array: z
--- Events ---z
--- Final Array ---c              #   �@   K  � | ]  }|j                   d k(  s�|�� � y�w�r<   N�r   ��.0�es     r1   �	<genexpr>rO   �   s   � �� �M�(8�1�A�F�F�f�<L�Q�(8��   ��r=   z,Assertion passed: Array is sorted correctly.z
Original array 2: c              #   �@   K  � | ]  }|j                   d k(  s�|�� � y�wrJ   rK   rL   s     r1   rO   rO   �   s   � �� �Q�*<�Q����&�@P�q�*<�rP   z.Assertion 2 passed: Array is sorted correctly.)�typingr   r   r   �app.utils.typesr   r   rA   �__name__�
test_array�printr+   �events�event�to_json_serializable�next�reversed�final_array_eventr   �sorted�test_array_2�events_2�final_array_event_2� �    r1   �<module>rc      sI  �� '� '� (�H�e� H�	�%��t�2C�(D� H�V �z��"�J�	��Z�L�
)�*��&�z�2�3�F�	�
�����e�(�(�*�+� � 
�
!�"��M���(8�M�M��	�
�
 �
 ��
0�1��!�!�.�1�V�<M�5N�N�N�N�	�
8�9�+�L�	� ���
/�0��(��6�7�H��Q�(�8�*<�Q�Q���#�#�N�3�v�>V�7W�W�W�W�	�
:�;�) rb   

================================================================================
ملف: app\algorithms\__pycache__\__init__.cpython-311.pyc
================================================================================
�
    ��h    �                   �   � d S )N� r   �    �=/home/ubuntu/AlgoVisEdu/AlgoVisEdu/app/algorithms/__init__.py�<module>r      s   �� � r   

================================================================================
ملف: app\algorithms\__pycache__\__init__.cpython-312.pyc
================================================================================
�
    �>�h    �                    �   � y )N� r   �    �TC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\algorithms\__init__.py�<module>r      s   �r   

================================================================================
ملف: app\ui\components.py
================================================================================

import streamlit as st
from typing import Callable, List, Any, Dict

def playback_controls(on_play: Callable, on_pause: Callable, on_step_forward: Callable, on_step_back: Callable, on_seek: Callable, current_step_index: int, total_steps: int, is_playing: bool, speed: float):
    """Renders playback controls for the visualization.

    Args:
        on_play (Callable): Callback function for play button.
        on_pause (Callable): Callback function for pause button.
        on_step_forward (Callable): Callback function for step forward button.
        on_step_back (Callable): Callback function for step back button.
        on_seek (Callable): Callback function for seeking to a specific step.
        current_step_index (int): The current 0-based index of the event.
        total_steps (int): Total number of events in the trace.
        is_playing (bool): Current playback state.
        speed (float): Current playback speed.
    """
    col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 2])

    with col1:
        if st.button("⏮️ Back"): on_step_back()
    with col2:
        if is_playing:
            if st.button("⏸️ Pause"): on_pause()
        else:
            if st.button("▶️ Play"): on_play()
    with col3:
        if st.button("⏭️ Forward"): on_step_forward()
    with col4:
        st.selectbox(
            "Speed",
            options=[0.5, 1.0, 2.0, 4.0],
            index=1, # Default to 1.0x
            format_func=lambda x: f"{x}x",
            key="playback_speed_selector",
            on_change=lambda: st.session_state.update(playback_speed=st.session_state.playback_speed_selector)
        )
        st.session_state.playback_speed = st.session_state.playback_speed_selector

    with col5:
        # Slider for seeking through steps
        new_step_index = st.slider(
            "Step",
            min_value=0,
            max_value=total_steps - 1 if total_steps > 0 else 0,
            value=current_step_index,
            step=1,
            key="step_slider",
            on_change=lambda: on_seek(st.session_state.step_slider)
        )

def data_input_form(algorithm_type: str) -> Dict[str, Any]:
    """Renders input forms for algorithm data based on type.

    Args:
        algorithm_type (str): Type of algorithm (e.g., "array", "graph").

    Returns:
        Dict[str, Any]: Dictionary containing user input data.
    """
    data = {}
    st.subheader("Input Data")

    if algorithm_type == "array":
        input_method = st.radio("Choose input method:", ("Manual Input", "Generate Random"), key="array_input_method")

        if input_method == "Manual Input":
            array_str = st.text_input("Enter array elements (comma-separated integers):", "3,1,4,1,5,9,2,6", key="manual_array_input")
            try:
                data["array"] = [int(x.strip()) for x in array_str.split(",") if x.strip()]
            except ValueError:
                st.error("Invalid array input. Please enter comma-separated integers.")
                data["array"] = []
            
            target_value = st.text_input("Enter Target Value for Linear Search:", key="linear_search_target")
            if target_value:
                try:
                    data["target"] = int(target_value)
                except ValueError:
                    st.error("Invalid target value. Please enter an integer.")
            else:
                data["target"] = None
        else: # Generate Random
            col1, col2 = st.columns(2)
            with col1:
                size = st.number_input("Array Size:", min_value=1, max_value=100, value=10, step=1, key="random_array_size")
            with col2:
                min_val = st.number_input("Min Value:", value=0, key="random_array_min_val")
                max_val = st.number_input("Max Value:", value=100, key="random_array_max_val")
            if st.button("Generate Random Array"): # This button will trigger a re-run and new random array
                import random
                st.session_state.generated_array = [random.randint(min_val, max_val) for _ in range(size)]
            if "generated_array" in st.session_state:
                data["array"] = st.session_state.generated_array
                st.write(f"Generated Array: {data['array']}")
            else:
                # Initial generation if not already present
                import random
                st.session_state.generated_array = [random.randint(min_val, max_val) for _ in range(size)]
                data["array"] = st.session_state.generated_array
                st.write(f"Generated Array: {data['array']}")

    elif algorithm_type == "graph":
        st.warning("Graph input methods are not fully implemented yet. Please use sample data or manual input for now.")
        graph_input_method = st.radio("Choose input method:", ("Manual Adjacency List", "Upload Edge List (CSV/JSON)", "Generate Random"), key="graph_input_method")

        if graph_input_method == "Manual Adjacency List":
            
            start_node_input = st.text_input("Enter Start Node (e.g., A):", key="dijkstra_start_node_manual")
            if start_node_input:
                data["start_node"] = start_node_input.strip()
            else:
                st.error("Start node cannot be empty for Dijkstra's algorithm.")
                data["start_node"] = None

            
            st.info("Enter graph as an adjacency list. Format: `Node: (Neighbor, Weight), (Neighbor, Weight)` per line.")
            graph_str = st.text_area(
                "Example: A: (B,1), (C,4)\nB: (A,1), (C,2)",
                height=150,
                key="manual_graph_input"
            )

            parsed_graph = {}
            if graph_str.strip():
                for line in graph_str.split("\n"):
                    line = line.strip()
                    if not line:
                        continue
                    try:
                        node, edges_str = line.split(":", 1)
                        node = node.strip()
                        edges = []
                        for edge_part in edges_str.split("),("):
                            edge_part = edge_part.replace("(", "").replace(")", "").strip()
                            if not edge_part:
                                continue
                            neighbor, weight = edge_part.split(",")
                            edges.append((neighbor.strip(), int(weight.strip())))
                        parsed_graph[node] = edges
                    except Exception:
                        st.error(f"Error parsing line: {line}. Please check format.")
                        parsed_graph = {}
                        break
            data["graph"] = parsed_graph


        elif graph_input_method == "Upload Edge List (CSV/JSON)":
            uploaded_file = st.file_uploader("Upload edge list file (CSV or JSON)", type=["csv", "json"])
            if uploaded_file is not None:
                st.info("File upload parsing not fully implemented.")
                # Placeholder for actual file parsing logic
                data["graph"] = {}

        else: # Generate Random
            col1, col2 = st.columns(2)
            with col1:
                num_nodes = st.number_input("Number of Nodes:", min_value=2, max_value=20, value=5, step=1, key="random_graph_nodes")
            with col2:
                density = st.slider("Edge Density:", min_value=0.1, max_value=1.0, value=0.5, step=0.1, key="random_graph_density")
            weight_range = st.slider("Weight Range:", min_value=1, max_value=100, value=(1, 10), key="random_graph_weight_range")
            if st.button("Generate Random Graph"): # This button will trigger a re-run and new random graph
                import random
                nodes = [chr(65 + i) for i in range(num_nodes)] # A, B, C...
                generated_graph = {node: [] for node in nodes}
                for i in range(num_nodes):
                    for j in range(i + 1, num_nodes):
                        if random.random() < density:
                            weight = random.randint(weight_range[0], weight_range[1])
                            generated_graph[nodes[i]].append((nodes[j], weight))
                            generated_graph[nodes[j]].append((nodes[i], weight)) # Undirected
                st.session_state.generated_graph = generated_graph
            if "generated_graph" in st.session_state:
                data["graph"] = st.session_state.generated_graph
                st.write(f"Generated Graph: {data['graph']}")
            else:
                # Initial generation if not already present
                import random
                nodes = [chr(65 + i) for i in range(num_nodes)]
                generated_graph = {node: [] for node in nodes}
                for i in range(num_nodes):
                    for j in range(i + 1, num_nodes):
                        if random.random() < density:
                            weight = random.randint(weight_range[0], weight_range[1])
                            generated_graph[nodes[i]].append((nodes[j], weight))
                            generated_graph[nodes[j]].append((nodes[i], weight)) # Undirected
                st.session_state.generated_graph = generated_graph
                data["graph"] = st.session_state.generated_graph
                st.write(f"Generated Graph: {data['graph']}")
                # ✅ إضافة خانة Start Node لإجبار المستخدم يحددها
            start_node_input = st.text_input("Enter Start Node (e.g., A):", key="dijkstra_start_node_random")
            if start_node_input:
                data["start_node"] = start_node_input
            else:
                st.error("Start node cannot be empty for Dijkstra's algorithm.")
                data["start_node"] = None


    return data

def trace_io_buttons(on_load: Callable, on_save: Callable):
    """Renders buttons for loading and saving algorithm traces.

    Args:
        on_load (Callable): Callback function for loading a trace.
        on_save (Callable): Callback function for saving the current trace.
    """
    st.subheader("Trace Management")
    col1, col2 = st.columns(2)
    with col1:
        uploaded_file = st.file_uploader("Load Trace (JSON)", type=["json"], key="trace_uploader")
        if uploaded_file is not None:
            on_load(uploaded_file.getvalue().decode("utf-8"))
    with col2:
        if st.button("Save Current Trace", key="save_trace_button"):
            on_save()


def algorithm_analysis_panel(algorithm_name: str):
    """Displays a panel with time/space complexity and pedagogical notes.

    Args:
        algorithm_name (str): The name of the algorithm.
    """
    st.subheader(f"Analysis: {algorithm_name}")
    analysis_data = {
        "Merge Sort": {
            "Time Complexity": "O(n log n) in all cases (best, average, worst)",
            "Space Complexity": "O(n) due to temporary array",
            "Notes": "Merge Sort is a stable sorting algorithm. It is often preferred for sorting linked lists due to its efficient handling of sequential access. It's a divide-and-conquer algorithm."
        },
        "Quick Sort": {
            "Time Complexity": "O(n log n) average, O(n^2) worst-case",
            "Space Complexity": "O(log n) average (for recursion stack), O(n) worst-case",
            "Notes": "Quick Sort is an in-place, unstable sorting algorithm. It is generally faster in practice than other O(n log n) algorithms because of better cache performance and fewer swaps. It's also a divide-and-conquer algorithm."
        },
        "Linear Search": {
            "Time Complexity": "O(n) average and worst-case, O(1) best-case",
            "Space Complexity": "O(1)",
            "Notes": "Linear search is the simplest searching algorithm. It checks each element in the list sequentially until a match is found or the whole list has been searched."
        },
        "Kruskal (MST)": {
            "Time Complexity": "O(E log E) or O(E log V) where E is edges, V is vertices",
            "Space Complexity": "O(V + E)",
            "Notes": "Kruskal's algorithm finds a Minimum Spanning Tree (MST) for a connected, undirected graph. It's a greedy algorithm that adds the smallest weight edge that does not form a cycle."
        },
        "Dijkstra (SSSP)": {
            "Time Complexity": "O(E + V log V) with a Fibonacci heap, O(E log V) with a binary heap",
            "Space Complexity": "O(V + E)",
            "Notes": "Dijkstra's algorithm finds the shortest paths from a single source node to all other nodes in a graph with non-negative edge weights. It's a greedy algorithm."
        }
    }

    algo_info = analysis_data.get(algorithm_name, {"Time Complexity": "N/A", "Space Complexity": "N/A", "Notes": "No specific analysis available."})

    st.markdown(f"**Time Complexity:** {algo_info['Time Complexity']}")
    st.markdown(f"**Space Complexity:** {algo_info['Space Complexity']}")
    st.markdown(f"**Notes:** {algo_info['Notes']}")

================================================================================
ملف: app\ui\streamlit_app.py
================================================================================
import streamlit as st
import time
import json
from typing import List, Dict, Any, Optional

import matplotlib.pyplot as plt
from app.visualization.engine import VisualizationEngine
from app.visualization.renderers import render_array_bars, render_graph
from app.algorithms.merge_sort import merge_sort_generator
# Import other algorithm generators here as they are implemented
from app.algorithms.linear_search import linear_search_generator
from app.algorithms.quick_sort import quick_sort_generator
from app.algorithms.kruskal import kruskal_generator
from app.algorithms.dijkstra import dijkstra_generator

from app.ui.components import playback_controls, data_input_form, trace_io_buttons, algorithm_analysis_panel
from app.utils.types import Event

st.set_page_config(layout="wide", page_title="AlgoVisEdu")

# --- Session State Initialization ---
if "algorithm_name" not in st.session_state: st.session_state.algorithm_name = "Merge Sort"
if "trace" not in st.session_state: st.session_state.trace = []
if "engine" not in st.session_state: st.session_state.engine = None
if "current_step_index" not in st.session_state: st.session_state.current_step_index = 0
if "is_playing" not in st.session_state: st.session_state.is_playing = False
if "playback_speed" not in st.session_state: st.session_state.playback_speed = 1.0
if "generated_array" not in st.session_state: st.session_state.generated_array = None
if "generated_graph" not in st.session_state: st.session_state.generated_graph = None

# --- Algorithm Mapping ---
algorithms = {
    "Merge Sort": {"generator": merge_sort_generator, "type": "array"},
    "Quick Sort": {"generator": quick_sort_generator, "type": "array"},
    "Linear Search": {"generator": linear_search_generator, "type": "array"},
    "Kruskal (MST)": {"generator": kruskal_generator, "type": "graph"},
    "Dijkstra (SSSP)": {"generator": dijkstra_generator, "type": "graph"},
}

# --- Callbacks ---
def generate_trace(algo_name: str, input_data: Dict[str, Any]):
    """Generates a new trace for the selected algorithm and input data."""
    st.session_state.is_playing = False
    generator_func = algorithms[algo_name]["generator"]
    try:
        if algorithms[algo_name]["type"] == "array":
            if not input_data.get("array"): raise ValueError("Array input cannot be empty.")
            if algo_name == "Linear Search":
                target = input_data.get("target")
                if target is None: raise ValueError("Target value is required for Linear Search.")
                trace_events = list(generator_func(list(input_data["array"]), target))
            else:
                trace_events = list(generator_func(list(input_data["array"])))
        elif algorithms[algo_name]["type"] == "graph":
            if not input_data.get("graph"): raise ValueError("Graph input cannot be empty.")
            if algo_name == "Dijkstra (SSSP)":
                start_node = input_data.get("start_node")
                if not start_node: raise ValueError("Start node is required for Dijkstra's algorithm.")
                trace_events = list(generator_func(input_data["graph"], start_node))
            else:
                trace_events = list(generator_func(input_data["graph"]))
        else:
            trace_events = []

        st.session_state.trace = trace_events
        st.session_state.engine = VisualizationEngine(trace_events)
        st.session_state.current_step_index = 0
        st.success(f"Trace generated for {algo_name}!")
    except Exception as e:
        st.error(f"Error generating trace: {e}")
        st.session_state.trace = []
        st.session_state.engine = None
        st.session_state.current_step_index = 0

def load_trace_from_json(json_string: str):
    """Loads a trace from a JSON string."""
    st.session_state.is_playing = False
    try:
        events_data = json.loads(json_string)
        events = [Event(step=d["step"], type=d["type"], details=d["details"], data={k: v for k, v in d.items() if k not in ["step", "type", "details"]}) for d in events_data]
        st.session_state.trace = events
        st.session_state.engine = VisualizationEngine(events)
        st.session_state.current_step_index = 0
        st.success("Trace loaded successfully!")
    except json.JSONDecodeError:
        st.error("Invalid JSON file. Please upload a valid trace JSON.")
    except Exception as e:
        st.error(f"Error loading trace: {e}")

def save_current_trace():
    """Saves the current trace to a JSON file."""
    if st.session_state.engine:
        trace_json = st.session_state.engine.get_trace_json()
        st.download_button(
            label="Download Trace JSON",
            data=trace_json,
            file_name=f"{st.session_state.algorithm_name.replace(" ", "_").lower()}_trace.json",
            mime="application/json",
            key="download_trace_button"
        )
    else:
        st.warning("No trace to save. Generate or load a trace first.")

def step_forward():
    if st.session_state.engine and st.session_state.current_step_index < st.session_state.engine.step_count - 1:
        st.session_state.current_step_index += 1

def step_back():
    if st.session_state.engine and st.session_state.current_step_index > 0:
        st.session_state.current_step_index -= 1

def seek_to_step(step_index: int):
    if st.session_state.engine and 0 <= step_index < st.session_state.engine.step_count:
        st.session_state.current_step_index = step_index

# --- UI Layout ---
st.title("AlgoVisEdu: Algorithm Visualizer & Educator")

# Sidebar for algorithm selection and input
with st.sidebar:
    st.header("Configuration")
    selected_algo = st.selectbox(
        "Select Algorithm",
        list(algorithms.keys()),
        key="algo_selector",
        on_change=lambda: st.session_state.update(algorithm_name=st.session_state.algo_selector, trace=[], engine=None, current_step_index=0, is_playing=False)
    )
    st.session_state.algorithm_name = selected_algo

    algo_type = algorithms[st.session_state.algorithm_name]["type"]
    input_data = data_input_form(algo_type)

    if st.button("Run Algorithm", type="primary"):
        generate_trace(st.session_state.algorithm_name, input_data)

    trace_io_buttons(load_trace_from_json, save_current_trace)

# Main content area
col_viz, col_details = st.columns([3, 1])

with col_viz:
    st.header("Visualization")
    if st.session_state.engine:
        st.session_state.engine.seek(st.session_state.current_step_index)
        snapshot = st.session_state.engine.get_snapshot()

        if algo_type == "array":
            fig = render_array_bars(snapshot, f"{st.session_state.algorithm_name} Visualization")
        elif algo_type == "graph":
            fig = render_graph(snapshot, f"{st.session_state.algorithm_name} Visualization")
        else:
            st.warning("Unsupported algorithm type for visualization.")
            fig = plt.figure()

        st.pyplot(fig)
        plt.close(fig) # Close the figure to prevent memory leaks

        # Playback controls
        playback_controls(
            on_play=lambda: st.session_state.update(is_playing=True),
            on_pause=lambda: st.session_state.update(is_playing=False),
            on_step_forward=step_forward,
            on_step_back=step_back,
            on_seek=seek_to_step,
            current_step_index=st.session_state.current_step_index,
            total_steps=st.session_state.engine.step_count,
            is_playing=st.session_state.is_playing,
            speed=st.session_state.playback_speed
        )

        # Auto-play logic
        if st.session_state.is_playing and st.session_state.current_step_index < st.session_state.engine.step_count - 1:
            time.sleep(1.0 / st.session_state.playback_speed)
            st.session_state.current_step_index += 1
            st.rerun()
        elif st.session_state.is_playing and st.session_state.current_step_index == st.session_state.engine.step_count - 1:
            st.session_state.is_playing = False # Stop playing at the end

    else:
        st.info("Select an algorithm and input data, then click 'Run Algorithm' to start visualization.")

with col_details:
    st.header("Event Details")
    if st.session_state.engine:
        current_event = st.session_state.engine.current_event
        st.markdown(f"**Step {current_event.step}:** {current_event.details}")
        if current_event.data:
            with st.expander("Raw Event Data"):
                st.json(current_event.to_json_serializable())
    else:
        st.info("Event details will appear here.")

    st.header("Algorithm Analysis")
    algorithm_analysis_panel(st.session_state.algorithm_name)


# Placeholder for matplotlib to avoid issues when not displaying a plot
import matplotlib.pyplot as plt
plt.close('all')

================================================================================
ملف: app\ui\__init__.py
================================================================================

================================================================================
ملف: app\ui\__pycache__\components.cpython-312.pyc
================================================================================
�
    ���h"3  �                   �   � d dl Zd dlmZmZmZmZ dedededededed	ed
ede	fd�Z
dedeeef   fd�Zdedefd�Zdefd�Zy)�    N)�Callable�List�Any�Dict�on_play�on_pause�on_step_forward�on_step_back�on_seek�current_step_index�total_steps�
is_playing�speedc	                 ��  �� t        j                  g d��      \  }	}
}}}|	5  t        j                  d�      r |�        ddd�       |
5  |rt        j                  d�      r$ |�        nt        j                  d�      r | �        ddd�       |5  t        j                  d�      r |�        ddd�       |5  t        j                  dg d�d	d
� dd� ��       t         j                  j
                  t         j                  _        ddd�       |5  t        j                  dd|dkD  r|d	z
  nd|d	d�fd���      }ddd�       y# 1 sw Y   ��xY w# 1 sw Y   ��xY w# 1 sw Y   ��xY w# 1 sw Y   �cxY w# 1 sw Y   yxY w)a�  Renders playback controls for the visualization.

    Args:
        on_play (Callable): Callback function for play button.
        on_pause (Callable): Callback function for pause button.
        on_step_forward (Callable): Callback function for step forward button.
        on_step_back (Callable): Callback function for step back button.
        on_seek (Callable): Callback function for seeking to a specific step.
        current_step_index (int): The current 0-based index of the event.
        total_steps (int): Total number of events in the trace.
        is_playing (bool): Current playback state.
        speed (float): Current playback speed.
    )�   r   r   r   �   u   ⏮️ BackNu   ⏸️ Pauseu   ▶️ Playu   ⏭️ Forward�Speed)�      �?�      �?g       @g      @r   c                 �   � | � d�S )N�x� )r   s    �NC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\ui\components.py�<lambda>z#playback_controls.<locals>.<lambda>#   s
   � �Q�C�q�'�    �playback_speed_selectorc                  �r   � t         j                  j                  t         j                  j                  ��      S )N)�playback_speed)�st�session_state�updater   r   r   r   r   z#playback_controls.<locals>.<lambda>%   s$   � �b�.�.�5�5�R�EU�EU�Em�Em�5�nr   )�options�index�format_func�key�	on_change�Stepr   �step_sliderc                  �D   ��  � t         j                  j                  �      S )N)r   r    r(   )r   s   �r   r   z#playback_controls.<locals>.<lambda>2   s   �� �g�b�&6�&6�&B�&B�Cr   )�	min_value�	max_value�value�stepr%   r&   )r   �columns�button�	selectboxr    r   r   �slider)r   r   r	   r
   r   r   r   r   r   �col1�col2�col3�col4�col5�new_step_indexs       `          r   �playback_controlsr8      s  �� � $&�:�:�o�#>� �D�$��d�D�	��9�9�]�#�\�^� 
�	���y�y��(�(�*��y�y��'���	 
�
 
��9�9�%�&��(9� 
�	�
����(��)�)�n�	
� +-�*:�*:�*R�*R����'� 
� 
������)4�q��k�A�o�a�$���C�
�� 
��) 
���	���
 
���	��� 
��s<   �D?�<E�E�5AE$�*E0�?E	�E�E!�$E-�0E9�algorithm_type�returnc           	      �>  � i }t        j                  d�       | dk(  �rEt        j                  ddd��      }|dk(  r�t        j                  dd	d
��      }	 |j	                  d�      D �cg c],  }|j                  �       s�t        |j                  �       �      ��. c}|d<   t        j                  dd��      }|r	 t        |�      |d<   |S d|d<   |S t        j                  d�      \  }}|5  t        j                  dddddd��      }ddd�       |5  t        j                  ddd��      }	t        j                  ddd��      }
ddd�       t        j                  d�      r@ddl}t        �      D �cg c]  }|j                  	
�      �� c}t         j                  _        d t         j                  v r:t         j                  j                   |d<   t        j"                  d!|d   � ��       |S ddl}t        �      D �cg c]  }|j                  	
�      �� c}t         j                  _        t         j                  j                   |d<   t        j"                  d!|d   � ��       |S | d"k(  �r�t        j$                  d#�       t        j                  dd$d%��      }|d&k(  �rxt        j                  d'd(��      }|r|j                  �       |d)<   nt        j                  d*�       d|d)<   t        j&                  d+�       t        j(                  d,d-d.�/�      }i }|j                  �       r�|j	                  d0�      D ]�  }|j                  �       }|s�	 |j	                  d1d�      \  }}|j                  �       }g }|j	                  d2�      D ]�  }|j+                  d3d4�      j+                  d5d4�      j                  �       }|s�6|j	                  d�      \  }}|j-                  |j                  �       t        |j                  �       �      f�       �� |||<   �� ||d"<   |S |d8k(  r7t        j0                  d9d:d;g�<�      }|�t        j&                  d=�       i |d"<   |S t        j                  d�      \  }}|5  t        j                  d>dd?d@ddA��      }ddd�       |5  t        j2                  dBdCdDdEdCdF��      }ddd�       t        j2                  dGdddHdI�J�      }t        j                  dK�      r�ddl}t        �      D �cg c]  }t5        dL|z   �      �� }}|D �ci c]  }|g �� }}t        |�      D ]z  }t        |dz   |�      D ]f  }|j                  �       k  s�|j                  |d   |d   �      }|||      j-                  ||   |f�       |||      j-                  ||   |f�       �h �| |t         j                  _        dMt         j                  v r:t         j                  j6                  |d"<   t        j"                  dN|d"   � ��       �nddl}t        �      D �cg c]  }t5        dL|z   �      �� }}|D �ci c]  }|g �� }}t        |�      D ]z  }t        |dz   |�      D ]f  }|j                  �       k  s�|j                  |d   |d   �      }|||      j-                  ||   |f�       |||      j-                  ||   |f�       �h �| |t         j                  _        t         j                  j6                  |d"<   t        j"                  dN|d"   � ��       t        j                  d'dO��      }|r||d)<   |S t        j                  d*�       d|d)<   |S c c}w # t        $ r t        j                  d�       g |d<   Y ���w xY w# t        $ r t        j                  d�       Y |S w xY w# 1 sw Y   ���xY w# 1 sw Y   ��pxY wc c}w c c}w # t.        $ r  t        j                  d6|� d7��       i }Y  ���w xY w# 1 sw Y   ��mxY w# 1 sw Y   ��TxY wc c}w c c}w c c}w c c}w )Pz�Renders input forms for algorithm data based on type.

    Args:
        algorithm_type (str): Type of algorithm (e.g., "array", "graph").

    Returns:
        Dict[str, Any]: Dictionary containing user input data.
    z
Input Data�arrayzChoose input method:)�Manual Input�Generate Random�array_input_method�r%   r=   z0Enter array elements (comma-separated integers):z3,1,4,1,5,9,2,6�manual_array_input�,z;Invalid array input. Please enter comma-separated integers.z%Enter Target Value for Linear Search:�linear_search_target�targetz.Invalid target value. Please enter an integer.Nr   zArray Size:r   �d   �
   �random_array_size)r*   r+   r,   r-   r%   z
Min Value:r   �random_array_min_val)r,   r%   z
Max Value:�random_array_max_valzGenerate Random Array�generated_arrayzGenerated Array: �graphzbGraph input methods are not fully implemented yet. Please use sample data or manual input for now.)�Manual Adjacency List�Upload Edge List (CSV/JSON)r>   �graph_input_methodrL   zEnter Start Node (e.g., A):�dijkstra_start_node_manual�
start_nodez4Start node cannot be empty for Dijkstra's algorithm.zbEnter graph as an adjacency list. Format: `Node: (Neighbor, Weight), (Neighbor, Weight)` per line.z(Example: A: (B,1), (C,4)
B: (A,1), (C,2)�   �manual_graph_input)�heightr%   �
�:z),(�(� �)zError parsing line: z. Please check format.rM   z#Upload edge list file (CSV or JSON)�csv�json)�typez*File upload parsing not fully implemented.zNumber of Nodes:�   �   �random_graph_nodeszEdge Density:g�������?r   r   �random_graph_densityzWeight Range:)r   rF   �random_graph_weight_range)r*   r+   r,   r%   zGenerate Random Graph�A   �generated_graphzGenerated Graph: �dijkstra_start_node_random)r   �	subheader�radio�
text_input�split�strip�int�
ValueError�errorr.   �number_inputr/   �random�range�randintr    rJ   �write�warning�info�	text_area�replace�append�	Exception�file_uploaderr1   �chrrb   ) r9   �data�input_method�	array_strr   �target_valuer2   r3   �size�min_val�max_valrm   �_rN   �start_node_input�	graph_str�parsed_graph�line�node�	edges_str�edges�	edge_part�neighbor�weight�uploaded_file�	num_nodes�density�weight_range�i�nodesrb   �js                                    r   �data_input_formr�   5   s�  � � �D��L�L����� ��x�x� 6�8[�au�v���>�)����&X�Zk�  rF�  G�I�#�9B����9M� [�9M�A�QR�QX�QX�QZ��Q�W�W�Y��9M� [��W��
 �=�=�)P�Vl�m�L��O�%(��%6�D��N�r �K�k "&��X��j �K�g ���A��J�D�$�����}��S�XZ�ab�h{�|�� ���/�/�,�a�E[�\���/�/�,�c�G]�^�� � �y�y�0�1��^c�dh�^i�3j�^i�YZ�F�N�N�7�G�4T�^i�3j�� � �0� �B�$4�$4�4� "� 0� 0� @� @��W�����,�T�'�]�O�<�=�P �K�K �^c�dh�^i�3j�^i�YZ�F�N�N�7�G�4T�^i�3j�� � �0� "� 0� 0� @� @��W�����,�T�'�]�O�<�=�D �K�A 
�7�	"�
�
�
�w�x��X�X�&<�  ?J�  Pd�  e���!8�8�!�}�}�-J�Pl�m���%5�%;�%;�%=��\�"����O�P�%)��\�"� �G�G�x�y����;��(��I� �L���� �%�O�O�D�1�D��:�:�<�D�� ��*.�*�*�S�!�*<���i�#�z�z�|�� "��)2����)?�I�(1�(9�(9�#�r�(B�(J�(J�3�PR�(S�(Y�(Y�([�I�#,� (�/8���s�/C�,�H�f�!�L�L�(�.�.�*:�C�����<O�)P�Q� *@� .3��T�*� 2�& )�D��M�l �K�g  �#@�@��,�,�-R�Z_�ag�Yh�i�M��(����D�E� "��W��\ �K�W ���A��J�D�$���O�O�,>�!�WY�ab�ij�  qE�  F�	� ���)�)�O�s�c�Y\�cf�  mC�  D�� ��9�9�_��S�X_�  fA�  B�L��y�y�0�1��.3�I�.>�?�.>���R�!�V��.>��?�8=�">���4��8���">��y�)�A�"�1�q�5�)�4��!�=�=�?�W�4�%+�^�^�L��O�\�RS�_�%U�F�+�E�!�H�5�<�<�e�A�h��=O�P�+�E�!�H�5�<�<�e�A�h��=O�P�	 5� *� 4C�� � �0� �B�$4�$4�4� "� 0� 0� @� @��W�����,�T�'�]�O�<�=� �.3�I�.>�?�.>���R�!�V��.>��?�8=�">���4��8���">��y�)�A�"�1�q�5�)�4��!�=�=�?�W�4�%+�^�^�L��O�\�RS�_�%U�F�+�E�!�H�5�<�<�e�A�h��=O�P�+�E�!�H�5�<�<�e�A�h��=O�P�	 5� *� 4C�� � �0� "� 0� 0� @� @��W�����,�T�'�]�O�<�=�!�}�}�-J�Pl�m���%5��\�"� �K�	 ���O�P�%)��\�"� �K��C !\��� #����V�W� "��W��#�� "� O��H�H�M�N�n �K�qO�� ������
 4k�� 4k��T %� ����#7��v�=S�!T�U�')�����  ������
 @��">�� @��">s�   �] �']�=]�] �8]< �)^!�1^.�.^;�:_ �
C_�*_1�_>�4`�
`�`�0
`�] �#]9�8]9�<^�^�!^+�.^8�$_.�-_.�1_;�>`�on_load�on_savec                 �v  � t        j                  d�       t        j                  d�      \  }}|5  t        j                  ddgd��      }|�% | |j	                  �       j                  d�      �       ddd�       |5  t        j                  d	d
��      r |�        ddd�       y# 1 sw Y   �3xY w# 1 sw Y   yxY w)z�Renders buttons for loading and saving algorithm traces.

    Args:
        on_load (Callable): Callback function for loading a trace.
        on_save (Callable): Callback function for saving the current trace.
    zTrace Managementr   zLoad Trace (JSON)rZ   �trace_uploader)r[   r%   Nzutf-8zSave Current Trace�save_trace_buttonr@   )r   rd   r.   rw   �getvalue�decoder/   )r�   r�   r2   r3   r�   s        r   �trace_io_buttonsr�   �   s�   � � �L�L�#�$����A��J�D�$�	��(�(�)<�F�8�Qa�b���$��M�*�*�,�3�3�G�<�=� 
� 
��9�9�)�/B�C��I� 
��	 
��� 
��s   �AB#�;B/�#B,�/B8�algorithm_namec                 �:  � t        j                  d| � ��       dddd�dddd�d	d
dd�dddd�dddd�d�}|j                  | dddd��      }t        j                  d|d   � ��       t        j                  d|d   � ��       t        j                  d|d   � ��       y)z�Displays a panel with time/space complexity and pedagogical notes.

    Args:
        algorithm_name (str): The name of the algorithm.
    z
Analysis: z.O(n log n) in all cases (best, average, worst)zO(n) due to temporary arrayz�Merge Sort is a stable sorting algorithm. It is often preferred for sorting linked lists due to its efficient handling of sequential access. It's a divide-and-conquer algorithm.)�Time Complexity�Space Complexity�Notesz%O(n log n) average, O(n^2) worst-casez7O(log n) average (for recursion stack), O(n) worst-casez�Quick Sort is an in-place, unstable sorting algorithm. It is generally faster in practice than other O(n log n) algorithms because of better cache performance and fewer swaps. It's also a divide-and-conquer algorithm.z+O(n) average and worst-case, O(1) best-casezO(1)z�Linear search is the simplest searching algorithm. It checks each element in the list sequentially until a match is found or the whole list has been searched.z8O(E log E) or O(E log V) where E is edges, V is verticeszO(V + E)z�Kruskal's algorithm finds a Minimum Spanning Tree (MST) for a connected, undirected graph. It's a greedy algorithm that adds the smallest weight edge that does not form a cycle.zCO(E + V log V) with a Fibonacci heap, O(E log V) with a binary heapz�Dijkstra's algorithm finds the shortest paths from a single source node to all other nodes in a graph with non-negative edge weights. It's a greedy algorithm.)z
Merge Sortz
Quick SortzLinear SearchzKruskal (MST)zDijkstra (SSSP)zN/AzNo specific analysis available.z**Time Complexity:** r�   z**Space Complexity:** r�   z**Notes:** r�   N)r   rd   �get�markdown)r�   �analysis_data�	algo_infos      r   �algorithm_analysis_panelr�   �   s�   � � �L�L�:�n�-�.�/�  P� =� I�
�  G� Y� q�
�  M� &� v�
�  Z� *� I�
�  e� *� v�
�+�M�8 �!�!�.�e�af�  rS�  3T�  U�I��K�K�'�	�2C�(D�'E�F�G��K�K�(��3E�)F�(G�H�I��K�K�+�i��0�1�2�3r   )�	streamlitr   �typingr   r   r   r   ri   �bool�floatr8   �strr�   r�   r�   r   r   r   �<module>r�      s�   �� � ,� ,�.
�x� .
�8� .
�h� .
�fn� .
�  zB� .
�  X[� .
�  jm� .
�  {� .
�  HM� .
�`S�C� S�D��c��N� S�j�h� �� �$'4�S� '4r   

================================================================================
ملف: app\ui\__pycache__\__init__.cpython-312.pyc
================================================================================
�
    �>�h    �                    �   � y )N� r   �    �LC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\ui\__init__.py�<module>r      s   �r   

================================================================================
ملف: app\utils\io.py
================================================================================
import json
from typing import List, Dict, Any
from app.utils.types import Event

def load_trace_from_file(filepath: str) -> List[Event]:
    """Loads a list of Event objects from a JSON file.

    Args:
        filepath (str): The path to the JSON file.

    Returns:
        List[Event]: A list of Event objects.

    Raises:
        FileNotFoundError: If the file does not exist.
        json.JSONDecodeError: If the file content is not valid JSON.
        ValueError: If the JSON structure does not conform to expected event format.
    """
    with open(filepath, "r", encoding="utf-8") as f:
        events_data = json.load(f)

    if not isinstance(events_data, list):
        raise ValueError("JSON content must be a list of event objects.")

    events = []
    for d in events_data:
        if not all(k in d for k in ["step", "type", "details"]):
            raise ValueError(f"Event object missing required keys: {d}")
        events.append(Event(step=d["step"], type=d["type"], details=d["details"], data={k: v for k, v in d.items() if k not in ["step", "type", "details"]}))
    return events

def save_trace_to_file(filepath: str, trace: List[Event]):
    """Saves a list of Event objects to a JSON file.

    Args:
        filepath (str): The path to the JSON file.
        trace (List[Event]): A list of Event objects to save.
    """
    serializable_trace = [event.to_json_serializable() for event in trace]
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(serializable_trace, f, indent=2, ensure_ascii=False)


if __name__ == '__main__':
    # Dummy events for testing
    dummy_events = [
        Event(step=0, type="start", details="Algorithm started", data={"initial_value": 10}),
        Event(step=1, type="process", details="Processing step 1", data={"current_value": 5}),
        Event(step=2, type="done", details="Algorithm finished", data={"final_result": 0})
    ]

    test_file = "test_trace.json"

    print(f"Saving dummy events to {test_file}...")
    save_trace_to_file(test_file, dummy_events)
    print("Save complete.")

    print(f"Loading events from {test_file}...")
    loaded_events = load_trace_from_file(test_file)
    print("Load complete.")

    assert len(loaded_events) == len(dummy_events)
    for i in range(len(loaded_events)):
        assert loaded_events[i].step == dummy_events[i].step
        assert loaded_events[i].type == dummy_events[i].type
        assert loaded_events[i].details == dummy_events[i].details
        assert loaded_events[i].data == dummy_events[i].data
    print("Load/Save test passed: Loaded events match original events.")

    import os
    os.remove(test_file)
    print(f"Cleaned up {test_file}.")

    # Test error handling for invalid JSON
    invalid_json_file = "invalid.json"
    with open(invalid_json_file, "w") as f:
        f.write("{\"not_a_list\": 1}")
    try:
        load_trace_from_file(invalid_json_file)
    except ValueError as e:
        print(f"Expected error for invalid JSON structure: {e}")
        assert "JSON content must be a list of event objects." in str(e)
    os.remove(invalid_json_file)

    # Test error handling for missing keys
    missing_key_json_file = "missing_key.json"
    with open(missing_key_json_file, "w") as f:
        f.write("[{\"step\": 0, \"type\": \"start\"}]") # Missing 'details'
    try:
        load_trace_from_file(missing_key_json_file)
    except ValueError as e:
        print(f"Expected error for missing keys: {e}")
        assert "Event object missing required keys" in str(e)
    os.remove(missing_key_json_file)



================================================================================
ملف: app\utils\sample_generators.py
================================================================================
import random
from typing import List, Any, Dict, Tuple

def generate_random_array(size: int, min_val: int, max_val: int) -> List[int]:
    """Generates a random array of integers.

    Args:
        size (int): The number of elements in the array.
        min_val (int): The minimum possible value for an element.
        max_val (int): The maximum possible value for an element.

    Returns:
        List[int]: A list of random integers.
    """
    return [random.randint(min_val, max_val) for _ in range(size)]

def generate_random_graph(num_nodes: int, density: float, weight_range: Tuple[int, int], directed: bool = False) -> Dict[Any, List[Tuple[Any, int]]]:
    """Generates a random graph as an adjacency list.

    Args:
        num_nodes (int): The number of nodes in the graph.
        density (float): The probability of an edge existing between any two nodes (0.0 to 1.0).
        weight_range (Tuple[int, int]): A tuple (min_weight, max_weight) for edge weights.
        directed (bool): If True, generates a directed graph; otherwise, an undirected graph.

    Returns:
        Dict[Any, List[Tuple[Any, int]]]: The generated graph as an adjacency list.
    """
    nodes = [chr(65 + i) for i in range(num_nodes)] # Use A, B, C...
    graph = {node: [] for node in nodes}

    min_w, max_w = weight_range

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i == j: # No self-loops
                continue
            if random.random() < density:
                weight = random.randint(min_w, max_w)
                graph[nodes[i]].append((nodes[j], weight))
                if not directed:
                    # For undirected, ensure the reverse edge exists with the same weight
                    # and avoid adding duplicates if already added by j's iteration
                    if (nodes[i], weight) not in graph[nodes[j]]:
                        graph[nodes[j]].append((nodes[i], weight))
    return graph


if __name__ == '__main__':
    print("Generating random array:")
    random_arr = generate_random_array(10, 0, 100)
    print(random_arr)
    assert len(random_arr) == 10
    assert all(0 <= x <= 100 for x in random_arr)

    print("\nGenerating random undirected graph:")
    random_graph_undirected = generate_random_graph(5, 0.5, (1, 10), directed=False)
    print(random_graph_undirected)
    assert len(random_graph_undirected) == 5
    # Basic check for symmetry in undirected graph
    for u, neighbors in random_graph_undirected.items():
        for v, weight in neighbors:
            found_reverse = False
            for neighbor_of_v, weight_of_reverse in random_graph_undirected.get(v, []):
                if neighbor_of_v == u and weight_of_reverse == weight:
                    found_reverse = True
                    break
            assert found_reverse, f"Undirected graph not symmetric for edge {u}-{v}"

    print("\nGenerating random directed graph:")
    random_graph_directed = generate_random_graph(4, 0.7, (1, 20), directed=True)
    print(random_graph_directed)
    assert len(random_graph_directed) == 4
    # Basic check for asymmetry in directed graph (not strictly required, but good to check)
    for u, neighbors in random_graph_directed.items():
        for v, weight in neighbors:
            # Check if reverse edge exists, it shouldn't necessarily
            pass

    print("All sample generator tests passed.")



================================================================================
ملف: app\utils\types.py
================================================================================
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Union

@dataclass
class Event:
    """Represents a single step or event in an algorithm's execution for visualization.

    Attributes:
        step (int): Monotonic step number, starting from 0 or 1.
        type (str): Category of the event (e.g., "compare", "swap", "visit", "done").
        details (str): A short, human-readable explanation of the event.
        data (Dict[str, Any]): Optional dictionary for event-specific data.
                              This can include 'i', 'j', 'index', 'value', 'u', 'v', 'weight',
                              'old_value', 'new_value', 'distances', 'array_snapshot', 'graph_snapshot' etc.
    """
    step: int
    type: str
    details: str
    data: Dict[str, Any] = field(default_factory=dict)

    def to_json_serializable(self) -> Dict[str, Any]:
        """Converts the Event dataclass instance to a JSON-serializable dictionary.

        Returns:
            Dict[str, Any]: A dictionary representation of the event.
        """
        return {
            "step": self.step,
            "type": self.type,
            "details": self.details,
            **self.data,
        }

# Define common types for clarity
Array = List[Union[int, float]]
Graph = Dict[Any, List[Any]] # Adjacency list representation



================================================================================
ملف: app\utils\union_find.py
================================================================================
class UnionFind:
    """A Union-Find (Disjoint Set Union) data structure.

    Used to keep track of a set of elements partitioned into a number of disjoint (non-overlapping) sets.
    """
    def __init__(self, elements):
        """Initializes the Union-Find structure.

        Args:
            elements: An iterable of elements to initialize the sets with.
        """
        self.parent = {e: e for e in elements}
        self.rank = {e: 0 for e in elements}

    def find(self, i):
        """Finds the representative (root) of the set containing element i.

        Performs path compression for optimization.
        """
        if self.parent[i] == i:
            return i
        self.parent[i] = self.find(self.parent[i])
        return self.parent[i]

    def union(self, i, j):
        """Unites the sets containing elements i and j.

        Performs union by rank for optimization.
        Returns True if a union was performed (i.e., i and j were in different sets),
        False otherwise.
        """
        root_i = self.find(i)
        root_j = self.find(j)

        if root_i != root_j:
            if self.rank[root_i] < self.rank[root_j]:
                self.parent[root_i] = root_j
            elif self.rank[root_i] > self.rank[root_j]:
                self.parent[root_j] = root_i
            else:
                self.parent[root_j] = root_i
                self.rank[root_i] += 1
            return True
        return False


if __name__ == '__main__':
    # Example usage
    elements = [0, 1, 2, 3, 4, 5]
    uf = UnionFind(elements)

    print("Initial parents:", uf.parent)

    uf.union(0, 1)
    uf.union(1, 2)
    print("After union(0,1) and union(1,2):")
    print("Parent of 0:", uf.find(0))
    print("Parent of 1:", uf.find(1))
    print("Parent of 2:", uf.find(2))
    assert uf.find(0) == uf.find(1) == uf.find(2)

    uf.union(3, 4)
    print("After union(3,4):")
    print("Parent of 3:", uf.find(3))
    print("Parent of 4:", uf.find(4))
    assert uf.find(3) == uf.find(4)

    print("Attempting union(0,3) (should connect the two components)")
    assert uf.union(0, 3) is True
    print("Parent of 0:", uf.find(0))
    print("Parent of 3:", uf.find(3))
    assert uf.find(0) == uf.find(3)

    print("Attempting union(1,2) (should do nothing as they are already connected)")
    assert uf.union(1, 2) is False

    print("Union-Find tests passed.")



================================================================================
ملف: app\utils\validators.py
================================================================================
from typing import List, Any, Dict, Tuple

def validate_array_input(arr_str: str) -> List[int]:
    """Validates and converts a comma-separated string of integers to a list of ints.

    Args:
        arr_str (str): A comma-separated string of integers.

    Returns:
        List[int]: A list of integers.

    Raises:
        ValueError: If the input string is not a valid comma-separated list of integers.
    """
    if not arr_str.strip():
        return []
    try:
        return [int(x.strip()) for x in arr_str.split(",") if x.strip()]
    except ValueError:
        raise ValueError("Invalid array input. Please enter comma-separated integers.")

def validate_graph_input(graph_data: Dict[Any, List[Tuple[Any, int]]]) -> None:
    """Validates a graph represented as an adjacency list.

    Args:
        graph_data (Dict[Any, List[Tuple[Any, int]]]): The graph data.

    Raises:
        ValueError: If the graph data is invalid (e.g., negative weights, self-loops).
    """
    if not graph_data:
        return

    nodes = set(graph_data.keys())
    for u, neighbors in graph_data.items():
        if u not in nodes:
            raise ValueError(f"Node {u} in adjacency list key is not consistent.")
        for v, weight in neighbors:
            if v not in nodes:
                raise ValueError(f"Neighbor node {v} of {u} is not defined in the graph.")
            if not isinstance(weight, (int, float)) or weight < 0:
                raise ValueError(f"Edge {u}-{v} has invalid or negative weight: {weight}. Weights must be non-negative numbers.")
            if u == v:
                raise ValueError(f"Self-loop detected for node {u}. Self-loops are not supported.")


if __name__ == '__main__':
    # Test array validation
    print("Testing array validation...")
    try:
        arr = validate_array_input("1,2,3,4,5")
        print(f"Valid array: {arr}")
        assert arr == [1, 2, 3, 4, 5]

        arr = validate_array_input("  1 , 2, 3  ")
        print(f"Valid array with spaces: {arr}")
        assert arr == [1, 2, 3]

        arr = validate_array_input("")
        print(f"Empty array: {arr}")
        assert arr == []

        arr = validate_array_input("1,a,3")
    except ValueError as e:
        print(f"Expected error: {e}")
        assert str(e) == "Invalid array input. Please enter comma-separated integers."

    # Test graph validation
    print("\nTesting graph validation...")
    valid_graph = {
        "A": [("B", 1), ("C", 2)],
        "B": [("A", 1)],
        "C": [("A", 2)]
    }
    try:
        validate_graph_input(valid_graph)
        print("Valid graph.")

        invalid_graph_node = {
            "A": [("B", 1)],
            "B": [("D", 1)] # D is not defined
        }
        validate_graph_input(invalid_graph_node)
    except ValueError as e:
        print(f"Expected error: {e}")
        assert "Neighbor node D of B is not defined in the graph." in str(e)

    invalid_graph_weight = {
        "A": [("B", -1)],
        "B": [("A", 1)]
    }
    try:
        validate_graph_input(invalid_graph_weight)
    except ValueError as e:
        print(f"Expected error: {e}")
        assert "has invalid or negative weight" in str(e)

    invalid_graph_self_loop = {
        "A": [("A", 1)],
        "B": []
    }
    try:
        validate_graph_input(invalid_graph_self_loop)
    except ValueError as e:
        print(f"Expected error: {e}")
        assert "Self-loop detected for node A" in str(e)

    print("All validator tests completed.")



================================================================================
ملف: app\utils\__init__.py
================================================================================

================================================================================
ملف: app\utils\__pycache__\types.cpython-312.pyc
================================================================================
�
    β�hJ  �                   �v   � d dl mZmZ d dlmZmZmZmZmZ e G d� d�      �       Z	eee
ef      Zeeee   f   Zy)�    )�	dataclass�field)�Any�Dict�List�Optional�Unionc                   �l   � e Zd ZU dZeed<   eed<   eed<    ee��      Z	e
eef   ed<   de
eef   fd�Zy	)
�Eventa^  Represents a single step or event in an algorithm's execution for visualization.

    Attributes:
        step (int): Monotonic step number, starting from 0 or 1.
        type (str): Category of the event (e.g., "compare", "swap", "visit", "done").
        details (str): A short, human-readable explanation of the event.
        data (Dict[str, Any]): Optional dictionary for event-specific data.
                              This can include 'i', 'j', 'index', 'value', 'u', 'v', 'weight',
                              'old_value', 'new_value', 'distances', 'array_snapshot', 'graph_snapshot' etc.
    �step�type�details)�default_factory�data�returnc                 �b   � | j                   | j                  | j                  d�| j                  �S )z�Converts the Event dataclass instance to a JSON-serializable dictionary.

        Returns:
            Dict[str, Any]: A dictionary representation of the event.
        )r   r   r   )r   r   r   r   )�selfs    �LC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\utils\types.py�to_json_serializablezEvent.to_json_serializable   s1   � � �I�I��I�I��|�|�
� �i�i�	
� 	
�    N)�__name__�
__module__�__qualname__�__doc__�int�__annotations__�strr   �dictr   r   r   r   � r   r   r   r      sC   � �	� �I�
�I��L� ��6�D�$�s�C�x�.�6�
�d�3��8�n� 
r   r   N)�dataclassesr   r   �typingr   r   r   r   r	   r   r   �float�Array�Graphr   r   r   �<module>r%      sL   �� (� 3� 3�
�
� 
� �
�< 	�U�3��:�����S�$�s�)�^��r   

================================================================================
ملف: app\utils\__pycache__\union_find.cpython-312.pyc
================================================================================
�
    t��hd	  �                   ��  �  G d � d�      Z edk(  �r�g d�Z e e�      Z edej
                  �       ej                  dd�       ej                  dd�        ed�        ed	ej                  d�      �        ed
ej                  d�      �        edej                  d�      �       ej                  d�      ej                  d�      cxk(  rej                  d�      k(  sJ � J �ej                  dd�        ed�        edej                  d�      �        edej                  d�      �       ej                  d�      ej                  d�      k(  sJ � ed�       ej                  dd�      du sJ � ed	ej                  d�      �        edej                  d�      �       ej                  d�      ej                  d�      k(  sJ � ed�       ej                  dd�      du sJ � ed�       yy)c                   �"   � e Zd ZdZd� Zd� Zd� Zy)�	UnionFindz�A Union-Find (Disjoint Set Union) data structure.

    Used to keep track of a set of elements partitioned into a number of disjoint (non-overlapping) sets.
    c                 �p   � |D �ci c]  }||�� c}| _         |D �ci c]  }|d�� c}| _        yc c}w c c}w )z�Initializes the Union-Find structure.

        Args:
            elements: An iterable of elements to initialize the sets with.
        �    N)�parent�rank)�self�elements�es      �QC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\utils\union_find.py�__init__zUnionFind.__init__   s@   � � &.�.�X��q�!�t�X�.���#+�,�8�a�Q��T�8�,��	�� /��,s   �
.�
3c                 �   � | j                   |   |k(  r|S | j                  | j                   |   �      | j                   |<   | j                   |   S )z~Finds the representative (root) of the set containing element i.

        Performs path compression for optimization.
        )r   �find)r   �is     r   r   zUnionFind.find   sE   � �
 �;�;�q�>�Q���H����4�;�;�q�>�2����A���{�{�1�~��    c                 �\  � | j                  |�      }| j                  |�      }||k7  r�| j                  |   | j                  |   k  r|| j                  |<   y| j                  |   | j                  |   kD  r|| j                  |<   y|| j                  |<   | j                  |xx   dz  cc<   yy)z�Unites the sets containing elements i and j.

        Performs union by rank for optimization.
        Returns True if a union was performed (i.e., i and j were in different sets),
        False otherwise.
        �   TF)r   r   r   )r   r   �j�root_i�root_js        r   �unionzUnionFind.union   s�   � � ���1������1����V���y�y�� �4�9�9�V�#4�4�&,����F�#� � ���6�"�T�Y�Y�v�%6�6�&,����F�#� � '-����F�#��	�	�&�!�Q�&�!��r   N)�__name__�
__module__�__qualname__�__doc__r   r   r   � r   r   r   r      s   � ��-��r   r   �__main__)r   r   �   �   �   �   zInitial parents:r   r   r   z After union(0,1) and union(1,2):zParent of 0:zParent of 1:zParent of 2:r   r   zAfter union(3,4):zParent of 3:zParent of 4:z9Attempting union(0,3) (should connect the two components)TzGAttempting union(1,2) (should do nothing as they are already connected)FzUnion-Find tests passed.N)r   r   r	   �uf�printr   r   r   r   r   r   �<module>r#      s�  ��+� +�\ �z��!�H�	�8�	�B�	�
�b�i�i�(��H�H�Q��N��H�H�Q��N�	�
,�-�	�.�"�'�'�!�*�%�	�.�"�'�'�!�*�%�	�.�"�'�'�!�*�%��7�7�1�:������1�r�w�w�q�z�1�1�1�1�1��H�H�Q��N�	�
��	�.�"�'�'�!�*�%�	�.�"�'�'�!�*�%��7�7�1�:������#�#�#�	�
E�F��8�8�A�q�>�T�!�!�!�	�.�"�'�'�!�*�%�	�.�"�'�'�!�*�%��7�7�1�:������#�#�#�	�
S�T��8�8�A�q�>�U�"�"�"�	�
$�%�= r   

================================================================================
ملف: app\utils\__pycache__\__init__.cpython-312.pyc
================================================================================
�
    �>�h    �                    �   � y )N� r   �    �OC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\utils\__init__.py�<module>r      s   �r   

================================================================================
ملف: app\visualization\engine.py
================================================================================
from typing import List, Dict, Any, Optional
from app.utils.types import Event, Array, Graph
import json

class VisualizationEngine:
    """Manages the execution trace (list of events) for algorithm visualization.

    Provides methods to navigate through the trace, get snapshots of the state,
    and control playback.
    """

    def __init__(self, trace: List[Event]):
        """Initializes the engine with a list of events.

        Args:
            trace (List[Event]): A list of Event objects representing the algorithm's execution.
        """
        if not trace:
            raise ValueError("Trace cannot be empty.")
        self._trace = trace
        self._current_step_index = 0
        self._max_step_index = len(trace) - 1

    @property
    def step_count(self) -> int:
        """Returns the total number of steps in the trace."""
        return len(self._trace)

    @property
    def current_step(self) -> int:
        """Returns the current step number (from the event's `step` attribute)."""
        if not self._trace:
            return 0
        return self._trace[self._current_step_index].step

    @property
    def current_event(self) -> Event:
        """Returns the current Event object."""
        if not self._trace:
            raise IndexError("No events in trace.")
        return self._trace[self._current_step_index]

    def next(self) -> Optional[Event]:
        """Advances to the next step in the trace.

        Returns:
            Optional[Event]: The next event, or None if at the end of the trace.
        """
        if self._current_step_index < self._max_step_index:
            self._current_step_index += 1
            return self.current_event
        return None

    def prev(self) -> Optional[Event]:
        """Goes back to the previous step in the trace.

        Returns:
            Optional[Event]: The previous event, or None if at the beginning of the trace.
        """
        if self._current_step_index > 0:
            self._current_step_index -= 1
            return self.current_event
        return None

    def seek(self, step_index: int) -> Event:
        """Seeks to a specific step index in the trace.

        Args:
            step_index (int): The 0-based index of the event to seek to.

        Returns:
            Event: The event at the specified step index.

        Raises:
            IndexError: If the step_index is out of bounds.
        """
        if not (0 <= step_index <= self._max_step_index):
            raise IndexError(f"Step index {step_index} out of bounds [0, {self._max_step_index}]")
        self._current_step_index = step_index
        return self.current_event

    def get_snapshot(self) -> Dict[str, Any]:
        """Returns a minimal renderable state (snapshot) for the current step.

        Finds the most recent full snapshot (array_snapshot or graph_snapshot) at or
        before the current step, then re-applies only the modifications that occur
        after that snapshot up to the current step.
        """
        snapshot_data: Dict[str, Any] = {}
        current_array: Optional[Array] = None
        current_graph: Optional[Graph] = None

        # Find the most recent full snapshot (and remember its index)
        snapshot_index: Optional[int] = None
        for i in range(self._current_step_index + 1):
            event = self._trace[i]
            if "array_snapshot" in event.data:
                current_array = list(event.data["array_snapshot"])
                current_graph = None
                snapshot_index = i
            elif "graph_snapshot" in event.data:
                # deep copy via json to avoid accidental references
                current_graph = json.loads(json.dumps(event.data["graph_snapshot"]))
                current_array = None
                snapshot_index = i

        # If we found a snapshot, replay only events after it. Otherwise start at 0.
        start_index = 0 if snapshot_index is None else (snapshot_index + 1)

        # Apply modifications from start_index up to the current step index
        for i in range(start_index, self._current_step_index + 1):
            event = self._trace[i]

            if current_array is not None:
                # Overwrite (used by merge/copy-back style algorithms)
                if event.type == "overwrite" and "index" in event.data and "value" in event.data:
                    idx = event.data["index"]
                    val = event.data["value"]
                    if 0 <= idx < len(current_array):
                        current_array[idx] = val

                # Swap (used by many in-place sorts)
                elif event.type == "swap" and "i" in event.data and "j" in event.data:
                    idx_i = event.data["i"]
                    idx_j = event.data["j"]
                    if 0 <= idx_i < len(current_array) and 0 <= idx_j < len(current_array):
                        current_array[idx_i], current_array[idx_j] = current_array[idx_j], current_array[idx_i]

                # (Optional) handle other array-modifying event types if your algorithms add them

            if current_graph is not None:
                if event.type == "set_distance" and "u" in event.data and "new_distance" in event.data:
                    node = event.data["u"]
                    if "distances" not in snapshot_data:
                        snapshot_data["distances"] = {}
                    snapshot_data["distances"][node] = event.data["new_distance"]
                elif event.type == "add_mst_edge" and "u" in event.data and "v" in event.data:
                    if "mst_edges" not in snapshot_data:
                        snapshot_data["mst_edges"] = []
                    snapshot_data["mst_edges"].append((event.data["u"], event.data["v"]))
                # (Optional) add other graph updates here

        if current_array is not None:
            snapshot_data["array"] = current_array
        if current_graph is not None:
            snapshot_data["graph"] = current_graph

        # Provide context for renderers
        snapshot_data["current_event_type"] = self.current_event.type
        snapshot_data["current_event_details"] = self.current_event.details
        snapshot_data["current_event_data"] = self.current_event.data

        return snapshot_data


    def get_trace_json(self) -> str:
        """Returns the full trace as a JSON string."""
        return json.dumps([event.to_json_serializable() for event in self._trace], indent=2)

    @classmethod
    def from_json_trace(cls, json_trace: str) -> "VisualizationEngine":
        """Creates an engine instance from a JSON trace string.

        Args:
            json_trace (str): A JSON string representing a list of events.

        Returns:
            VisualizationEngine: An initialized engine instance.
        """
        data = json.loads(json_trace)
        events = [Event(step=d["step"], type=d["type"], details=d["details"], data={k: v for k, v in d.items() if k not in ["step", "type", "details"]}) for d in data]
        return cls(events)


if __name__ == '__main__':
    # Example usage with a dummy trace
    dummy_trace = [
        Event(step=0, type="snapshot", details="Initial array", data={"array_snapshot": [5, 2, 8, 1]}),
        Event(step=1, type="compare", details="Compare 5 and 2", data={"i": 0, "j": 1}),
        Event(step=2, type="swap", details="Swap 5 and 2", data={"i": 0, "j": 1}),
        Event(step=3, type="snapshot", details="Array after swap", data={"array_snapshot": [2, 5, 8, 1]}),
        Event(step=4, type="compare", details="Compare 8 and 1", data={"i": 2, "j": 3}),
        Event(step=5, type="swap", details="Swap 8 and 1", data={"i": 2, "j": 3}),
        Event(step=6, type="done", details="Algorithm finished", data={"sorted_array": [1, 2, 5, 8]}),
    ]

    engine = VisualizationEngine(dummy_trace)

    print(f"Total steps: {engine.step_count}")
    print(f"Current step (initial): {engine.current_step}")
    print(f"Current event (initial): {engine.current_event.to_json_serializable()}")
    print(f"Snapshot (initial): {engine.get_snapshot()}")

    engine.next()
    print(f"\nCurrent step (next): {engine.current_step}")
    print(f"Current event (next): {engine.current_event.to_json_serializable()}")
    print(f"Snapshot (next): {engine.get_snapshot()}")

    engine.seek(5)
    print(f"\nCurrent step (seek to 5): {engine.current_step}")
    print(f"Current event (seek to 5): {engine.current_event.to_json_serializable()}")
    print(f"Snapshot (seek to 5): {engine.get_snapshot()}")

    engine.prev()
    print(f"\nCurrent step (prev): {engine.current_step}")
    print(f"Current event (prev): {engine.current_event.to_json_serializable()}")
    print(f"Snapshot (prev): {engine.get_snapshot()}")

    # Test JSON serialization/deserialization
    json_output = engine.get_trace_json()
    print(f"\nJSON Trace:\n{json_output}")

    new_engine = VisualizationEngine.from_json_trace(json_output)
    print(f"\nNew engine current step: {new_engine.current_step}")
    print(f"New engine current event: {new_engine.current_event.to_json_serializable()}")
    assert new_engine.step_count == engine.step_count
    print("JSON (de)serialization test passed.")

    # Test graph snapshot logic
    graph_trace = [
        Event(step=0, type="snapshot", details="Initial graph", data={"graph_snapshot": {"A": [("B", 1)], "B": [("A", 1)]}}),
        Event(step=1, type="set_distance", details="Set distance A to 0", data={"u": "A", "new_distance": 0}),
        Event(step=2, type="add_mst_edge", details="Add edge A-B", data={"u": "A", "v": "B", "weight": 1}),
        Event(step=3, type="done", details="Graph algo finished", data={}),
    ]
    graph_engine = VisualizationEngine(graph_trace)
    graph_engine.seek(2)
    graph_snapshot = graph_engine.get_snapshot()
    print(f"\nGraph snapshot at step 2: {graph_snapshot}")
    assert "graph" in graph_snapshot
    assert "distances" in graph_snapshot
    assert graph_snapshot["distances"]["A"] == 0
    assert "mst_edges" in graph_snapshot
    assert ("A", "B") in graph_snapshot["mst_edges"]
    print("Graph snapshot test passed.")



================================================================================
ملف: app\visualization\renderers.py
================================================================================
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
from typing import List, Dict, Any, Tuple, Optional

def render_array_bars(snapshot: Dict[str, Any], title: str = "Array Visualization") -> plt.Figure:
    """Renders an array as a bar chart, highlighting specific indices.

    Args:
        snapshot (Dict[str, Any]): The snapshot dictionary from the VisualizationEngine,
                                   expected to contain an 'array' key and 'current_event_data'.
        title (str): Title for the plot.

    Returns:
        plt.Figure: A Matplotlib Figure object.
    """
    arr = snapshot.get("array", [])
    event_data = snapshot.get("current_event_data", {})

    fig, ax = plt.subplots(figsize=(10, 6))
    if not arr:
        ax.text(0.5, 0.5, "Array is empty", horizontalalignment='center', verticalalignment='center', transform=ax.transAxes)
        ax.set_title(title)
        return fig

    x = np.arange(len(arr))
    bars = ax.bar(x, arr, color='skyblue')

    # Highlight elements involved in the current event
    highlight_color = 'red'
    compare_color = 'orange'
    pivot_color = 'purple'
    source_color = 'green'

    if snapshot.get("current_event_type") == "compare":
        i, j = event_data.get("i"), event_data.get("j")
        if i is not None and 0 <= i < len(arr): bars[i].set_color(compare_color)
        if j is not None and 0 <= j < len(arr): bars[j].set_color(compare_color)
    elif snapshot.get("current_event_type") == "swap":
        i, j = event_data.get("i"), event_data.get("j")
        if i is not None and 0 <= i < len(arr): bars[i].set_color(highlight_color)
        if j is not None and 0 <= j < len(arr): bars[j].set_color(highlight_color)
    elif snapshot.get("current_event_type") == "overwrite":
        idx = event_data.get("index")
        src_idx = event_data.get("source_index")
        if idx is not None and 0 <= idx < len(arr): bars[idx].set_color(highlight_color)
        if src_idx is not None and 0 <= src_idx < len(arr): bars[src_idx].set_color(source_color)
    elif snapshot.get("current_event_type") == "set_pivot":
        idx = event_data.get("index")
        if idx is not None and 0 <= idx < len(arr): bars[idx].set_color(pivot_color)
    elif snapshot.get("current_event_type") == "found":
        idx = event_data.get("index")
        if idx is not None and 0 <= idx < len(arr): bars[idx].set_color('lime')

    ax.set_xticks(x)
    ax.set_xticklabels([str(val) for val in arr]) # Show values on x-axis labels
    ax.set_xlabel("Index / Value")
    ax.set_ylabel("Value")
    ax.set_title(f"{title} - Step: {snapshot.get('current_event_details', '')}")
    ax.set_ylim(0, max(arr) * 1.2 if arr else 1)

    # Add value labels on top of bars
    for bar in bars:
        yval = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom')

    plt.tight_layout()
    return fig

def render_graph(snapshot: Dict[str, Any], title: str = "Graph Visualization") -> plt.Figure:
    """Renders a graph, highlighting nodes and edges based on the current event.

    Args:
        snapshot (Dict[str, Any]): The snapshot dictionary from the VisualizationEngine,
                                   expected to contain a 'graph' key and 'current_event_data'.
        title (str): Title for the plot.

    Returns:
        plt.Figure: A Matplotlib Figure object.
    """
    graph_data = snapshot.get("graph", {})
    event_data = snapshot.get("current_event_data", {})
    distances = snapshot.get("distances", {})
    mst_edges = snapshot.get("mst_edges", [])

    G = nx.DiGraph() if snapshot.get("current_event_type") in ["relax", "set_distance"] else nx.Graph()

    # Add nodes and edges
    for u, neighbors in graph_data.items():
        G.add_node(u)
        for v, weight in neighbors:
            G.add_edge(u, v, weight=weight)

    pos = nx.spring_layout(G, seed=42) # For consistent layout

    fig, ax = plt.subplots(figsize=(10, 8))

    if not G.nodes:
        ax.text(0.5, 0.5, "Graph is empty", horizontalalignment='center', verticalalignment='center', transform=ax.transAxes)
        ax.set_title(title)
        return fig

    # Default drawing
    nx.draw_networkx_nodes(G, pos, node_color='lightblue', node_size=700, ax=ax)
    nx.draw_networkx_edges(G, pos, edge_color='gray', width=1, ax=ax)
    nx.draw_networkx_labels(G, pos, font_size=10, font_weight='bold', ax=ax)

    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='green', ax=ax)

    # Highlight based on event type
    if snapshot.get("current_event_type") == "visit":
        node = event_data.get("u")
        if node in G.nodes: nx.draw_networkx_nodes(G, pos, nodelist=[node], node_color='red', node_size=700, ax=ax)
    elif snapshot.get("current_event_type") == "consider_edge":
        u, v = event_data.get("u"), event_data.get("v")
        if G.has_edge(u, v): nx.draw_networkx_edges(G, pos, edgelist=[(u, v)], edge_color='red', width=2, ax=ax)
        if G.has_edge(v, u) and not G.is_directed(): nx.draw_networkx_edges(G, pos, edgelist=[(v, u)], edge_color='red', width=2, ax=ax)
    elif snapshot.get("current_event_type") == "add_mst_edge":
        u, v = event_data.get("u"), event_data.get("v")
        if G.has_edge(u, v): nx.draw_networkx_edges(G, pos, edgelist=[(u, v)], edge_color='blue', width=3, ax=ax)
        if G.has_edge(v, u) and not G.is_directed(): nx.draw_networkx_edges(G, pos, edgelist=[(v, u)], edge_color='blue', width=3, ax=ax)

    # Draw MST edges if available
    if mst_edges:
        nx.draw_networkx_edges(G, pos, edgelist=mst_edges, edge_color='blue', width=3, ax=ax)

    # Display distances if available (e.g., Dijkstra)
    if distances:
        for node, dist in distances.items():
            if node in pos:
                x, y = pos[node]
                ax.text(x, y + 0.1, f"D:{dist}", bbox=dict(facecolor='yellow', alpha=0.5), horizontalalignment='center')

    ax.set_title(f"{title} - Step: {snapshot.get('current_event_details', '')}")
    ax.axis('off')
    plt.tight_layout()
    return fig


if __name__ == '__main__':
    # Example usage for array rendering
    array_snapshot_example = {
        "array": [10, 20, 5, 30, 15],
        "current_event_type": "compare",
        "current_event_details": "Comparing elements at index 1 and 2",
        "current_event_data": {"i": 1, "j": 2}
    }
    fig_array = render_array_bars(array_snapshot_example, "Merge Sort Step")
    plt.show()

    array_snapshot_swap_example = {
        "array": [10, 5, 20, 30, 15],
        "current_event_type": "swap",
        "current_event_details": "Swapping elements at index 1 and 2",
        "current_event_data": {"i": 1, "j": 2}
    }
    fig_array_swap = render_array_bars(array_snapshot_swap_example, "Merge Sort Step (Swap)")
    plt.show()

    # Example usage for graph rendering
    graph_snapshot_example = {
        "graph": {
            "A": [("B", 1), ("C", 4)],
            "B": [("A", 1), ("C", 2), ("D", 5)],
            "C": [("A", 4), ("B", 2), ("D", 1)],
            "D": [("B", 5), ("C", 1)]
        },
        "current_event_type": "visit",
        "current_event_details": "Visiting node A",
        "current_event_data": {"u": "A"},
        "distances": {"A": 0, "B": float('inf'), "C": float('inf'), "D": float('inf')}
    }
    fig_graph = render_graph(graph_snapshot_example, "Dijkstra Step")
    plt.show()

    graph_snapshot_edge_example = {
        "graph": {
            "A": [("B", 1), ("C", 4)],
            "B": [("A", 1), ("C", 2), ("D", 5)],
            "C": [("A", 4), ("B", 2), ("D", 1)],
            "D": [("B", 5), ("C", 1)]
        },
        "current_event_type": "consider_edge",
        "current_event_details": "Considering edge B-C with weight 2",
        "current_event_data": {"u": "B", "v": "C", "weight": 2},
        "distances": {"A": 0, "B": 1, "C": float('inf'), "D": float('inf')}
    }
    fig_graph_edge = render_graph(graph_snapshot_edge_example, "Dijkstra Step (Edge)")
    plt.show()

    mst_graph_snapshot_example = {
        "graph": {
            "A": [("B", 1), ("C", 4)],
            "B": [("A", 1), ("C", 2), ("D", 5)],
            "C": [("A", 4), ("B", 2), ("D", 1)],
            "D": [("B", 5), ("C", 1)]
        },
        "current_event_type": "add_mst_edge",
        "current_event_details": "Adding edge A-B to MST",
        "current_event_data": {"u": "A", "v": "B", "weight": 1},
        "mst_edges": [("A", "B")]
    }
    fig_mst_graph = render_graph(mst_graph_snapshot_example, "Kruskal Step (MST Edge)")
    plt.show()



================================================================================
ملف: app\visualization\__init__.py
================================================================================

================================================================================
ملف: app\visualization\__pycache__\engine.cpython-312.pyc
================================================================================
�
    J}�h�'  �                   �  � d dl mZmZmZmZ d dlmZmZmZ d dl	Z	 G d� d�      Z
edk(  �r! ed ddd	g d
�i��       edddd dd���       edddd dd���       edddd	g d�i��       edddddd���       edddddd���       eddddg d�i��      gZ e
e�      Z edej                  � ��        ed ej                   � ��        ed!ej"                  j%                  �       � ��        ed"ej'                  �       � ��       ej)                  �         ed#ej                   � ��        ed$ej"                  j%                  �       � ��        ed%ej'                  �       � ��       ej+                  d�        ed&ej                   � ��        ed'ej"                  j%                  �       � ��        ed(ej'                  �       � ��       ej-                  �         ed)ej                   � ��        ed*ej"                  j%                  �       � ��        ed+ej'                  �       � ��       ej/                  �       Z ed,e� ��       e
j3                  e�      Z ed-ej                   � ��        ed.ej"                  j%                  �       � ��       ej                  ej                  k(  sJ � ed/�        ed dd0d1d2gd3gd4�i��       edd5d6d7d d8���       edd9d:d7d;dd<���       eddd=i ��      gZ e
e�      Zej+                  d�       ej'                  �       Z ed>e� ��       d?ev sJ �d@ev sJ �ed@   d7   d k(  sJ �dAev sJ �d4edA   v sJ � edB�       yy)C�    )�List�Dict�Any�Optional)�Event�Array�GraphNc                   ��   � e Zd ZdZdee   fd�Zedefd��       Z	edefd��       Z
edefd��       Zdee   fd�Zdee   fd	�Zd
edefd�Zdeeef   fd�Zdefd�Zededd fd��       Zy)�VisualizationEnginez�Manages the execution trace (list of events) for algorithm visualization.

    Provides methods to navigate through the trace, get snapshots of the state,
    and control playback.
    �tracec                 �`   � |st        d�      �|| _        d| _        t        |�      dz
  | _        y)z�Initializes the engine with a list of events.

        Args:
            trace (List[Event]): A list of Event objects representing the algorithm's execution.
        zTrace cannot be empty.r   �   N)�
ValueError�_trace�_current_step_index�len�_max_step_index)�selfr   s     �UC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\visualization\engine.py�__init__zVisualizationEngine.__init__   s2   � � ��5�6�6����#$�� �"�5�z�A�~���    �returnc                 �,   � t        | j                  �      S )z/Returns the total number of steps in the trace.)r   r   �r   s    r   �
step_countzVisualizationEngine.step_count   s   � � �4�;�;��r   c                 �b   � | j                   sy| j                   | j                     j                  S )zDReturns the current step number (from the event's `step` attribute).r   )r   r   �stepr   s    r   �current_stepz VisualizationEngine.current_step   s)   � � �{�{���{�{�4�3�3�4�9�9�9r   c                 �b   � | j                   st        d�      �| j                   | j                     S )z!Returns the current Event object.zNo events in trace.)r   �
IndexErrorr   r   s    r   �current_eventz!VisualizationEngine.current_event$   s,   � � �{�{��2�3�3��{�{�4�3�3�4�4r   c                 �x   � | j                   | j                  k  r!| xj                   dz  c_         | j                  S y)z�Advances to the next step in the trace.

        Returns:
            Optional[Event]: The next event, or None if at the end of the trace.
        r   N)r   r   r!   r   s    r   �nextzVisualizationEngine.next+   s8   � � �#�#�d�&:�&:�:��$�$��)�$��%�%�%�r   c                 �d   � | j                   dkD  r!| xj                   dz  c_         | j                  S y)z�Goes back to the previous step in the trace.

        Returns:
            Optional[Event]: The previous event, or None if at the beginning of the trace.
        r   r   N)r   r!   r   s    r   �prevzVisualizationEngine.prev6   s2   � � �#�#�a�'��$�$��)�$��%�%�%�r   �
step_indexc                 �   � d|cxk  r| j                   k  sn t        d|� d| j                   � d��      �|| _        | j                  S )a&  Seeks to a specific step index in the trace.

        Args:
            step_index (int): The 0-based index of the event to seek to.

        Returns:
            Event: The event at the specified step index.

        Raises:
            IndexError: If the step_index is out of bounds.
        r   zStep index z out of bounds [0, �])r   r    r   r!   )r   r&   s     r   �seekzVisualizationEngine.seekA   sN   � � �Z�7�4�#7�#7�7��{�:�,�6I�$�J^�J^�I_�_`�a�b�b�#-�� ��!�!�!r   c                 ��  � i }d}d}d}t        | j                  dz   �      D ]�  }| j                  |   }d|j                  v rt	        |j                  d   �      }d}|}�=d|j                  v s�Lt        j                  t        j                  |j                  d   �      �      }d}|}�� |�dn|dz   }t        || j                  dz   �      D �]�  }| j                  |   }|��|j                  dk(  rWd|j                  v rId|j                  v r;|j                  d   }|j                  d   }	d|cxk  rt        |�      k  r�n n�|	||<   n�|j                  d	k(  ryd
|j                  v rkd|j                  v r]|j                  d
   }
|j                  d   }d|
cxk  rt        |�      k  r+n n(d|cxk  rt        |�      k  rn n||   ||
   c||
<   ||<   |���|j                  dk(  rKd|j                  v r=d|j                  v r/|j                  d   }d|vri |d<   |j                  d   |d   |<   ��a|j                  dk(  s��rd|j                  v s���d|j                  v s���d|vrg |d<   |d   j                  |j                  d   |j                  d   f�       ��� |�||d<   |�||d<   | j                  j                  |d<   | j                  j                  |d<   | j                  j                  |d<   |S )a)  Returns a minimal renderable state (snapshot) for the current step.

        Finds the most recent full snapshot (array_snapshot or graph_snapshot) at or
        before the current step, then re-applies only the modifications that occur
        after that snapshot up to the current step.
        Nr   �array_snapshot�graph_snapshotr   �	overwrite�index�value�swap�i�j�set_distance�u�new_distance�	distances�add_mst_edge�v�	mst_edges�array�graph�current_event_type�current_event_details�current_event_data)�ranger   r   �data�list�json�loads�dumps�typer   �appendr!   �details)r   �snapshot_data�current_array�current_graph�snapshot_indexr1   �event�start_index�idx�val�idx_i�idx_j�nodes                r   �get_snapshotz VisualizationEngine.get_snapshotR   s�  � � )+��)-��)-�� )-���t�/�/�!�3�4�A��K�K��N�E��5�:�:�-� $�U�Z�Z�0@�%A� B�� $��!"��!�U�Z�Z�/� $�
�
�4�:�:�e�j�j�AQ�6R�+S� T�� $��!"�� 5� *�1�a���8J�� �{�D�$<�$<�q�$@�A�A��K�K��N�E��(��:�:��,��E�J�J�1F�7�V[�V`�V`�K`��*�*�W�-�C��*�*�W�-�C��C�4�#�m�"4�4�-0��c�*� �Z�Z�6�)�c�U�Z�Z�.?�C�5�:�:�DU�!�J�J�s�O�E�!�J�J�s�O�E��E�6�C��$6�6�1��;Z��M�HZ�;Z�ER�SX�EY�[h�in�[o�B��e�,�m�E�.B� �(��:�:��/�C�5�:�:�4E�.�\a�\f�\f�Jf� �:�:�c�?�D�"�-�7�57��k�2�7<�z�z�.�7Q�M�+�.�t�4��Z�Z�>�1�c�U�Z�Z�6G�C�SX�S]�S]�L]�"�-�7�57��k�2�!�+�.�5�5�u�z�z�#���
�
�SV��6X�Y�; B�@ �$�%2�M�'�"��$�%2�M�'�"� /3�.@�.@�.E�.E��*�+�15�1C�1C�1K�1K��-�.�.2�.@�.@�.E�.E��*�+��r   c                 �   � t        j                  | j                  D �cg c]  }|j                  �       �� c}d��      S c c}w )z(Returns the full trace as a JSON string.�   )�indent)rB   rD   r   �to_json_serializable)r   rL   s     r   �get_trace_jsonz"VisualizationEngine.get_trace_json�   s3   � ��z�z�T�[�[�Q�[�E�5�5�5�7�[�Q�Z[�\�\��Qs   �>�
json_tracec                 ��   � t        j                  |�      }|D ���cg c]A  }t        |d   |d   |d   |j                  �       D ��ci c]  \  }}|dvs�||�� c}}��      ��C }}}} | |�      S c c}}w c c}}}w )z�Creates an engine instance from a JSON trace string.

        Args:
            json_trace (str): A JSON string representing a list of events.

        Returns:
            VisualizationEngine: An initialized engine instance.
        r   rE   rG   )r   rE   rG   �r   rE   rG   r@   )rB   rC   r   �items)�clsrY   r@   �d�kr8   �eventss          r   �from_json_tracez#VisualizationEngine.from_json_trace�   s�   � � �z�z�*�%�� cg�  h�  cg�  ^_�%�Q�v�Y�Q�v�Y��)��ef�el�el�en�  TX�en�]a�]^�`a�rs�  |W�  sW�TU�WX�TX�en�  TX�  Y�  cg��  h��6�{��� TX��  hs   �)A4�A.�A.�A4�.A4N)�__name__�
__module__�__qualname__�__doc__r   r   r   �property�intr   r   r!   r   r#   r%   r)   r   �strr   rS   rX   �classmethodra   � r   r   r   r      s�   � ��
.�d�5�k� 
.� � �C�  � � � �:�c� :� �:� �5�u� 5� �5�	�h�u�o� 	�	�h�u�o� 	�"�s� "�u� "�"G�d�3��8�n� G�T]�� ]� ��� �1F� � �r   r   �__main__�snapshotzInitial arrayr+   )�   rU   �   r   r[   r   �comparezCompare 5 and 2)r1   r2   rU   r0   zSwap 5 and 2�   zArray after swap)rU   rm   rn   r   �   zCompare 8 and 1rm   zSwap 8 and 1�   �donezAlgorithm finished�sorted_array)r   rU   rm   rn   zTotal steps: zCurrent step (initial): zCurrent event (initial): zSnapshot (initial): z
Current step (next): zCurrent event (next): zSnapshot (next): z
Current step (seek to 5): zCurrent event (seek to 5): zSnapshot (seek to 5): z
Current step (prev): zCurrent event (prev): zSnapshot (prev): z
JSON Trace:
z
New engine current step: zNew engine current event: z#JSON (de)serialization test passed.zInitial graphr,   )�Br   )�Ar   )rv   ru   r3   zSet distance A to 0rv   )r4   r5   r7   zAdd edge A-Bru   )r4   r8   �weightzGraph algo finishedz
Graph snapshot at step 2: r;   r6   r9   zGraph snapshot test passed.)�typingr   r   r   r   �app.utils.typesr   r   r	   rB   r   rb   �dummy_trace�engine�printr   r   r!   rW   rS   r#   r)   r%   rX   �json_outputra   �
new_engine�graph_trace�graph_enginer,   rj   r   r   �<module>r�      s�  �� ,� ,� /� /� �g� g�T �z�� 	�1�:��FV�Xd�Ee�f��1�9�.?�A�TU�FV�W��1�6�>�a�a�@P�Q��1�:�/A�IY�[g�Hh�i��1�9�.?�A�TU�FV�W��1�6�>�a�a�@P�Q��1�6�+?�~�Wc�Fd�e��K� !��-�F�	�M�&�+�+�,�
-�.�	�$�V�%8�%8�$9�
:�;�	�%�f�&:�&:�&O�&O�&Q�%R�
S�T�	� ��!4�!4�!6� 7�
8�9�
�K�K�M�	�#�F�$7�$7�#8�
9�:�	�"�6�#7�#7�#L�#L�#N�"O�
P�Q�	��f�1�1�3�4�
5�6�
�K�K��N�	�(��)<�)<�(=�
>�?�	�'��(<�(<�(Q�(Q�(S�'T�
U�V�	�"�6�#6�#6�#8�"9�
:�;�
�K�K�M�	�#�F�$7�$7�#8�
9�:�	�"�6�#7�#7�#L�#L�#N�"O�
P�Q�	��f�1�1�3�4�
5�6� �'�'�)�K�	�O�K�=�
)�*�$�4�4�[�A�J�	�'�
�(?�(?�'@�
A�B�	�&�z�'?�'?�'T�'T�'V�&W�
X�Y�� � �F�$5�$5�5�5�5�	�
/�0� 	�1�:��FV�_g�^h�px�oy�Xz�E{�|��1�>�3H�UX�jk�Ol�m��1�>�>�c�X[�gh�Hi�j��1�6�+@�r�J�	�K� '�{�3�L����a��!�.�.�0�N�	�(��(8�
9�:��n�$�$�$��.�(�(�(��+�&�s�+�q�0�0�0��.�(�(�(����4�4�4�4�	�
'�(�y r   

================================================================================
ملف: app\visualization\__pycache__\renderers.cpython-312.pyc
================================================================================
�
    �?�h�!  �            
       ��  � d dl mZ d dlZd dlZd dlmZm	Z	m
Z
mZmZ d.de	ee
f   dedej                  fd�Zd/de	ee
f   dedej                  fd�Zedk(  �rg d	�d
dddd�d�Z eed�      Z ej(                  �        g d�ddddd�d�Z eed�      Z ej(                  �        ddgg d�g d�ddgd�ddddid  ed �       ed �       ed �      d�d!�Z eed"�      Z ej(                  �        ddgg d�g d�ddgd�d#d$d%d&dd'�d d ed �       ed �      d�d!�Z eed(�      Z ej(                  �        ddgg d�g d�ddgd�d)d*dd%dd'�d+gd,�Z eed-�      Z ej(                  �        yy)0�    N)�List�Dict�Any�Tuple�Optional�snapshot�title�returnc           	      �P  � | j                  dg �      }| j                  di �      }t        j                  d��      \  }}|s4|j                  ddddd|j                  ��       |j                  |�       |S t        j                  t        |�      �      }|j                  ||d	�
�      }d}d}	d}
d}| j                  d�      dk(  r�|j                  d�      |j                  d�      }}|�+d|cxk  rt        |�      k  rn n||   j                  |	�       |���d|cxk  rt        |�      k  �r�n �n�||   j                  |	�       �n�| j                  d�      dk(  r�|j                  d�      |j                  d�      }}|�+d|cxk  rt        |�      k  rn n||   j                  |�       |��ed|cxk  rt        |�      k  �rPn �nL||   j                  |�       �n6| j                  d�      dk(  r}|j                  d�      }|j                  d�      }|�+d|cxk  rt        |�      k  rn n||   j                  |�       |��d|cxk  rt        |�      k  r�n n�||   j                  |�       n�| j                  d�      dk(  r?|j                  d�      }|�~d|cxk  rt        |�      k  rjn ng||   j                  |
�       nR| j                  d�      dk(  r>|j                  d�      }|�+d|cxk  rt        |�      k  rn n||   j                  d�       |j                  |�       |j                  |D �cg c]  }t        |�      �� c}�       |j                  d�       |j                  d�       |j                  |� d| j                  dd�      � ��       |j!                  d|rt#        |�      d z  nd!�       |D ]W  }|j%                  �       }|j                  |j'                  �       |j)                  �       d"z  z   |d#z   t+        |d"�      dd$�%�       �Y t        j,                  �        |S c c}w )&ao  Renders an array as a bar chart, highlighting specific indices.

    Args:
        snapshot (Dict[str, Any]): The snapshot dictionary from the VisualizationEngine,
                                   expected to contain an 'array' key and 'current_event_data'.
        title (str): Title for the plot.

    Returns:
        plt.Figure: A Matplotlib Figure object.
    �array�current_event_data)�
   �   ��figsize�      �?zArray is empty�center��horizontalalignment�verticalalignment�	transform�skyblue)�color�red�orange�purple�green�current_event_type�compare�i�jr   �swap�	overwrite�index�source_index�	set_pivot�found�limezIndex / Value�Value�	 - Step: �current_event_details� g333333�?�   �   g�������?�bottom)�ha�va)�get�plt�subplots�text�	transAxes�	set_title�np�arange�len�bar�	set_color�
set_xticks�set_xticklabels�str�
set_xlabel�
set_ylabel�set_ylim�max�
get_height�get_x�	get_width�round�tight_layout)r   r	   �arr�
event_data�fig�ax�x�bars�highlight_color�compare_color�pivot_color�source_colorr    r!   �idx�src_idx�valr;   �yvals                      �XC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\visualization\renderers.py�render_array_barsrX      s�  � � �,�,�w��
#�C����2�B�7�J��l�l�7�+�G�C���
����S�*��\d�pr�p|�p|��}�
���U���
�
�	�	�#�c�(��A��6�6�!�S�	�6�*�D� �O��M��K��L��|�|�(�)�Y�6��~�~�c�"�J�N�N�3�$7�1���=�Q�!�.�c�#�h�.��Q��0A�0A�-�0P��=�Q�!�.�c�#�h�.��Q��0A�0A�-�0P�	���*�	+�v�	5��~�~�c�"�J�N�N�3�$7�1���=�Q�!�.�c�#�h�.��Q��0A�0A�/�0R��=�Q�!�.�c�#�h�.��Q��0A�0A�/�0R�	���*�	+�{�	:��n�n�W�%���.�.��0���?�q�C�2�#�c�(�2�D��I�4G�4G��4X���1��#:�#�c�(�#:�D��M�<S�<S�T`�<a�	���*�	+�{�	:��n�n�W�%���?�q�C�2�#�c�(�2�D��I�4G�4G��4T�	���*�	+�w�	6��n�n�W�%���?�q�C�2�#�c�(�2�D��I�4G�4G��4O��M�M�!�����C�0�C�S��C��C�0�1��M�M�/�"��M�M�'���L�L�E�7�)�H�L�L�1H�"�$M�#N�O�P��K�K��S�3�s�8�c�>�a�0� ���~�~���
����	�	��c�m�m�o�a�/�/����e�D�!�n�QY�^f��g� � �����J�� 1s   �.P#c           
      �   � | j                  di �      }| j                  di �      }| j                  di �      }| j                  dg �      }| j                  d�      dv rt        j                  �       nt        j                  �       }|j	                  �       D ]4  \  }}|j                  |�       |D ]  \  }	}
|j                  ||	|
��       � �6 t        j                  |d�	�      }t        j                  d
��      \  }}|j                  s4|j                  ddddd|j                  ��       |j                  |�       |S t        j                  ||dd|��       t        j                  ||dd|��       t        j                   ||dd|��       t        j"                  |d�      }t        j$                  |||d|��       | j                  d�      dk(  r>|j                  d�      }||j                  v �rkt        j                  |||gdd|��       �nM| j                  d�      d k(  r�|j                  d�      |j                  d!�      }	}|j'                  ||	�      rt        j                  ||||	fgdd"|�#�       |j'                  |	|�      r�|j)                  �       s�t        j                  |||	|fgdd"|�#�       n�| j                  d�      d$k(  r�|j                  d�      |j                  d!�      }	}|j'                  ||	�      rt        j                  ||||	fgd%d&|�#�       |j'                  |	|�      r.|j)                  �       st        j                  |||	|fgd%d&|�#�       |rt        j                  |||d%d&|�#�       |rL|j	                  �       D ]9  \  }}||v s�||   \  }}|j                  ||d'z   d(|� �t+        d)d�*�      d�+�       �; |j                  |� d,| j                  d-d.�      � ��       |j-                  d/�       t        j.                  �        |S )0ax  Renders a graph, highlighting nodes and edges based on the current event.

    Args:
        snapshot (Dict[str, Any]): The snapshot dictionary from the VisualizationEngine,
                                   expected to contain a 'graph' key and 'current_event_data'.
        title (str): Title for the plot.

    Returns:
        plt.Figure: A Matplotlib Figure object.
    �graphr   �	distances�	mst_edgesr   )�relax�set_distance)�weight�*   )�seed)r   �   r   r   zGraph is emptyr   r   �	lightbluei�  )�
node_color�	node_sizerL   �grayr-   )�
edge_color�widthrL   r   �bold)�	font_size�font_weightrL   r_   r   )�edge_labels�
font_colorrL   �visit�ur   )�nodelistrd   re   rL   �consider_edge�vr.   )�edgelistrg   rh   rL   �add_mst_edge�blue�   g�������?zD:�yellow)�	facecolor�alpha)�bboxr   r*   r+   r,   �off)r2   �nx�DiGraph�Graph�items�add_node�add_edge�spring_layoutr3   r4   �nodesr5   r6   r7   �draw_networkx_nodes�draw_networkx_edges�draw_networkx_labels�get_edge_attributes�draw_networkx_edge_labels�has_edge�is_directed�dict�axisrH   )r   r	   �
graph_datarJ   r[   r\   �Gro   �	neighborsrr   r_   �posrK   rL   rl   �node�distrM   �ys                      rW   �render_graphr�   F   s�  � � ���g�r�*�J����2�B�7�J����[�"�-�I����[�"�-�I� ���%9�:�>W�W��
�
��]_�]e�]e�]g�A� #�(�(�*���9�	�
�
�1��"�I�A�v��J�J�q�!�F�J�+� #� +�
 �
�
�1�2�
&�C��l�l�7�+�G�C���7�7�
����S�*��\d�pr�p|�p|��}�
���U���
� ���1�c�k�S�R�P����1�c�f�A�"�E����A�s�b�f��L��(�(��H�5�K�� � ��C�[�W�Y[�\� �|�|�(�)�W�4��~�~�c�"���1�7�7�?�B�2�2�1�c�T�F�W\�hk�pr�s�	���*�	+��	>��~�~�c�"�J�N�N�3�$7�1���:�:�a���R�3�3�A�s�q�!�f�X�Z_�gh�mo�p��:�:�a���A�M�M�O�R�5K�5K�A�s�_`�bc�^d�]e�rw�  @A�  FH�  6I�	���*�	+�~�	=��~�~�c�"�J�N�N�3�$7�1���:�:�a���R�3�3�A�s�q�!�f�X�Z`�hi�np�q��:�:�a���A�M�M�O�R�5K�5K�A�s�_`�bc�^d�]e�rx�  AB�  GI�  6J� �
���q�#�	�f�TU�Z\�]� �#�/�/�+�J�D�$��s�{��4�y���1�����1�s�7�b���K�d�X�UX�6Y�ow��x� ,�
 �L�L�E�7�)�H�L�L�1H�"�$M�#N�O�P��G�G�E�N������J�    �__main__)r   �   �   �   �   r   z#Comparing elements at index 1 and 2r-   r.   )r    r!   )r   r   r+   r   zMerge Sort Step)r   r�   r�   r�   r�   r"   z"Swapping elements at index 1 and 2zMerge Sort Step (Swap))�Br-   )�C�   ))�Ar-   )r�   r.   )�Dr�   ))r�   r�   )r�   r.   )r�   r-   )r�   r�   )r�   r-   )r�   r�   r�   r�   rn   zVisiting node Aro   r�   �inf)rZ   r   r+   r   r[   zDijkstra Steprq   z"Considering edge B-C with weight 2r�   r�   )ro   rr   r_   zDijkstra Step (Edge)rt   zAdding edge A-B to MST)r�   r�   )rZ   r   r+   r   r\   zKruskal Step (MST Edge))zArray Visualization)zGraph Visualization)�matplotlib.pyplot�pyplotr3   �networkxr|   �numpyr8   �typingr   r   r   r   r   r?   �FigurerX   r�   �__name__�array_snapshot_example�	fig_array�show�array_snapshot_swap_example�fig_array_swap�float�graph_snapshot_example�	fig_graph�graph_snapshot_edge_example�fig_graph_edge�mst_graph_snapshot_example�fig_mst_graph� r�   rW   �<module>r�      s  �� � � � 3� 3�>��S�#�X�� >�s� >�WZ�Wa�Wa� >�@D�4��S��>� D�#� D�RU�R\�R\� D�N �z�� %�'�!F�$%�A�.�	�� "�"8�:K�L�I��C�H�H�J� %�$�!E�$%�A�.�	#�� '�'B�D\�]�N��C�H�H�J�
 �H�%�/�/��H�%�	
� &�!2�"�C�j��5��<�e�E�l��u��V��� �3�_�E�I��C�H�H�J� �H�%�/�/��H�%�	
� .�!E�$'�c�Q�?��1�5��<�e�E�l�K�#�� "�"=�?U�V�N��C�H�H�J� �H�%�/�/��H�%�	
� -�!9�$'�c�Q�?� �\�"�� !�!;�=V�W�M��C�H�H�J�A r�   

================================================================================
ملف: app\visualization\__pycache__\__init__.cpython-312.pyc
================================================================================
�
    �>�h    �                    �   � y )N� r   �    �WC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\visualization\__init__.py�<module>r      s   �r   

================================================================================
ملف: app\__pycache__\__init__.cpython-312.pyc
================================================================================
�
    �>�h    �                    �   � y )N� r   �    �IC:\Applications_Projacts\pyProjacts\project_03\AlgoVisEdu\app\__init__.py�<module>r      s   �r   

================================================================================
ملف: docs\API.md
================================================================================
# AlgoVisEdu API Documentation

This document provides a detailed reference for the core APIs and data structures used in the AlgoVisEdu project, primarily focusing on the Event Schema and the Visualization Engine API.

## 1. Event Schema

The entire visualization system is driven by a sequence of `Event` objects. Each algorithm is implemented as a generator that yields these events at every meaningful operation. The `Event` dataclass is defined in `app/utils/types.py`.

### Event Dataclass

```python
from dataclasses import dataclass, field
from typing import Any, Dict

@dataclass
class Event:
    step: int
    type: str
    details: str
    data: Dict[str, Any] = field(default_factory=dict)
```

### Fields

-   **`step`** (int): A unique, monotonically increasing integer for each event. This is crucial for ordering and seeking.
-   **`type`** (str): A string identifier for the type of operation. This determines how the renderer might highlight elements.
-   **`details`** (str): A human-readable description of the event, displayed in the UI to explain the current step.
-   **`data`** (Dict[str, Any]): A dictionary containing any data relevant to the event. This is where you put indices, values, nodes, weights, and snapshots.

### Common Event Types and `data` Payloads

Below are common event types used across the implemented algorithms. When adding a new algorithm, you can reuse these or define new ones as needed.

| Event Type        | Description                                       | `data` Payload Example                                                                 |
| ----------------- | ------------------------------------------------- | -------------------------------------------------------------------------------------- |
| `snapshot`        | Provides a full snapshot of the data structure.   | `{"array_snapshot": [5, 2, 8], "graph_snapshot": {"A": [("B", 1)]}}`               |
| `compare`         | When two elements are compared.                   | `{"i": 0, "j": 1, "value_i": 5, "value_j": 2}`                                    |
| `swap`            | When two elements in an array are swapped.        | `{"i": 0, "j": 1}`                                                                  |
| `overwrite`       | When an element in an array is overwritten.       | `{"index": 2, "value": 10, "old_value": 8}`                                        |
| `set_pivot`       | When a pivot is chosen in algorithms like Quick Sort. | `{"index": 4, "value": 7}`                                                          |
| `visit`           | When a node in a graph is visited.                | `{"u": "A", "distance": 0}`                                                        |
| `consider_edge`   | When a graph edge is being considered.            | `{"u": "A", "v": "B", "weight": 5}`                                             |
| `add_mst_edge`    | When an edge is added to the Minimum Spanning Tree. | `{"u": "A", "v": "B", "weight": 5}`                                             |
| `relax`           | When a distance is updated in a shortest path algo. | `{"u": "A", "v": "B", "new_distance": 3, "old_distance": 5}`                   |
| `set_distance`    | When a distance is initially set.                 | `{"u": "A", "new_distance": 0}`                                                    |
| `found`           | When a target element is found in a search.       | `{"index": 3, "value": 42}`                                                         |
| `done`            | The final event, signaling completion.            | `{"sorted_array": [1, 2, 3], "final_distances": {"A": 0, "B": 3}}`                |

### Example Event Traces (JSON)

Here are two short example traces in JSON format, as they would be saved or loaded by the application.

#### Merge Sort Example Trace

```json
[
  {
    "step": 0,
    "type": "snapshot",
    "details": "Initial array state",
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 1,
    "type": "divide",
    "details": "Dividing array from index 0 to 2 into two halves",
    "left": 0,
    "right": 2,
    "mid": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 2,
    "type": "divide",
    "details": "Dividing array from index 0 to 1 into two halves",
    "left": 0,
    "right": 1,
    "mid": 0,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 3,
    "type": "merge_start",
    "details": "Starting merge for sub-array from 0 to 1",
    "left": 0,
    "mid": 0,
    "right": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 4,
    "type": "compare",
    "details": "Comparing elements at index 0 (3) and 1 (1)",
    "i": 0,
    "j": 1,
    "value_i": 3,
    "value_j": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 5,
    "type": "overwrite",
    "details": "Overwriting temp_arr[0] with current_arr[1] (1)",
    "index": 0,
    "value": 1,
    "source_index": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 6,
    "type": "copy_back",
    "details": "Copying temp_arr[0] (1) back to current_arr[0]",
    "index": 0,
    "value": 1,
    "array_snapshot": [
      1,
      1,
      4
    ]
  },
  {
    "step": 7,
    "type": "done",
    "details": "Merge Sort completed",
    "sorted_array": [
      1,
      3,
      4
    ]
  }
]
```

#### Dijkstra Example Trace

```json
[
  {
    "step": 0,
    "type": "snapshot",
    "details": "Initial graph state, starting from A",
    "graph_snapshot": {
      "A": [
        [
          "B",
          1
        ],
        [
          "C",
          4
        ]
      ],
      "B": [
        [
          "A",
          1
        ],
        [
          "C",
          2
        ]
      ],
      "C": [
        [
          "A",
          4
        ],
        [
          "B",
          2
        ]
      ]
    },
    "distances": {
      "A": 0,
      "B": "inf",
      "C": "inf"
    },
    "start_node": "A"
  },
  {
    "step": 1,
    "type": "visit",
    "details": "Visiting node A with distance 0",
    "u": "A",
    "distance": 0,
    "distances": {
      "A": 0,
      "B": "inf",
      "C": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          1
        ],
        [
          "C",
          4
        ]
      ],
      "B": [
        [
          "A",
          1
        ],
        [
          "C",
          2
        ]
      ],
      "C": [
        [
          "A",
          4
        ],
        [
          "B",
          2
        ]
      ]
    }
  },
  {
    "step": 2,
    "type": "consider_edge",
    "details": "Considering edge A-B with weight 1",
    "u": "A",
    "v": "B",
    "weight": 1,
    "distances": {
      "A": 0,
      "B": "inf",
      "C": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          1
        ],
        [
          "C",
          4
        ]
      ],
      "B": [
        [
          "A",
          1
        ],
        [
          "C",
          2
        ]
      ],
      "C": [
        [
          "A",
          4
        ],
        [
          "B",
          2
        ]
      ]
    }
  },
  {
    "step": 3,
    "type": "relax",
    "details": "Relaxing edge A-B. New distance to B is 1",
    "u": "A",
    "v": "B",
    "weight": 1,
    "old_distance": "inf",
    "new_distance": 1,
    "distances": {
      "A": 0,
      "B": 1,
      "C": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          1
        ],
        [
          "C",
          4
        ]
      ],
      "B": [
        [
          "A",
          1
        ],
        [
          "C",
          2
        ]
      ],
      "C": [
        [
          "A",
          4
        ],
        [
          "B",
          2
        ]
      ]
    }
  },
  {
    "step": 4,
    "type": "done",
    "details": "Dijkstra\u0027s algorithm completed",
    "final_distances": {
      "A": 0,
      "B": 1,
      "C": 3
    },
    "final_paths": {
      "A": null,
      "B": "A",
      "C": "B"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          1
        ],
        [
          "C",
          4
        ]
      ],
      "B": [
        [
          "A",
          1
        ],
        [
          "C",
          2
        ]
      ],
      "C": [
        [
          "A",
          4
        ],
        [
          "B",
          2
        ]
      ]
    }
  }
]
```

## 2. Visualization Engine API

The `VisualizationEngine` class (in `app/visualization/engine.py`) is responsible for managing the trace and providing an interface for the UI to control playback and get renderable snapshots.

### Class `VisualizationEngine`

-   **`__init__(self, trace: List[Event])`**: Initializes the engine with a full trace (list of `Event` objects).

-   **`step_count`** (property): Returns the total number of events in the trace.

-   **`current_step`** (property): Returns the `step` number of the current event.

-   **`current_event`** (property): Returns the full `Event` object at the current position.

-   **`next(self) -> Optional[Event]`**: Advances the internal pointer to the next event and returns it. Returns `None` if at the end.

-   **`prev(self) -> Optional[Event]`**: Moves the internal pointer to the previous event and returns it. Returns `None` if at the beginning.

-   **`seek(self, step_index: int) -> Event`**: Jumps to a specific event by its 0-based index in the trace list.

-   **`get_snapshot(self) -> Dict[str, Any]`**: This is a key method for rendering. It computes the state of the data structure (e.g., array or graph) at the current step. It does this by finding the most recent `snapshot` event and then re-applying all subsequent modifications up to the current event. This allows for efficient state reconstruction without storing a full copy of the data structure at every step.

-   **`get_trace_json(self) -> str`**: Serializes the entire trace into a JSON string.

-   **`from_json_trace(cls, json_trace: str) -> "VisualizationEngine"`**: A class method to create a new `VisualizationEngine` instance from a JSON trace string.



================================================================================
ملف: examples\trace_dijkstra_example.json
================================================================================
[
  {
    "step": 0,
    "type": "snapshot",
    "details": "Initial graph state, starting from A",
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    },
    "distances": {
      "A": 0,
      "B": "inf",
      "C": "inf",
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "start_node": "A"
  },
  {
    "step": 1,
    "type": "visit",
    "details": "Visiting node A with distance 0",
    "u": "A",
    "distance": 0,
    "distances": {
      "A": 0,
      "B": "inf",
      "C": "inf",
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 2,
    "type": "consider_edge",
    "details": "Considering edge A-B with weight 4",
    "u": "A",
    "v": "B",
    "weight": 4,
    "distances": {
      "A": 0,
      "B": "inf",
      "C": "inf",
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 3,
    "type": "relax",
    "details": "Relaxing edge A-B. New distance to B is 4",
    "u": "A",
    "v": "B",
    "weight": 4,
    "old_distance": "inf",
    "new_distance": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": "inf",
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 4,
    "type": "consider_edge",
    "details": "Considering edge A-C with weight 2",
    "u": "A",
    "v": "C",
    "weight": 2,
    "distances": {
      "A": 0,
      "B": 4,
      "C": "inf",
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 5,
    "type": "relax",
    "details": "Relaxing edge A-C. New distance to C is 2",
    "u": "A",
    "v": "C",
    "weight": 2,
    "old_distance": "inf",
    "new_distance": 2,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },\n  {
    "step": 6,
    "type": "visit",
    "details": "Visiting node C with distance 2",
    "u": "C",
    "distance": 2,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 7,
    "type": "consider_edge",
    "details": "Considering edge C-A with weight 2",
    "u": "C",
    "v": "A",
    "weight": 2,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 8,
    "type": "consider_edge",
    "details": "Considering edge C-D with weight 2",
    "u": "C",
    "v": "D",
    "weight": 2,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": "inf",
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 9,
    "type": "relax",
    "details": "Relaxing edge C-D. New distance to D is 4",
    "u": "C",
    "v": "D",
    "weight": 2,
    "old_distance": "inf",
    "new_distance": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 10,
    "type": "consider_edge",
    "details": "Considering edge C-F with weight 4",
    "u": "C",
    "v": "F",
    "weight": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": "inf",
      "F": "inf"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 11,
    "type": "relax",
    "details": "Relaxing edge C-F. New distance to F is 6",
    "u": "C",
    "v": "F",
    "weight": 4,
    "old_distance": "inf",
    "new_distance": 6,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": "inf",
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 12,
    "type": "visit",
    "details": "Visiting node B with distance 4",
    "u": "B",
    "distance": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": "inf",
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 13,
    "type": "consider_edge",
    "details": "Considering edge B-A with weight 4",
    "u": "B",
    "v": "A",
    "weight": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": "inf",
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 14,
    "type": "consider_edge",
    "details": "Considering edge B-E with weight 3",
    "u": "B",
    "v": "E",
    "weight": 3,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": "inf",
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 15,
    "type": "relax",
    "details": "Relaxing edge B-E. New distance to E is 7",
    "u": "B",
    "v": "E",
    "weight": 3,
    "old_distance": "inf",
    "new_distance": 7,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 16,
    "type": "visit",
    "details": "Visiting node D with distance 4",
    "u": "D",
    "distance": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 17,
    "type": "consider_edge",
    "details": "Considering edge D-C with weight 2",
    "u": "D",
    "v": "C",
    "weight": 2,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 18,
    "type": "consider_edge",
    "details": "Considering edge D-E with weight 3",
    "u": "D",
    "v": "E",
    "weight": 3,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 19,
    "type": "relax",
    "details": "Relaxing edge D-E. New distance to E is 7",
    "u": "D",
    "v": "E",
    "weight": 3,
    "old_distance": 7,
    "new_distance": 7,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 20,
    "type": "visit",
    "details": "Visiting node F with distance 6",
    "u": "F",
    "distance": 6,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 21,
    "type": "consider_edge",
    "details": "Considering edge F-C with weight 4",
    "u": "F",
    "v": "C",
    "weight": 4,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 22,
    "type": "consider_edge",
    "details": "Considering edge F-E with weight 1",
    "u": "F",
    "v": "E",
    "weight": 1,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 23,
    "type": "relax",
    "details": "Relaxing edge F-E. New distance to E is 7",
    "u": "F",
    "v": "E",
    "weight": 1,
    "old_distance": 7,
    "new_distance": 7,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 24,
    "type": "visit",
    "details": "Visiting node E with distance 7",
    "u": "E",
    "distance": 7,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 25,
    "type": "consider_edge",
    "details": "Considering edge E-B with weight 3",
    "u": "E",
    "v": "B",
    "weight": 3,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 26,
    "type": "consider_edge",
    "details": "Considering edge E-D with weight 3",
    "u": "E",
    "v": "D",
    "weight": 3,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 27,
    "type": "consider_edge",
    "details": "Considering edge E-F with weight 1",
    "u": "E",
    "v": "F",
    "weight": 1,
    "distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 7,
      "F": 6
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  },
  {
    "step": 28,
    "type": "done",
    "details": "Dijkstra\u0027s algorithm completed",
    "final_distances": {
      "A": 0,
      "B": 4,
      "C": 2,
      "D": 4,
      "E": 5,
      "F": 3
    },
    "final_paths": {
      "A": null,
      "B": "A",
      "C": "A",
      "D": "C",
      "E": "F",
      "F": "E"
    },
    "graph_snapshot": {
      "A": [
        [
          "B",
          4
        ],
        [
          "C",
          2
        ]
      ],
      "B": [
        [
          "A",
          4
        ],
        [
          "E",
          3
        ]
      ],
      "C": [
        [
          "A",
          2
        ],
        [
          "D",
          2
        ],
        [
          "F",
          4
        ]
      ],
      "D": [
        [
          "C",
          2
        ],
        [
          "E",
          3
        ]
      ],
      "E": [
        [
          "B",
          3
        ],
        [
          "D",
          3
        ],
        [
          "F",
          1
        ]
      ],
      "F": [
        [
          "C",
          4
        ],
        [
          "E",
          1
        ]
      ]
    }
  }
]



================================================================================
ملف: examples\trace_merge_sort_example.json
================================================================================
[
  {
    "step": 0,
    "type": "snapshot",
    "details": "Initial array state",
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 1,
    "type": "divide",
    "details": "Dividing array from index 0 to 2 into two halves",
    "left": 0,
    "right": 2,
    "mid": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 2,
    "type": "divide",
    "details": "Dividing array from index 0 to 1 into two halves",
    "left": 0,
    "right": 1,
    "mid": 0,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 3,
    "type": "merge_start",
    "details": "Starting merge for sub-array from 0 to 1",
    "left": 0,
    "mid": 0,
    "right": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 4,
    "type": "compare",
    "details": "Comparing elements at index 0 (3) and 1 (1)",
    "i": 0,
    "j": 1,
    "value_i": 3,
    "value_j": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 5,
    "type": "overwrite",
    "details": "Overwriting temp_arr[0] with current_arr[1] (1)",
    "index": 0,
    "value": 1,
    "source_index": 1,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 6,
    "type": "overwrite",
    "details": "Overwriting temp_arr[1] with current_arr[0] (3)",
    "index": 1,
    "value": 3,
    "source_index": 0,
    "array_snapshot": [
      3,
      1,
      4
    ]
  },
  {
    "step": 7,
    "type": "copy_back",
    "details": "Copying temp_arr[0] (1) back to current_arr[0]",
    "index": 0,
    "value": 1,
    "array_snapshot": [
      1,
      1,
      4
    ]
  },
  {
    "step": 8,
    "type": "copy_back",
    "details": "Copying temp_arr[1] (3) back to current_arr[1]",
    "index": 1,
    "value": 3,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 9,
    "type": "merge_end",
    "details": "Finished merging sub-array from 0 to 1",
    "left": 0,
    "mid": 0,
    "right": 1,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 10,
    "type": "merge_start",
    "details": "Starting merge for sub-array from 0 to 2",
    "left": 0,
    "mid": 1,
    "right": 2,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 11,
    "type": "compare",
    "details": "Comparing elements at index 0 (1) and 2 (4)",
    "i": 0,
    "j": 2,
    "value_i": 1,
    "value_j": 4,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 12,
    "type": "overwrite",
    "details": "Overwriting temp_arr[0] with current_arr[0] (1)",
    "index": 0,
    "value": 1,
    "source_index": 0,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 13,
    "type": "copy_back",
    "details": "Copying temp_arr[0] (1) back to current_arr[0]",
    "index": 0,
    "value": 1,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 14,
    "type": "copy_back",
    "details": "Copying temp_arr[1] (3) back to current_arr[1]",
    "index": 1,
    "value": 3,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 15,
    "type": "copy_back",
    "details": "Copying temp_arr[2] (4) back to current_arr[2]",
    "index": 2,
    "value": 4,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 16,
    "type": "merge_end",
    "details": "Finished merging sub-array from 0 to 2",
    "left": 0,
    "mid": 1,
    "right": 2,
    "array_snapshot": [
      1,
      3,
      4
    ]
  },
  {
    "step": 17,
    "type": "done",
    "details": "Merge Sort completed",
    "sorted_array": [
      1,
      3,
      4
    ]
  }
]



================================================================================
ملف: sample_data\sample_array.txt
================================================================================
38,27,43,3,9,82,10


================================================================================
ملف: sample_data\sample_graph.json
================================================================================
{
  "A": [["B", 4], ["C", 2]],
  "B": [["A", 4], ["E", 3]],
  "C": [["A", 2], ["D", 2], ["F", 4]],
  "D": [["C", 2], ["E", 3]],
  "E": [["B", 3], ["D", 3], ["F", 1]],
  "F": [["C", 4], ["E", 1]]
}


================================================================================
ملف: tests\conftest.py
================================================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))



================================================================================
ملف: tests\test_dijkstra.py
================================================================================
import pytest
from app.algorithms.dijkstra import dijkstra_generator
from app.utils.types import Event, Graph

def test_dijkstra_basic_graph():
    """Test Dijkstra's algorithm on a basic connected graph."""
    graph = {
        'A': [('B', 1), ('C', 4)],
        'B': [('A', 1), ('C', 2), ('D', 5)],
        'C': [('A', 4), ('B', 2), ('D', 1)],
        'D': [('B', 5), ('C', 1)]
    }
    start_node = 'A'
    expected_distances = {'A': 0, 'B': 1, 'C': 3, 'D': 4}

    events = list(dijkstra_generator(graph, start_node))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "final_distances" in final_event.data

    actual_distances = {k: v for k, v in final_event.data["final_distances"].items() if v != 'inf'}
    assert actual_distances == expected_distances

def test_dijkstra_unreachable_nodes():
    """Test Dijkstra's with unreachable nodes."""
    graph = {
        'A': [('B', 1)],
        'B': [('A', 1)],
        'C': [('D', 1)],
        'D': [('C', 1)]
    }
    start_node = 'A'
    expected_distances = {'A': 0, 'B': 1, 'C': 'inf', 'D': 'inf'}

    events = list(dijkstra_generator(graph, start_node))

    final_event = events[-1]
    assert final_event.type == "done"
    assert final_event.data["final_distances"] == expected_distances

def test_dijkstra_negative_weights():
    """Test Dijkstra's algorithm with negative weights (should abort)."""
    graph = {
        'A': [('B', -1)],
        'B': [('C', 2)],
        'C': []
    }
    start_node = 'A'

    events = list(dijkstra_generator(graph, start_node))

    assert any(e.type == "error" for e in events)
    final_event = events[-1]
    assert final_event.type == "done"
    assert "aborted due to negative weights" in final_event.details

def test_dijkstra_empty_graph():
    """Test Dijkstra's algorithm on an empty graph."""
    graph = {}
    # For an empty graph, start_node 'A' is not present, so the generator should handle this gracefully.
    # The current implementation of dijkstra_generator will initialize distances as {} if graph is {}.
    # It will then attempt distances[start_node] = 0, which would raise a KeyError if start_node is not in graph.
    # Let's adjust the test to reflect the expected behavior of an empty graph with a non-existent start_node.
    # If the graph is empty, the generator should yield an empty final_distances.
    start_node = 'A'
    events = list(dijkstra_generator(graph, start_node))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert final_event.details == "Dijkstra's algorithm aborted due to invalid start node or empty graph."
    assert final_event.data == {}

def test_dijkstra_single_node_graph():
    """Test Dijkstra's algorithm on a graph with a single node."""
    graph = {"A": []}
    start_node = 'A'
    expected_distances = {'A': 0}

    events = list(dijkstra_generator(graph, start_node))

    final_event = events[-1]
    assert final_event.type == "done"
    assert final_event.data["final_distances"] == expected_distances

def test_dijkstra_all_events_conform_schema():
    """Test that all events generated by Dijkstra's conform to the schema."""
    graph = {
        'A': [('B', 1)],
        'B': [('C', 2)],
        'C': []
    }
    start_node = 'A'
    events = list(dijkstra_generator(graph, start_node))

    for event in events:
        assert isinstance(event, Event)
        assert isinstance(event.step, int)
        assert isinstance(event.type, str)
        assert isinstance(event.details, str)
        assert isinstance(event.data, dict)



================================================================================
ملف: tests\test_kruskal.py
================================================================================
import pytest
from app.algorithms.kruskal import kruskal_generator
from app.utils.types import Event, Graph

def test_kruskal_basic_graph():
    """Test Kruskal's algorithm on a basic connected graph."""
    graph = {
        "A": [("B", 1), ("C", 4)],
        "B": [("A", 1), ("C", 2), ("D", 5)],
        "C": [("A", 4), ("B", 2), ("D", 1)],
        "D": [("B", 5), ("C", 1)]
    }
    expected_mst_edges = {frozenset(("A", "B")), frozenset(("C", "D")), frozenset(("B", "C"))}

    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data

    actual_mst_edges_set = {frozenset(edge) for edge in final_event.data["mst_edges"]}
    assert actual_mst_edges_set == expected_mst_edges

def test_kruskal_disconnected_graph():
    """Test Kruskal's algorithm on a disconnected graph."""
    graph = {
        "A": [("B", 1)],
        "B": [("A", 1)],
        "C": [("D", 2)],
        "D": [("C", 2)]
    }
    expected_mst_edges = {frozenset(("A", "B")), frozenset(("C", "D"))}

    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data

    actual_mst_edges_set = {frozenset(edge) for edge in final_event.data["mst_edges"]}
    assert actual_mst_edges_set == expected_mst_edges

def test_kruskal_empty_graph():
    """Test Kruskal's algorithm on an empty graph."""
    graph = {}
    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data
    assert final_event.data["mst_edges"] == []

def test_kruskal_single_node_graph():
    """Test Kruskal's algorithm on a graph with a single node."""
    graph = {"A": []}
    events = list(kruskal_generator(graph))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert "mst_edges" in final_event.data
    assert final_event.data["mst_edges"] == []

def test_kruskal_all_events_conform_schema():
    """Test that all events generated by Kruskal's conform to the schema."""
    graph = {
        "A": [("B", 1)],
        "B": [("A", 1), ("C", 2)],
        "C": [("B", 2)]
    }
    events = list(kruskal_generator(graph))

    for event in events:
        assert isinstance(event, Event)
        assert isinstance(event.step, int)
        assert isinstance(event.type, str)
        assert isinstance(event.details, str)
        assert isinstance(event.data, dict)



================================================================================
ملف: tests\test_linear_search.py
================================================================================
import pytest
from app.algorithms.linear_search import linear_search_generator
from app.utils.types import Event

def test_linear_search_found():
    """Test linear search when the target is found."""
    arr = [10, 20, 30, 40, 50]
    target = 30
    events = list(linear_search_generator(list(arr), target))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert final_event.data["found"] is True

    found_event = next((e for e in events if e.type == "found"), None)
    assert found_event is not None
    assert found_event.data["target"] == target
    assert found_event.data["index"] == 2

def test_linear_search_not_found():
    """Test linear search when the target is not found."""
    arr = [10, 20, 30, 40, 50]
    target = 60
    events = list(linear_search_generator(list(arr), target))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert final_event.data["found"] is False

    not_found_event = next((e for e in events if e.type == "not_found"), None)
    assert not_found_event is not None
    assert not_found_event.data["target"] == target

def test_linear_search_empty_array():
    """Test linear search with an empty array."""
    arr = []
    target = 10
    events = list(linear_search_generator(list(arr), target))

    assert len(events) > 0
    final_event = events[-1]
    assert final_event.type == "done"
    assert final_event.data["found"] is False

def test_linear_search_first_element():
    """Test linear search when the target is the first element."""
    arr = [10, 20, 30]
    target = 10
    events = list(linear_search_generator(list(arr), target))

    found_event = next((e for e in events if e.type == "found"), None)
    assert found_event.data["index"] == 0

def test_linear_search_last_element():
    """Test linear search when the target is the last element."""
    arr = [10, 20, 30]
    target = 30
    events = list(linear_search_generator(list(arr), target))

    found_event = next((e for e in events if e.type == "found"), None)
    assert found_event.data["index"] == 2

def test_linear_search_duplicate_elements():
    """Test linear search with duplicate elements, should find the first occurrence."""
    arr = [10, 20, 30, 20, 40]
    target = 20
    events = list(linear_search_generator(list(arr), target))

    found_event = next((e for e in events if e.type == "found"), None)
    assert found_event.data["index"] == 1



================================================================================
ملف: tests\test_merge_sort.py
================================================================================
import pytest
from app.algorithms.merge_sort import merge_sort_generator
from app.utils.types import Event, Array

def test_merge_sort_basic():
    """Test merge sort with a basic array."""
    arr = [38, 27, 43, 3, 9, 82, 10]
    expected_sorted_arr = sorted(arr)
    events = list(merge_sort_generator(list(arr))) # Pass a copy to avoid modification issues

    assert len(events) > 0, "No events were generated."

    # Check if the last event is 'done' and contains the sorted array
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

    # Verify event schema conformance (implicitly checked by Event dataclass usage)
    for event in events:
        assert isinstance(event, Event)
        assert isinstance(event.step, int)
        assert isinstance(event.type, str)
        assert isinstance(event.details, str)
        assert isinstance(event.data, dict)

def test_merge_sort_empty_array():
    """Test merge sort with an empty array."""
    arr = []
    expected_sorted_arr = []
    events = list(merge_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for empty array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_merge_sort_single_element_array():
    """Test merge sort with a single-element array."""
    arr = [5]
    expected_sorted_arr = [5]
    events = list(merge_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for single element array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_merge_sort_already_sorted_array():
    """Test merge sort with an already sorted array."""
    arr = [1, 2, 3, 4, 5]
    expected_sorted_arr = [1, 2, 3, 4, 5]
    events = list(merge_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for sorted array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_merge_sort_reverse_sorted_array():
    """Test merge sort with a reverse sorted array."""
    arr = [5, 4, 3, 2, 1]
    expected_sorted_arr = [1, 2, 3, 4, 5]
    events = list(merge_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for reverse sorted array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_merge_sort_duplicate_elements():
    """Test merge sort with an array containing duplicate elements."""
    arr = [3, 1, 4, 1, 5, 9, 2, 6]
    expected_sorted_arr = sorted(arr)
    events = list(merge_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for array with duplicates."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr



================================================================================
ملف: tests\test_quick_sort.py
================================================================================
import pytest
from app.algorithms.quick_sort import quick_sort_generator
from app.utils.types import Event, Array

def test_quick_sort_basic():
    """Test quick sort with a basic array."""
    arr = [10, 7, 8, 9, 1, 5]
    expected_sorted_arr = sorted(arr)
    events = list(quick_sort_generator(list(arr))) # Pass a copy

    assert len(events) > 0, "No events were generated."

    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

    for event in events:
        assert isinstance(event, Event)
        assert isinstance(event.step, int)
        assert isinstance(event.type, str)
        assert isinstance(event.details, str)
        assert isinstance(event.data, dict)

def test_quick_sort_empty_array():
    """Test quick sort with an empty array."""
    arr = []
    expected_sorted_arr = []
    events = list(quick_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for empty array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_quick_sort_single_element_array():
    """Test quick sort with a single-element array."""
    arr = [5]
    expected_sorted_arr = [5]
    events = list(quick_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for single element array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_quick_sort_already_sorted_array():
    """Test quick sort with an already sorted array."""
    arr = [1, 2, 3, 4, 5]
    expected_sorted_arr = [1, 2, 3, 4, 5]
    events = list(quick_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for sorted array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_quick_sort_reverse_sorted_array():
    """Test quick sort with a reverse sorted array."""
    arr = [5, 4, 3, 2, 1]
    expected_sorted_arr = [1, 2, 3, 4, 5]
    events = list(quick_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for reverse sorted array."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr

def test_quick_sort_duplicate_elements():
    """Test quick sort with an array containing duplicate elements."""
    arr = [3, 1, 4, 1, 5, 9, 2, 6]
    expected_sorted_arr = sorted(arr)
    events = list(quick_sort_generator(list(arr)))

    assert len(events) > 0, "No events were generated for array with duplicates."
    final_event = events[-1]
    assert final_event.type == "done"
    assert "sorted_array" in final_event.data
    assert final_event.data["sorted_array"] == expected_sorted_arr



================================================================================
ملف: tests\test_streamlit_app.py
================================================================================
import subprocess
import sys
import pytest

def test_streamlit_app_smoke_test():
    """Runs a smoke test on the Streamlit app to check for import/run errors."""
    # Use subprocess to run the Streamlit app in a non-interactive way
    # We expect it to start without immediate errors, then terminate.
    # This is a basic check that all imports resolve and the app can initialize.
    command = [
        sys.executable, "-m", "streamlit", "run",
        "app/ui/streamlit_app.py",
        "--server.headless", "true", # Run in headless mode
        "--server.port", "8502", # Use a different port to avoid conflicts
        "--browser.gatherUsageStats", "false", # Disable usage stats
    ]

    process = None
    try:
        # Start the Streamlit app as a subprocess
        # We capture stdout and stderr to check for errors
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Give it a few seconds to start up and potentially crash
        # If it runs for this duration without error, we assume it started successfully.
        # A real integration test might involve more complex interaction.
        stdout, stderr = process.communicate(timeout=10)

        # Check for common error indicators in stderr or stdout
        assert "Error" not in stderr and "Traceback" not in stderr, \
            f"Streamlit app encountered an error during startup: {stderr}"
        assert "Error" not in stdout and "Traceback" not in stdout, \
            f"Streamlit app printed an error during startup: {stdout}"

        # If the process is still running after communicate with timeout, it means it didn't exit cleanly
        # For a smoke test, we expect it to exit after initialization if no user interaction.
        # However, Streamlit apps typically run indefinitely until killed. So, we just check for errors.
        # If it reaches here, it means no immediate crash.
        print("Streamlit app smoke test passed: No immediate errors on startup.")

    except subprocess.TimeoutExpired:
        print("Streamlit app process timed out, which is expected for a running server. Checking output...")
        # If it timed out, it means it was running. We can still check stderr/stdout if needed.
        if process:
            process.kill()
            stdout, stderr = process.communicate()
            assert "Error" not in stderr and "Traceback" not in stderr, \
                f"Streamlit app encountered an error during timeout: {stderr}"
            assert "Error" not in stdout and "Traceback" not in stdout, \
                f"Streamlit app printed an error during timeout: {stdout}"
            print("Streamlit app smoke test passed after timeout: No errors detected.")

    except Exception as e:
        if process:
            process.kill()
            stdout, stderr = process.communicate()
            print(f"Streamlit app stdout: {stdout}")
            print(f"Streamlit app stderr: {stderr}")
        pytest.fail(f"An unexpected error occurred during Streamlit app smoke test: {e}")

    finally:
        if process and process.poll() is None: # If process is still running
            process.kill()
            process.wait() # Wait for it to terminate


# To run this test:
# 1. Ensure you have `streamlit` and `pytest` installed.
# 2. Navigate to the AlgoVisEdu project root.
# 3. Run `pytest tests/test_streamlit_app.py`



================================================================================
ملف: tests\__pycache__\conftest.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    e�hi   �            
       ��   � d dl Zd dlmc mZ d dlZd dlZej        �	                    d ej        �
                    ej        �                    ej        �                    e�  �        d�  �        �  �        �  �         dS )�    Nz..)�builtins�@py_builtins�_pytest.assertion.rewrite�	assertion�rewrite�
@pytest_ar�sys�os�path�insert�abspath�join�dirname�__file__� �    �4/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/conftest.py�<module>r      sy   ��  � � � � � � � � � � � � �
�
�
�
� 	�	�	�	� �����2�7�?�?�2�7�<�<������0I�0I�4�#P�#P�Q�Q� R� R� R� R� Rr   

================================================================================
ملف: tests\__pycache__\test_dijkstra.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    �e�h$  �                   �h   � d dl Zd dlmc mZ d dlZd dlmZ d dl	m
Z
mZ d� Zd� Zd� Zd� Zd� Zd	� ZdS )
�    N)�dijkstra_generator)�Event�Graphc                  �  � ddgg d�g d�ddgd�} d}d	d
ddd�}t          t          | |�  �        �  �        }t          |�  �        }d	}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}x}}|d         }	|	j        }
d}|
|k    }|s�t          j        d|fd|
|f�  �        dt          j        �   �         v st          j        |	�  �        rt          j        |	�  �        ndt          j        |
�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}
x}}d}|	j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |	�  �        rt          j        |	�  �        ndt          j        |�  �        d �z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}x}}d!� |	j        d         �                    �   �         D �   �         }||k    }
|
s�t          j        d|
fd"||f�  �        d#t          j        �   �         v st          j        |�  �        rt          j        |�  �        nd#d$t          j        �   �         v st          j        |�  �        rt          j        |�  �        nd$d%�z  }d&d'|iz  }t          t          j
        |�  �        �  �        �d}
dS )(z5Test Dijkstra's algorithm on a basic connected graph.��B�   )�C�   )��Ar	   �r
   �   )�D�   ))r   r   )r   r   �r   r	   )r   r   �r
   r	   �r   r   r
   r   r   r   r	   �   r   ��>�z/%(py3)s
{%(py3)s = %(py0)s(%(py1)s)
} > %(py6)s�len�events��py0�py1�py3�py6�assert %(py8)s�py8N������done��==�z,%(py2)s
{%(py2)s = %(py0)s.type
} == %(py5)s�final_event�r   �py2�py5�assert %(py7)s�py7�final_distances��in)z,%(py1)s in %(py5)s
{%(py5)s = %(py3)s.data
}�r   r   r*   c                 �&   � i | ]\  }}|d k    �||��S )�inf� )�.0�k�vs      �9/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/test_dijkstra.py�
<dictcomp>z-test_dijkstra_basic_graph.<locals>.<dictcomp>   s*   � �c�c�c���A�XY�]b�Xb�c��1�c�c�c�    )z%(py0)s == %(py2)s�actual_distances�expected_distances)r   r)   zassert %(py4)s�py4)�listr   r   �
@pytest_ar�_call_reprcompare�@py_builtins�locals�_should_repr_global_name�	_saferepr�AssertionError�_format_explanation�type�data�items)�graph�
start_noder;   r   �@py_assert2�@py_assert5�@py_assert4�@py_format7�@py_format9r'   �@py_assert1�@py_assert3�@py_format6�@py_format8�@py_assert0r:   �@py_format3�@py_format5s                     r7   �test_dijkstra_basic_graphrW      sd  � � ��!�+�+�+�+�+�+���!�	� �E� �J� �q�q�q�9�9���$�U�J�7�7�8�8�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��0�� 0�0�� 0�0�0�0�0�0�0�0�0�0�0�� 0�0�0�0�0�0��0�0�0�0�0�0�0�0�0�0�0��0�0�0�0�0��0�0�0�0�0�0� 0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�0�c�c��)9�:K�)L�)R�)R�)T�)T�c�c�c���1�1�1�1�1�1�1�1�1�1�1��1�1�1�1�1�1�1�1�1�1�1�1�1��1�1�1�1�1��1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1r9   c                  �Z  � dgdgdgdgd�} d}ddd	d	d�}t          t          | |�  �        �  �        }|d
         }|j        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd|iz  }	t          t          j
        |	�  �        �  �        �dx}x}}|j        d         }
|
|k    }|s�t          j        d|fd|
|f�  �        t          j        |
�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}
}dS )z'Test Dijkstra's with unreachable nodes.r   r   r   r   r   r   r   r	   r2   r"   r#   r$   r&   r'   r(   r+   r,   Nr-   �z%(py1)s == %(py3)sr;   �r   r   �assert %(py5)sr*   �r=   r   rF   r>   r?   r@   rA   rB   rC   rD   rE   rG   �rI   rJ   r;   r   r'   rP   rM   rQ   rR   rS   rT   rK   �@py_format4s                r7   �test_dijkstra_unreachable_nodesr_      s  � � �Z��Z��Z��Z�	� �E� �J� �q�u�5�A�A���$�U�J�7�7�8�8�F���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%���-�.�D�.�2D�D�D�D�D�D�D�D�D�D�D�.�2D�D�D�D�D�D�.�D�D�D�D�D�D�D�D�D�D�D�2D�D�D�D�D�D�2D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�Dr9   c                  ��  � dgdgg d�} d}t          t          | |�  �        �  �        }d� |D �   �         }t          |�  �        }|s�ddt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          t          j	        |�  �        �  �        �d	x}}|d
         }|j
        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd|iz  }	t          t          j	        |	�  �        �  �        �d	x}x}}d}
|j        }|
|v }|s�t          j        d|fd|
|f�  �        t          j        |
�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }	t          t          j	        |	�  �        �  �        �d	x}
x}}d	S )z?Test Dijkstra's algorithm with negative weights (should abort).)r   r"   r   �r   r   r
   r   c              3   �,   K  � | ]}|j         d k    V � �dS )�errorN)rF   )r4   �es     r7   �	<genexpr>z1test_dijkstra_negative_weights.<locals>.<genexpr>6   s)   � � � �1�1�Q�q�v�� �1�1�1�1�1�1r9   z,assert %(py4)s
{%(py4)s = %(py0)s(%(py2)s)
}�any)r   r)   r<   Nr"   r#   r$   r&   r'   r(   r+   r,   zaborted due to negative weightsr.   )z/%(py1)s in %(py5)s
{%(py5)s = %(py3)s.details
}r0   )r=   r   rf   r@   rA   r>   rB   rC   rD   rE   rF   r?   �details)rI   rJ   r   rP   rQ   rV   r'   rM   rR   rS   rT   rK   s               r7   �test_dijkstra_negative_weightsrh   +   s�  � � �[��Z��� �E�
 �J��$�U�J�7�7�8�8�F�1�1�&�1�1�1�1�3�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�3�1�1�1�1�1�3�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1�1���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�,�C��0C�C�,�0C�C�C�C�C�C�C�C�C�C�C�,�0C�C�C�C�C�C�,�C�C�C�C�C�C�C�C�C�C�C��C�C�C�C�C��C�C�C�C�C�C�0C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�C�Cr9   c                  �   � i } d}t          t          | |�  �        �  �        }t          |�  �        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd	|iz  }t          t          j
        |�  �        �  �        �d
x}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d
x}	x}
}|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d
x}	x}
}|j        }	i }|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d
x}	x}
}d
S )z,Test Dijkstra's algorithm on an empty graph.r   r   r   r   r   r   r   r    r!   Nr"   r#   r$   r&   r'   r(   r+   r,   zFDijkstra's algorithm aborted due to invalid start node or empty graph.)z/%(py2)s
{%(py2)s = %(py0)s.details
} == %(py5)s)z,%(py2)s
{%(py2)s = %(py0)s.data
} == %(py5)s)r=   r   r   r>   r?   r@   rA   rB   rC   rD   rE   rF   rg   rG   )rI   rJ   r   rK   rL   rM   rN   rO   r'   rP   rQ   rR   rS   s                r7   �test_dijkstra_empty_graphrj   ;   s�  � ��E� �J��$�U�J�7�7�8�8�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%���j�"j�j��"j�j�j�j�j�j�j�j�j�j�j��"j�j�j�j�j�j�j�j�j�j�j�j�j�;�j�j�j�j�j�;�j�j�j�j�j�j��j�j�j�j�"j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j�j���!�r�!��r�!�!�!�!�!�!�!�!�!�!��r�!�!�!�!�!�!�!�!�!�!�!�!�;�!�!�!�!�!�;�!�!�!�!�!�!��!�!�!�!�r�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!�!r9   c                  �F  � dg i} d}ddi}t          t          | |�  �        �  �        }|d         }|j        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }d	d
|iz  }	t          t          j
        |	�  �        �  �        �dx}x}}|j        d         }
|
|k    }|s�t          j        d|fd|
|f�  �        t          j        |
�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}
}dS )z8Test Dijkstra's algorithm on a graph with a single node.r   r   r"   r#   r$   r&   r'   r(   r+   r,   Nr-   rY   r;   rZ   r[   r*   r\   r]   s                r7   �test_dijkstra_single_node_graphrl   L   s�  � ��"�I�E��J��q����$�U�J�7�7�8�8�F���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%���-�.�D�.�2D�D�D�D�D�D�D�D�D�D�D�.�2D�D�D�D�D�D�.�D�D�D�D�D�D�D�D�D�D�D�2D�D�D�D�D�D�2D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�D�Dr9   c            	      �  � dgdgg d�} d}t          t          | |�  �        �  �        }|D �]}t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        nddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d	�z  }t          t          j
        |�  �        �  �        �d
}|j        }t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �d
x}}|j        }t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �d
x}}|j        }t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �d
x}}|j        }t          |t"          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t"          �  �        rt          j        t"          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �d
x}}��d
S )zCTest that all events generated by Dijkstra's conform to the schema.r   r   ra   r   z5assert %(py4)s
{%(py4)s = %(py0)s(%(py1)s, %(py2)s)
}�
isinstance�eventr   )r   r   r)   r<   NzOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.step
}, %(py4)s)
}�int)r   r   r   r<   r   zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.type
}, %(py4)s)
}�strzRassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.details
}, %(py4)s)
}zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.data
}, %(py4)s)
}�dict)r=   r   rn   r   r@   rA   r>   rB   rC   rD   rE   �steprp   rF   rq   rg   rG   rr   )	rI   rJ   r   ro   rQ   rV   rK   rL   rN   s	            r7   �'test_dijkstra_all_events_conform_schemart   X   s�  � � �Z��Z��� �E�
 �J��$�U�J�7�7�8�8�F�� ,� ,���%��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�z�'�'�'�'�'�z�'�'�'�'�'�'�'�'�'�'�'�'�'�%�'�'�'�'�'�%�'�'�'�'�'�'�'�'�'�'�'�'�'��'�'�'�'�'��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��-�-�z�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�z�-�-�-�-�-�z�-�-�-�-�-�-�-�-�-�-�-�-�-�%�-�-�-�-�-�%�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��-�-�-�-�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��*�+�z�*�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�z�+�+�+�+�+�z�+�+�+�+�+�+�+�+�+�+�+�+�+�%�+�+�+�+�+�%�+�+�+�+�+�+�*�+�+�+�+�+�+�+�+�+�+�+�d�+�+�+�+�+�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�,� ,r9   )�builtinsr@   �_pytest.assertion.rewrite�	assertion�rewriter>   �pytest�app.algorithms.dijkstrar   �app.utils.typesr   r   rW   r_   rh   rj   rl   rt   r3   r9   r7   �<module>r|      s�   ��  � � � � � � � � � � � � ����� 6� 6� 6� 6� 6� 6� (� (� (� (� (� (� (� (�2� 2� 2�*E� E� E�"D� D� D� "� "� "�"
E� 
E� 
E�,� ,� ,� ,� ,r9   

================================================================================
ملف: tests\__pycache__\test_kruskal.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    �e�h=
  �                   �b   � d dl Zd dlmc mZ d dlZd dlmZ d dl	m
Z
mZ d� Zd� Zd� Zd� Zd� ZdS )	�    N)�kruskal_generator)�Event�Graphc                  �  � ddgg d�g d�ddgd�} t          d�  �        t          d	�  �        t          d
�  �        h}t          t          | �  �        �  �        }t          |�  �        }d}||k    }|s�t	          j        d|fd||f�  �        dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t	          j        d|
fd|	|f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |	�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}d � |j        d         D �   �         }||k    }	|	s�t	          j        d|	fd!||f�  �        d"t          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        nd"d#t          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        nd#d$�z  }d%d&|iz  }t          t	          j        |�  �        �  �        �d}	dS )'z4Test Kruskal's algorithm on a basic connected graph.��B�   )�C�   )��Ar	   �r
   �   )�D�   ))r   r   �r   r   )r   r	   )r   r   )r
   r	   �r   r   r
   r   �r   r   �r
   r   )r   r
   r   ��>�z/%(py3)s
{%(py3)s = %(py0)s(%(py1)s)
} > %(py6)s�len�events��py0�py1�py3�py6�assert %(py8)s�py8N������done��==�z,%(py2)s
{%(py2)s = %(py0)s.type
} == %(py5)s�final_event�r   �py2�py5�assert %(py7)s�py7�	mst_edges��in�z,%(py1)s in %(py5)s
{%(py5)s = %(py3)s.data
}�r   r   r*   c                 �,   � h | ]}t          |�  �        ��S � ��	frozenset��.0�edges     �8/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/test_kruskal.py�	<setcomp>z+test_kruskal_basic_graph.<locals>.<setcomp>   �   � �V�V�V��I�d�O�O�V�V�V�    �z%(py0)s == %(py2)s�actual_mst_edges_set�expected_mst_edges�r   r)   �assert %(py4)s�py4�r5   �listr   r   �
@pytest_ar�_call_reprcompare�@py_builtins�locals�_should_repr_global_name�	_saferepr�AssertionError�_format_explanation�type�data��graphr?   r   �@py_assert2�@py_assert5�@py_assert4�@py_format7�@py_format9r'   �@py_assert1�@py_assert3�@py_format6�@py_format8�@py_assert0r>   �@py_format3�@py_format5s                    r9   �test_kruskal_basic_graphr]      sa  � � ��!�+�+�+�+�+�+���!�	� �E� $�J�/�/��:�1F�1F�	�R\�H]�H]�^���#�E�*�*�+�+�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��*�+�*�*�;�*�*�*�*�*�*�*�*�*�*�*�;�*�*�*�*�*�*�;�*�*�*�*�*�*�*�*�*�*�*�+�*�*�*�*�*�+�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�V�V��8H��8U�V�V�V���#5�5�5�5�5�5�5�5�5�5�5��#5�5�5�5�5�5�5�5�5�5�5�5�5��5�5�5�5�5��5�5�5�5�5�5�5�5�5�5�5�5�5�#5�5�5�5�5�5�#5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5r<   c                  �  � dgdgdgdgd�} t          d�  �        t          d�  �        h}t          t          | �  �        �  �        }t          |�  �        }d}||k    }|s�t	          j        d	|fd
||f�  �        dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t	          j        d|
fd|	|f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |	�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}d� |j        d         D �   �         }||k    }	|	s�t	          j        d|	fd||f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd t          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        nd d!�z  }d"d#|iz  }t          t	          j        |�  �        �  �        �d}	dS )$z1Test Kruskal's algorithm on a disconnected graph.r   r   )r   r   r   r   r   r   r   r   r   r   r   r   r    r!   Nr"   r#   r$   r&   r'   r(   r+   r,   r-   r.   r0   r1   c                 �,   � h | ]}t          |�  �        ��S r3   r4   r6   s     r9   r:   z2test_kruskal_disconnected_graph.<locals>.<setcomp>*   r;   r<   r=   r>   r?   r@   rA   rB   rC   rO   s                    r9   �test_kruskal_disconnected_graphr`      sH  � � �Z��Z��Z��Z�	� �E� $�J�/�/��:�1F�1F�G���#�E�*�*�+�+�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��*�+�*�*�;�*�*�*�*�*�*�*�*�*�*�*�;�*�*�*�*�*�*�;�*�*�*�*�*�*�*�*�*�*�*�+�*�*�*�*�*�+�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�V�V��8H��8U�V�V�V���#5�5�5�5�5�5�5�5�5�5�5��#5�5�5�5�5�5�5�5�5�5�5�5�5��5�5�5�5�5��5�5�5�5�5�5�5�5�5�5�5�5�5�#5�5�5�5�5�5�#5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5�5r<   c                  �  � i } t          t          | �  �        �  �        }t          |�  �        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d	x}x}}|d
         }|j        }d}||k    }	|	s�t          j        d|	fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }
dd|
iz  }t          t          j
        |�  �        �  �        �d	x}x}	}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }
dd|
iz  }t          t          j
        |�  �        �  �        �d	x}x}}|j        d         }g }	||	k    }|slt          j        d|fd||	f�  �        t          j        |�  �        t          j        |	�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d	x}x}}	d	S )z+Test Kruskal's algorithm on an empty graph.r   r   r   r   r   r   r    r!   Nr"   r#   r$   r&   r'   r(   r+   r,   r-   r.   r0   r1   �z%(py1)s == %(py4)s�r   rB   �assert %(py6)sr   �rD   r   r   rE   rF   rG   rH   rI   rJ   rK   rL   rM   rN   �rP   r   rQ   rR   rS   rT   rU   r'   rV   rW   rX   rY   rZ   r\   s                 r9   �test_kruskal_empty_graphrg   -   s�  � ��E��#�E�*�*�+�+�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��*�+�*�*�;�*�*�*�*�*�*�*�*�*�*�*�;�*�*�*�*�*�*�;�*�*�*�*�*�*�*�*�*�*�*�+�*�*�*�*�*�+�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*���K�(�.�B�.�(�B�.�.�.�.�.�.�.�.�.�.�(�B�.�.�.�.�.�(�.�.�.�.�B�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.r<   c                  �  � dg i} t          t          | �  �        �  �        }t          |�  �        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd	|iz  }t          t          j
        |�  �        �  �        �d
x}x}}|d         }|j        }d}||k    }	|	s�t          j        d|	fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }
dd|
iz  }t          t          j
        |�  �        �  �        �d
x}x}	}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }
dd|
iz  }t          t          j
        |�  �        �  �        �d
x}x}}|j        d         }g }	||	k    }|slt          j        d|fd||	f�  �        t          j        |�  �        t          j        |	�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d
x}x}}	d
S )z7Test Kruskal's algorithm on a graph with a single node.r   r   r   r   r   r   r   r    r!   Nr"   r#   r$   r&   r'   r(   r+   r,   r-   r.   r0   r1   rb   rc   rd   r   re   rf   s                 r9   �test_kruskal_single_node_graphri   8   s�  � ��"�I�E��#�E�*�*�+�+�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��*�+�*�*�;�*�*�*�*�*�*�*�*�*�*�*�;�*�*�*�*�*�*�;�*�*�*�*�*�*�*�*�*�*�*�+�*�*�*�*�*�+�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*���K�(�.�B�.�(�B�.�.�.�.�.�.�.�.�.�.�(�B�.�.�.�.�.�(�.�.�.�.�B�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.�.r<   c            	      �  � dgddgdgd�} t          t          | �  �        �  �        }|D �]}t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd	t	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nd	t          j        |�  �        d
�z  }t          t          j
        |�  �        �  �        �d}|j        }t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �dx}}|j        }t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �dx}}|j        }t          |t          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �dx}}|j        }t          |t"          �  �        }|�sddt	          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt	          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        dt	          j        �   �         v st          j        t"          �  �        rt          j        t"          �  �        ndt          j        |�  �        d�z  }t          t          j
        |�  �        �  �        �dx}}��dS )zBTest that all events generated by Kruskal's conform to the schema.r   r   r   r   )r   r   r
   z5assert %(py4)s
{%(py4)s = %(py0)s(%(py1)s, %(py2)s)
}�
isinstance�eventr   )r   r   r)   rB   NzOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.step
}, %(py4)s)
}�int)r   r   r   rB   r   zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.type
}, %(py4)s)
}�strzRassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.details
}, %(py4)s)
}zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.data
}, %(py4)s)
}�dict)rD   r   rk   r   rG   rH   rE   rI   rJ   rK   rL   �steprm   rM   rn   �detailsrN   ro   )rP   r   rl   rW   r\   rQ   rR   rT   s           r9   �&test_kruskal_all_events_conform_schemarr   C   s�  � � �Z���!��Z�� �E�
 �#�E�*�*�+�+�F�� ,� ,���%��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�z�'�'�'�'�'�z�'�'�'�'�'�'�'�'�'�'�'�'�'�%�'�'�'�'�'�%�'�'�'�'�'�'�'�'�'�'�'�'�'��'�'�'�'�'��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��-�-�z�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�z�-�-�-�-�-�z�-�-�-�-�-�-�-�-�-�-�-�-�-�%�-�-�-�-�-�%�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��-�-�-�-�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��*�+�z�*�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�z�+�+�+�+�+�z�+�+�+�+�+�+�+�+�+�+�+�+�+�%�+�+�+�+�+�%�+�+�+�+�+�+�*�+�+�+�+�+�+�+�+�+�+�+�d�+�+�+�+�+�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�,� ,r<   )�builtinsrG   �_pytest.assertion.rewrite�	assertion�rewriterE   �pytest�app.algorithms.kruskalr   �app.utils.typesr   r   r]   r`   rg   ri   rr   r3   r<   r9   �<module>rz      s�   ��  � � � � � � � � � � � � ����� 4� 4� 4� 4� 4� 4� (� (� (� (� (� (� (� (�6� 6� 6�(6� 6� 6�(	/� 	/� 	/�	/� 	/� 	/�,� ,� ,� ,� ,r<   

================================================================================
ملف: tests\__pycache__\test_linear_search.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    ��h�	  �                   �d   � d dl Zd dlmc mZ d dlZd dlmZ d dl	m
Z
 d� Zd� Zd� Zd� Zd� Zd	� ZdS )
�    N)�linear_search_generator)�Eventc                  �	  � g d�} d}t          t          t          | �  �        |�  �        �  �        }t          |�  �        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }d	d
|iz  }t          t          j
        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}	x}
}|j        d         }d}
||
u }|slt          j        d|fd||
f�  �        t          j        |�  �        t          j        |
�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}x}}
t          d� |D �   �         d�  �        }d}||u}	|	s�t          j        d|	fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }d d!|iz  }t          t          j
        |�  �        �  �        �dx}	}|j        d"         }||k    }|s�t          j        d|fd#||f�  �        t          j        |�  �        d"t          j        �   �         v st          j        |�  �        rt          j        |�  �        nd"d$�z  }d d!|iz  }t          t          j
        |�  �        �  �        �dx}}|j        d%         }d&}
||
k    }|slt          j        d|fd'||
f�  �        t          j        |�  �        t          j        |
�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}x}}
dS )(z,Test linear search when the target is found.��
   �   �   �(   �2   r	   r   ��>�z/%(py3)s
{%(py3)s = %(py0)s(%(py1)s)
} > %(py6)s�len�events��py0�py1�py3�py6�assert %(py8)s�py8N������done��==�z,%(py2)s
{%(py2)s = %(py0)s.type
} == %(py5)s�final_event�r   �py2�py5�assert %(py7)s�py7�foundT��is�z%(py1)s is %(py4)s�r   �py4�assert %(py6)sr   c              3   �0   K  � | ]}|j         d k    �|V � �dS �r#   N��type��.0�es     �>/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/test_linear_search.py�	<genexpr>z+test_linear_search_found.<locals>.<genexpr>   �.   � � � �?�?�a�Q�V�w�->�?��?�?�?�?�?�?�    ��is not�z%(py0)s is not %(py3)s�found_event�r   r   �assert %(py5)sr    �target�z%(py1)s == %(py3)s�r   r   �index�   �z%(py1)s == %(py4)s��listr   r   �
@pytest_ar�_call_reprcompare�@py_builtins�locals�_should_repr_global_name�	_saferepr�AssertionError�_format_explanationr-   �data�next)�arrr;   r   �@py_assert2�@py_assert5�@py_assert4�@py_format7�@py_format9r   �@py_assert1�@py_assert3�@py_format6�@py_format8�@py_assert0�@py_format5r8   �@py_format4s                    r1   �test_linear_search_foundrZ      s?  � �
�
�
�C��F��)�$�s�)�)�V�<�<�=�=�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%���G�$�,��,�$��,�,�,�,�,�,�,�,�,�,�$��,�,�,�,�,�$�,�,�,�,��,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,�,��?�?�6�?�?�?��F�F�K�"�"�;�d�"�"�"�"�"�"�"�"�"�"�;�d�"�"�"�"�"�"�"�"�"�"�"�"�;�"�"�"�"�"�;�"�"�"�"�"�"�d�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"�"���H�%�/�%��/�/�/�/�/�/�/�/�/�/�%��/�/�/�/�/�%�/�/�/�/�/�/�/�/�/�/�/��/�/�/�/�/��/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/�/���G�$�)��)�$��)�)�)�)�)�)�)�)�)�)�$��)�)�)�)�)�$�)�)�)�)��)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)r4   c                  �  � g d�} d}t          t          t          | �  �        |�  �        �  �        }t          |�  �        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }d	d
|iz  }t          t          j
        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}	x}
}|j        d         }d}
||
u }|slt          j        d|fd||
f�  �        t          j        |�  �        t          j        |
�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �dx}x}}
t          d� |D �   �         d�  �        }d}||u}	|	s�t          j        d|	fd||f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }d d!|iz  }t          t          j
        |�  �        �  �        �dx}	}|j        d"         }||k    }|s�t          j        d|fd#||f�  �        t          j        |�  �        d"t          j        �   �         v st          j        |�  �        rt          j        |�  �        nd"d$�z  }d d!|iz  }t          t          j
        |�  �        �  �        �dx}}dS )%z0Test linear search when the target is not found.r   �<   r   r   r   r   r   r   r   r   Nr   r   r   r   r   r   r!   r"   r#   Fr$   r&   r'   r)   r   c              3   �0   K  � | ]}|j         d k    �|V � �dS )�	not_foundNr,   r.   s     r1   r2   z/test_linear_search_not_found.<locals>.<genexpr>    s.   � � � �G�G�!���;�1F�G�A�G�G�G�G�G�Gr4   r5   r7   �not_found_eventr9   r:   r    r;   r<   r=   rA   )rM   r;   r   rN   rO   rP   rQ   rR   r   rS   rT   rU   rV   rW   rX   r_   rY   s                    r1   �test_linear_search_not_foundr`      s�  � �
�
�
�C��F��)�$�s�)�)�V�<�<�=�=�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%���G�$�-��-�$��-�-�-�-�-�-�-�-�-�-�$��-�-�-�-�-�$�-�-�-�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��G�G�v�G�G�G��N�N�O�"&�&�?�$�&�&�&�&�&�&�&�&�&�&�?�$�&�&�&�&�&�&�&�&�&�&�&�&�?�&�&�&�&�&�?�&�&�&�&�&�&�$�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&�&����)�3�)�V�3�3�3�3�3�3�3�3�3�3�)�V�3�3�3�3�3�)�3�3�3�3�3�3�3�3�3�3�3�V�3�3�3�3�3�V�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3�3r4   c                  �$  � g } d}t          t          t          | �  �        |�  �        �  �        }t          |�  �        }d}||k    }|s�t          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }dd	|iz  }t          t          j
        |�  �        �  �        �d
x}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d
x}	x}
}|j        d         }d}
||
u }|slt          j        d|fd||
f�  �        t          j        |�  �        t          j        |
�  �        d�z  }dd|iz  }t          t          j
        |�  �        �  �        �d
x}x}}
d
S )z'Test linear search with an empty array.r   r   r   r   r   r   r   r   r   Nr   r   r   r   r   r   r!   r"   r#   Fr$   r&   r'   r)   r   )rB   r   r   rC   rD   rE   rF   rG   rH   rI   rJ   r-   rK   )rM   r;   r   rN   rO   rP   rQ   rR   r   rS   rT   rU   rV   rW   rX   s                  r1   �test_linear_search_empty_arrayrb   $   s�  � �
�C��F��)�$�s�)�)�V�<�<�=�=�F��v�;�;����;��?����������;��������������3������3��������������v������v�������;�����������������������������������*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%���G�$�-��-�$��-�-�-�-�-�-�-�-�-�-�$��-�-�-�-�-�$�-�-�-�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-r4   c                  �  � g d�} d}t          t          t          | �  �        |�  �        �  �        }t          d� |D �   �         d�  �        }|j        d         }d}||k    }|slt	          j        d|fd||f�  �        t	          j        |�  �        t	          j        |�  �        d	�z  }d
d|iz  }t          t	          j        |�  �        �  �        �dx}x}}dS )z8Test linear search when the target is the first element.�r   r   r	   r   c              3   �0   K  � | ]}|j         d k    �|V � �dS r+   r,   r.   s     r1   r2   z3test_linear_search_first_element.<locals>.<genexpr>5   r3   r4   Nr>   r   r   r@   r'   r)   r   �	rB   r   rL   rK   rC   rD   rH   rI   rJ   �	rM   r;   r   r8   rW   rT   rN   rX   rQ   s	            r1   � test_linear_search_first_elementrh   /   ��   � �
�,�,�C��F��)�$�s�)�)�V�<�<�=�=�F��?�?�6�?�?�?��F�F�K���G�$�)��)�$��)�)�)�)�)�)�)�)�)�)�$��)�)�)�)�)�$�)�)�)�)��)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)r4   c                  �  � g d�} d}t          t          t          | �  �        |�  �        �  �        }t          d� |D �   �         d�  �        }|j        d         }d}||k    }|slt	          j        d|fd||f�  �        t	          j        |�  �        t	          j        |�  �        d	�z  }d
d|iz  }t          t	          j        |�  �        �  �        �dx}x}}dS )z7Test linear search when the target is the last element.rd   r	   c              3   �0   K  � | ]}|j         d k    �|V � �dS r+   r,   r.   s     r1   r2   z2test_linear_search_last_element.<locals>.<genexpr>>   r3   r4   Nr>   r?   r   r@   r'   r)   r   rf   rg   s	            r1   �test_linear_search_last_elementrl   8   ri   r4   c                  �  � g d�} d}t          t          t          | �  �        |�  �        �  �        }t          d� |D �   �         d�  �        }|j        d         }d}||k    }|slt	          j        d|fd||f�  �        t	          j        |�  �        t	          j        |�  �        d	�z  }d
d|iz  }t          t	          j        |�  �        �  �        �dx}x}}dS )zMTest linear search with duplicate elements, should find the first occurrence.)r   r   r	   r   r
   r   c              3   �0   K  � | ]}|j         d k    �|V � �dS r+   r,   r.   s     r1   r2   z8test_linear_search_duplicate_elements.<locals>.<genexpr>G   r3   r4   Nr>   �   r   r@   r'   r)   r   rf   rg   s	            r1   �%test_linear_search_duplicate_elementsrp   A   s   � �
�
�
�C��F��)�$�s�)�)�V�<�<�=�=�F��?�?�6�?�?�?��F�F�K���G�$�)��)�$��)�)�)�)�)�)�)�)�)�)�$��)�)�)�)�)�$�)�)�)�)��)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)�)r4   )�builtinsrE   �_pytest.assertion.rewrite�	assertion�rewriterC   �pytest�app.algorithms.linear_searchr   �app.utils.typesr   rZ   r`   rb   rh   rl   rp   � r4   r1   �<module>ry      s�   ��  � � � � � � � � � � � � ����� @� @� @� @� @� @� !� !� !� !� !� !�*� *� *� 4� 4� 4�	.� 	.� 	.�*� *� *�*� *� *�*� *� *� *� *r4   

================================================================================
ملف: tests\__pycache__\test_merge_sort.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    N�h  �                   �h   � d dl Zd dlmc mZ d dlZd dlmZ d dl	m
Z
mZ d� Zd� Zd� Zd� Zd� Zd	� ZdS )
�    N)�merge_sort_generator)�Event�Arrayc            	      �~  � g d�} t          | �  �        }t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st	          j        d|fd||f�  �        dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        t	          j	        |�  �        d�z  }t	          j
        d�  �        d	z   d
|iz  }t          t	          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t	          j        d|
fd|	|f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |	�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}}|D �]}t          |t           �  �        }
|
�sddt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd t          j        �   �         v st	          j        t           �  �        rt	          j	        t           �  �        nd t	          j	        |
�  �        d!�z  }t          t	          j        |�  �        �  �        �d}
|j        }t          |t$          �  �        }|�sd"dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d#t          j        �   �         v st	          j        t$          �  �        rt	          j	        t$          �  �        nd#t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}|j        }t          |t&          �  �        }|�sd%dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d&t          j        �   �         v st	          j        t&          �  �        rt	          j	        t&          �  �        nd&t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}|j        }t          |t&          �  �        }|�sd'dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d&t          j        �   �         v st	          j        t&          �  �        rt	          j	        t&          �  �        nd&t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}|j        }t          |t*          �  �        }|�sd(dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d)t          j        �   �         v st	          j        t*          �  �        rt	          j	        t*          �  �        nd)t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}��dS )*z#Test merge sort with a basic array.)�&   �   �+   �   �	   �R   �
   r   ��>�z/%(py3)s
{%(py3)s = %(py0)s(%(py1)s)
} > %(py6)s�len�events��py0�py1�py3�py6zNo events were generated.�
>assert %(py8)s�py8N������done��==�z,%(py2)s
{%(py2)s = %(py0)s.type
} == %(py5)s�final_event�r   �py2�py5�assert %(py7)s�py7�sorted_array��in�z,%(py1)s in %(py5)s
{%(py5)s = %(py3)s.data
}�r   r   r"   �z%(py1)s == %(py3)s�expected_sorted_arr�r   r   �assert %(py5)sr"   z5assert %(py4)s
{%(py4)s = %(py0)s(%(py1)s, %(py2)s)
}�
isinstance�eventr   )r   r   r!   �py4zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.step
}, %(py4)s)
}�int)r   r   r   r0   r   zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.type
}, %(py4)s)
}�strzRassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.details
}, %(py4)s)
}zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.data
}, %(py4)s)
}�dict)�sorted�listr   r   �
@pytest_ar�_call_reprcompare�@py_builtins�locals�_should_repr_global_name�	_saferepr�_format_assertmsg�AssertionError�_format_explanation�type�datar.   r   �stepr1   r2   �detailsr3   )�arrr+   r   �@py_assert2�@py_assert5�@py_assert4�@py_format7�@py_format9r   �@py_assert1�@py_assert3�@py_format6�@py_format8�@py_assert0�@py_format4r/   �@py_format5s                    �;/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/test_merge_sort.py�test_merge_sort_basicrQ      s�	  � �
$�
$�
$�C� ��+�+���&�t�C�y�y�1�1�2�2�F��v�;�;�7��7�;��?�7�7�7�7�7�7�7�7�7�;��7�7�7�7�7�7�7�7�7�7�7�7�3�7�7�7�7�7�3�7�7�7�7�7�7�7�7�7�7�7�7�7�v�7�7�7�7�7�v�7�7�7�7�7�7�;�7�7�7�7��7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7� ��*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B� � ,� ,���%��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�z�'�'�'�'�'�z�'�'�'�'�'�'�'�'�'�'�'�'�'�%�'�'�'�'�'�%�'�'�'�'�'�'�'�'�'�'�'�'�'��'�'�'�'�'��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��-�-�z�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�z�-�-�-�-�-�z�-�-�-�-�-�-�-�-�-�-�-�-�-�%�-�-�-�-�-�%�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��-�-�-�-�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��*�+�z�*�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�z�+�+�+�+�+�z�+�+�+�+�+�+�+�+�+�+�+�+�+�%�+�+�+�+�+�%�+�+�+�+�+�+�*�+�+�+�+�+�+�+�+�+�+�+�d�+�+�+�+�+�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�,� ,�    c                  �  � g } g }t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d�  �        dz   d	|iz  }t          t          j        |�  �        �  �        �d
x}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �d
x}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �d
x}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �d
x}}d
S )z$Test merge sort with an empty array.r   r   r   r   r   r   z)No events were generated for empty array.r   r   Nr   r   r   r   r   r    r#   r$   r%   r&   r(   r)   r*   r+   r,   r-   r"   �r5   r   r   r6   r7   r8   r9   r:   r;   r<   r=   r>   r?   r@   �rC   r+   r   rD   rE   rF   rG   rH   r   rI   rJ   rK   rL   rM   rN   s                  rP   �test_merge_sort_empty_arrayrV      s�  � �
�C����&�t�C�y�y�1�1�2�2�F��v�;�;�G��G�;��?�G�G�G�G�G�G�G�G�G�;��G�G�G�G�G�G�G�G�G�G�G�G�3�G�G�G�G�G�3�G�G�G�G�G�G�G�G�G�G�G�G�G�v�G�G�G�G�G�v�G�G�G�G�G�G�;�G�G�G�G��G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrR   c                  �"  � dg} dg}t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d�  �        d	z   d
|iz  }t          t          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}}dS )z,Test merge sort with a single-element array.�   r   r   r   r   r   r   z2No events were generated for single element array.r   r   Nr   r   r   r   r   r    r#   r$   r%   r&   r(   r)   r*   r+   r,   r-   r"   rT   rU   s                  rP   �$test_merge_sort_single_element_arrayrY   '   s�  � ��#�C��#���&�t�C�y�y�1�1�2�2�F��v�;�;�P��P�;��?�P�P�P�P�P�P�P�P�P�;��P�P�P�P�P�P�P�P�P�P�P�P�3�P�P�P�P�P�3�P�P�P�P�P�P�P�P�P�P�P�P�P�v�P�P�P�P�P�v�P�P�P�P�P�P�;�P�P�P�P��P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrR   c                  �&  � g d�} g d�}t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d�  �        d	z   d
|iz  }t          t          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}}dS )z-Test merge sort with an already sorted array.��   �   r
   �   rX   r   r   r   r   r   r   z*No events were generated for sorted array.r   r   Nr   r   r   r   r   r    r#   r$   r%   r&   r(   r)   r*   r+   r,   r-   r"   rT   rU   s                  rP   �$test_merge_sort_already_sorted_arrayr_   3   s�  � �
�/�/�C�)�/�/���&�t�C�y�y�1�1�2�2�F��v�;�;�H��H�;��?�H�H�H�H�H�H�H�H�H�;��H�H�H�H�H�H�H�H�H�H�H�H�3�H�H�H�H�H�3�H�H�H�H�H�H�H�H�H�H�H�H�H�v�H�H�H�H�H�v�H�H�H�H�H�H�;�H�H�H�H��H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrR   c                  �&  � g d�} g d�}t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d	�  �        d
z   d|iz  }t          t          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}}dS )z,Test merge sort with a reverse sorted array.)rX   r^   r
   r]   r\   r[   r   r   r   r   r   r   z2No events were generated for reverse sorted array.r   r   Nr   r   r   r   r   r    r#   r$   r%   r&   r(   r)   r*   r+   r,   r-   r"   rT   rU   s                  rP   �$test_merge_sort_reverse_sorted_arrayra   ?   s�  � �
�/�/�C�)�/�/���&�t�C�y�y�1�1�2�2�F��v�;�;�P��P�;��?�P�P�P�P�P�P�P�P�P�;��P�P�P�P�P�P�P�P�P�P�P�P�3�P�P�P�P�P�3�P�P�P�P�P�P�P�P�P�P�P�P�P�v�P�P�P�P�P�v�P�P�P�P�P�P�;�P�P�P�P��P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrR   c                  �<  � g d�} t          | �  �        }t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st	          j        d|fd||f�  �        dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        t	          j	        |�  �        d�z  }t	          j
        d�  �        d	z   d
|iz  }t          t	          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t	          j        d|
fd|	|f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |	�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}}dS )z<Test merge sort with an array containing duplicate elements.)r
   r\   r^   r\   rX   r   r]   �   r   r   r   r   r   r   z3No events were generated for array with duplicates.r   r   Nr   r   r   r   r   r    r#   r$   r%   r&   r(   r)   r*   r+   r,   r-   r"   )r4   r5   r   r   r6   r7   r8   r9   r:   r;   r<   r=   r>   r?   r@   rU   s                  rP   �"test_merge_sort_duplicate_elementsrd   K   s  � �
"�
"�
"�C� ��+�+���&�t�C�y�y�1�1�2�2�F��v�;�;�Q��Q�;��?�Q�Q�Q�Q�Q�Q�Q�Q�Q�;��Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�3�Q�Q�Q�Q�Q�3�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�v�Q�Q�Q�Q�Q�v�Q�Q�Q�Q�Q�Q�;�Q�Q�Q�Q��Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrR   )�builtinsr8   �_pytest.assertion.rewrite�	assertion�rewriter6   �pytest�app.algorithms.merge_sortr   �app.utils.typesr   r   rQ   rV   rY   r_   ra   rd   � rR   rP   �<module>rm      s�   ��  � � � � � � � � � � � � ����� :� :� :� :� :� :� (� (� (� (� (� (� (� (�,� ,� ,�,
C� 
C� 
C�
C� 
C� 
C�
C� 
C� 
C�
C� 
C� 
C�
C� 
C� 
C� 
C� 
CrR   

================================================================================
ملف: tests\__pycache__\test_quick_sort.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    ��hJ  �                   �h   � d dl Zd dlmc mZ d dlZd dlmZ d dl	m
Z
mZ d� Zd� Zd� Zd� Zd� Zd	� ZdS )
�    N)�quick_sort_generator)�Event�Arrayc            	      �~  � g d�} t          | �  �        }t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st	          j        d|fd||f�  �        dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        t	          j	        |�  �        d�z  }t	          j
        d�  �        d	z   d
|iz  }t          t	          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t	          j        d|
fd|	|f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |	�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}}|D �]}t          |t           �  �        }
|
�sddt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd t          j        �   �         v st	          j        t           �  �        rt	          j	        t           �  �        nd t	          j	        |
�  �        d!�z  }t          t	          j        |�  �        �  �        �d}
|j        }t          |t$          �  �        }|�sd"dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d#t          j        �   �         v st	          j        t$          �  �        rt	          j	        t$          �  �        nd#t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}|j        }t          |t&          �  �        }|�sd%dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d&t          j        �   �         v st	          j        t&          �  �        rt	          j	        t&          �  �        nd&t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}|j        }t          |t&          �  �        }|�sd'dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d&t          j        �   �         v st	          j        t&          �  �        rt	          j	        t&          �  �        nd&t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}|j        }t          |t*          �  �        }|�sd(dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d)t          j        �   �         v st	          j        t*          �  �        rt	          j	        t*          �  �        nd)t	          j	        |�  �        d$�z  }t          t	          j        |�  �        �  �        �dx}}��dS )*z#Test quick sort with a basic array.)�
   �   �   �	   �   �   r   ��>�z/%(py3)s
{%(py3)s = %(py0)s(%(py1)s)
} > %(py6)s�len�events��py0�py1�py3�py6zNo events were generated.�
>assert %(py8)s�py8N������done��==�z,%(py2)s
{%(py2)s = %(py0)s.type
} == %(py5)s�final_event�r   �py2�py5�assert %(py7)s�py7�sorted_array��in�z,%(py1)s in %(py5)s
{%(py5)s = %(py3)s.data
}�r   r   r!   �z%(py1)s == %(py3)s�expected_sorted_arr�r   r   �assert %(py5)sr!   z5assert %(py4)s
{%(py4)s = %(py0)s(%(py1)s, %(py2)s)
}�
isinstance�eventr   )r   r   r    �py4zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.step
}, %(py4)s)
}�int)r   r   r   r/   r   zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.type
}, %(py4)s)
}�strzRassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.details
}, %(py4)s)
}zOassert %(py6)s
{%(py6)s = %(py0)s(%(py3)s
{%(py3)s = %(py1)s.data
}, %(py4)s)
}�dict)�sorted�listr   r   �
@pytest_ar�_call_reprcompare�@py_builtins�locals�_should_repr_global_name�	_saferepr�_format_assertmsg�AssertionError�_format_explanation�type�datar-   r   �stepr0   r1   �detailsr2   )�arrr*   r   �@py_assert2�@py_assert5�@py_assert4�@py_format7�@py_format9r   �@py_assert1�@py_assert3�@py_format6�@py_format8�@py_assert0�@py_format4r.   �@py_format5s                    �;/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/test_quick_sort.py�test_quick_sort_basicrP      s�	  � �
�
�
�C� ��+�+���&�t�C�y�y�1�1�2�2�F��v�;�;�7��7�;��?�7�7�7�7�7�7�7�7�7�;��7�7�7�7�7�7�7�7�7�7�7�7�3�7�7�7�7�7�3�7�7�7�7�7�7�7�7�7�7�7�7�7�v�7�7�7�7�7�v�7�7�7�7�7�7�;�7�7�7�7��7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7�7���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�� ,� ,���%��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�z�'�'�'�'�'�z�'�'�'�'�'�'�'�'�'�'�'�'�'�%�'�'�'�'�'�%�'�'�'�'�'�'�'�'�'�'�'�'�'��'�'�'�'�'��'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'�'��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��*�*�z�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�z�*�*�*�*�*�z�*�*�*�*�*�*�*�*�*�*�*�*�*�%�*�*�*�*�*�%�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�c�*�*�*�*�*�c�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*�*��-�-�z�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�z�-�-�-�-�-�z�-�-�-�-�-�-�-�-�-�-�-�-�-�%�-�-�-�-�-�%�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��-�-�-�-�-��-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-��*�+�z�*�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�z�+�+�+�+�+�z�+�+�+�+�+�+�+�+�+�+�+�+�+�%�+�+�+�+�+�%�+�+�+�+�+�+�*�+�+�+�+�+�+�+�+�+�+�+�d�+�+�+�+�+�d�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�+�,� ,�    c                  �  � g } g }t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d�  �        dz   d	|iz  }t          t          j        |�  �        �  �        �d
x}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �d
x}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �d
x}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �d
x}}d
S )z$Test quick sort with an empty array.r   r   r   r   r   r   z)No events were generated for empty array.r   r   Nr   r   r   r   r   r   r"   r#   r$   r%   r'   r(   r)   r*   r+   r,   r!   �r4   r   r   r5   r6   r7   r8   r9   r:   r;   r<   r=   r>   r?   �rB   r*   r   rC   rD   rE   rF   rG   r   rH   rI   rJ   rK   rL   rM   s                  rO   �test_quick_sort_empty_arrayrU      s�  � �
�C����&�t�C�y�y�1�1�2�2�F��v�;�;�G��G�;��?�G�G�G�G�G�G�G�G�G�;��G�G�G�G�G�G�G�G�G�G�G�G�3�G�G�G�G�G�3�G�G�G�G�G�G�G�G�G�G�G�G�G�v�G�G�G�G�G�v�G�G�G�G�G�G�;�G�G�G�G��G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G�G���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrQ   c                  �"  � dg} dg}t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d�  �        d	z   d
|iz  }t          t          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}}dS )z,Test quick sort with a single-element array.r   r   r   r   r   r   r   z2No events were generated for single element array.r   r   Nr   r   r   r   r   r   r"   r#   r$   r%   r'   r(   r)   r*   r+   r,   r!   rS   rT   s                  rO   �$test_quick_sort_single_element_arrayrW   %   s�  � ��#�C��#���&�t�C�y�y�1�1�2�2�F��v�;�;�P��P�;��?�P�P�P�P�P�P�P�P�P�;��P�P�P�P�P�P�P�P�P�P�P�P�3�P�P�P�P�P�3�P�P�P�P�P�P�P�P�P�P�P�P�P�v�P�P�P�P�P�v�P�P�P�P�P�P�;�P�P�P�P��P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrQ   c                  �&  � g d�} g d�}t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d�  �        d	z   d
|iz  }t          t          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}}dS )z-Test quick sort with an already sorted array.�r   �   �   �   r   r   r   r   r   r   r   z*No events were generated for sorted array.r   r   Nr   r   r   r   r   r   r"   r#   r$   r%   r'   r(   r)   r*   r+   r,   r!   rS   rT   s                  rO   �$test_quick_sort_already_sorted_arrayr]   1   s�  � �
�/�/�C�)�/�/���&�t�C�y�y�1�1�2�2�F��v�;�;�H��H�;��?�H�H�H�H�H�H�H�H�H�;��H�H�H�H�H�H�H�H�H�H�H�H�3�H�H�H�H�H�3�H�H�H�H�H�H�H�H�H�H�H�H�H�v�H�H�H�H�H�v�H�H�H�H�H�H�;�H�H�H�H��H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H�H���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrQ   c                  �&  � g d�} g d�}t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st          j        d|fd||f�  �        dt          j        �   �         v st          j        t          �  �        rt          j        t          �  �        nddt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        t          j        |�  �        d�z  }t          j	        d	�  �        d
z   d|iz  }t          t          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t          j        d|
fd|	|f�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |	�  �        t          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndt          j        |�  �        d�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t          j        d|fd||f�  �        t          j        |�  �        dt          j        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }t          t          j        |�  �        �  �        �dx}}dS )z,Test quick sort with a reverse sorted array.)r   r\   r[   rZ   r   rY   r   r   r   r   r   r   z2No events were generated for reverse sorted array.r   r   Nr   r   r   r   r   r   r"   r#   r$   r%   r'   r(   r)   r*   r+   r,   r!   rS   rT   s                  rO   �$test_quick_sort_reverse_sorted_arrayr_   =   s�  � �
�/�/�C�)�/�/���&�t�C�y�y�1�1�2�2�F��v�;�;�P��P�;��?�P�P�P�P�P�P�P�P�P�;��P�P�P�P�P�P�P�P�P�P�P�P�3�P�P�P�P�P�3�P�P�P�P�P�P�P�P�P�P�P�P�P�v�P�P�P�P�P�v�P�P�P�P�P�P�;�P�P�P�P��P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P�P���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrQ   c                  �<  � g d�} t          | �  �        }t          t          t          | �  �        �  �        �  �        }t          |�  �        }d}||k    }|�st	          j        d|fd||f�  �        dt          j        �   �         v st	          j        t          �  �        rt	          j	        t          �  �        nddt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        t	          j	        |�  �        d�z  }t	          j
        d�  �        d	z   d
|iz  }t          t	          j        |�  �        �  �        �dx}x}}|d         }|j        }	d}|	|k    }
|
s�t	          j        d|
fd|	|f�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |	�  �        t	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}	x}
}d}|j        }||v }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndt	          j	        |�  �        d�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}x}}|j        d         }||k    }|s�t	          j        d|fd||f�  �        t	          j	        |�  �        dt          j        �   �         v st	          j        |�  �        rt	          j	        |�  �        ndd�z  }dd|iz  }t          t	          j        |�  �        �  �        �dx}}dS )z<Test quick sort with an array containing duplicate elements.)r[   r   r\   r   r   r
   rZ   �   r   r   r   r   r   r   z3No events were generated for array with duplicates.r   r   Nr   r   r   r   r   r   r"   r#   r$   r%   r'   r(   r)   r*   r+   r,   r!   )r3   r4   r   r   r5   r6   r7   r8   r9   r:   r;   r<   r=   r>   r?   rT   s                  rO   �"test_quick_sort_duplicate_elementsrb   I   s  � �
"�
"�
"�C� ��+�+���&�t�C�y�y�1�1�2�2�F��v�;�;�Q��Q�;��?�Q�Q�Q�Q�Q�Q�Q�Q�Q�;��Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�3�Q�Q�Q�Q�Q�3�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�v�Q�Q�Q�Q�Q�v�Q�Q�Q�Q�Q�Q�;�Q�Q�Q�Q��Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q�Q���*�K���%�v�%��v�%�%�%�%�%�%�%�%�%�%��v�%�%�%�%�%�%�%�%�%�%�%�%�;�%�%�%�%�%�;�%�%�%�%�%�%��%�%�%�%�v�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%�%��-�[�-�-�>�-�-�-�-�-�-�-�-�-�-�-�>�-�-�-�-�-�-�>�-�-�-�-�-�-�-�-�-�-�-�[�-�-�-�-�-�[�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-�-���N�+�B�+�/B�B�B�B�B�B�B�B�B�B�B�+�/B�B�B�B�B�B�+�B�B�B�B�B�B�B�B�B�B�B�/B�B�B�B�B�B�/B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�B�BrQ   )�builtinsr7   �_pytest.assertion.rewrite�	assertion�rewriter5   �pytest�app.algorithms.quick_sortr   �app.utils.typesr   r   rP   rU   rW   r]   r_   rb   � rQ   rO   �<module>rk      s�   ��  � � � � � � � � � � � � ����� :� :� :� :� :� :� (� (� (� (� (� (� (� (�,� ,� ,�(
C� 
C� 
C�
C� 
C� 
C�
C� 
C� 
C�
C� 
C� 
C�
C� 
C� 
C� 
C� 
CrQ   

================================================================================
ملف: tests\__pycache__\test_streamlit_app.cpython-311-pytest-8.4.2.pyc
================================================================================
�
    Re�h[  �                   �>   � d dl Zd dlmc mZ d dlZd dlZd dlZd� Z	dS )�    Nc                  �D  � t           j        ddddddddd	d
g} d}	 t          j        | t          j        t          j        d��  �        }|�                    d��  �        \  }}g }d}||v}|}|rd}||v}	|	}|�spt          j        d|fd||f�  �        t          j        |�  �        dt          j
        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }
dd|
iz  }|�                    |�  �         |r�t          j        d|	fd||f�  �        t          j        |�  �        dt          j
        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }|�                    |�  �         t          j        |d�  �        i z  }t          j        d|� ��  �        dz   d|iz  }t          t          j        |�  �        �  �        �dx}x}x}x}x}}	g }d}||v}|}|rd}||v}	|	}|�spt          j        d|fd||f�  �        t          j        |�  �        d t          j
        �   �         v st          j        |�  �        rt          j        |�  �        nd d�z  }
dd|
iz  }|�                    |�  �         |r�t          j        d|	fd||f�  �        t          j        |�  �        d t          j
        �   �         v st          j        |�  �        rt          j        |�  �        nd d�z  }dd|iz  }|�                    |�  �         t          j        |d�  �        i z  }t          j        d!|� ��  �        dz   d|iz  }t          t          j        |�  �        �  �        �dx}x}x}x}x}}	t#          d"�  �         �n# t          j        $ �ru t#          d#�  �         |�r`|�                    �   �          |�                    �   �         \  }}g }d}||v}|}|rd}||v}	|	}|�spt          j        d|fd||f�  �        t          j        |�  �        dt          j
        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }
dd|
iz  }|�                    |�  �         |r�t          j        d|	fd||f�  �        t          j        |�  �        dt          j
        �   �         v st          j        |�  �        rt          j        |�  �        ndd�z  }dd|iz  }|�                    |�  �         t          j        |d�  �        i z  }t          j        d$|� ��  �        dz   d|iz  }t          t          j        |�  �        �  �        �dx}x}x}x}x}}	g }d}||v}|}|rd}||v}	|	}|�spt          j        d|fd||f�  �        t          j        |�  �        d t          j
        �   �         v st          j        |�  �        rt          j        |�  �        nd d�z  }
dd|
iz  }|�                    |�  �         |r�t          j        d|	fd||f�  �        t          j        |�  �        d t          j
        �   �         v st          j        |�  �        rt          j        |�  �        nd d�z  }dd|iz  }|�                    |�  �         t          j        |d�  �        i z  }t          j        d%|� ��  �        dz   d|iz  }t          t          j        |�  �        �  �        �dx}x}x}x}x}}	t#          d&�  �         Y n~t(          $ rr}|rO|�                    �   �          |�                    �   �         \  }}t#          d'|� ��  �         t#          d(|� ��  �         t+          j        d)|� ��  �         Y d}~nd}~ww xY w|r>|�                    �   �         �,|�                    �   �          |�                    �   �          dS dS dS # |r=|�                    �   �         �*|�                    �   �          |�                    �   �          w w w xY w)*zFRuns a smoke test on the Streamlit app to check for import/run errors.z-m�	streamlit�runzapp/ui/streamlit_app.pyz--server.headless�truez--server.port�8502z--browser.gatherUsageStats�falseNT)�stdout�stderr�text�
   )�timeout�Error�	Traceback)�not in)z%(py3)s not in %(py5)sr
   )�py3�py5z%(py7)s�py7)z%(py10)s not in %(py12)s)�py10�py12z%(py14)s�py14r   z3Streamlit app encountered an error during startup: z
>assert %(py17)s�py17r	   z/Streamlit app printed an error during startup: z@Streamlit app smoke test passed: No immediate errors on startup.z[Streamlit app process timed out, which is expected for a running server. Checking output...z3Streamlit app encountered an error during timeout: z/Streamlit app printed an error during timeout: zBStreamlit app smoke test passed after timeout: No errors detected.zStreamlit app stdout: zStreamlit app stderr: z>An unexpected error occurred during Streamlit app smoke test: )�sys�
executable�
subprocess�Popen�PIPE�communicate�
@pytest_ar�_call_reprcompare�	_saferepr�@py_builtins�locals�_should_repr_global_name�append�_format_boolop�_format_assertmsg�AssertionError�_format_explanation�print�TimeoutExpired�kill�	Exception�pytest�fail�poll�wait)�command�processr	   r
   �@py_assert1�@py_assert2�@py_assert4�@py_assert0�@py_assert9�@py_assert11�@py_format6�@py_format8�@py_format13�@py_format15�@py_format16�@py_format18�es                    �>/home/ubuntu/AlgoVisEdu/AlgoVisEdu/tests/test_streamlit_app.py�test_streamlit_app_smoke_testrA      sZ  � � 	���k�5�!��V���$�g��G� �G�-� �"�7�:�?�:�?�ae�f�f�f��
 !�,�,�R�,�8�8����	K� 	K�w� 	K�w�f�$� 	K� 	K� 	K� 	K� 	K�� 	K��F�)B� 	K� 	K� 	K� 	K� 	K� 	K�9J�	K� 	K� 	K� 	K�w�f� 	K� 	K� 	K� 	K�AJ� � 	K� 	K� 	K� 	K�DJ�	K� 	K� 	K� 	K� 	K�2J� %� 	K� 	K� 	K� 	K�AJ� %� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K�DJ�F�	K�DJ�F�F�	K� 	K� 	K�9J�	K� 	K� 	K� 	K��F� 	K� 	K� 	K� 	K�AJ� *5� 	K� 	K� 	K� 	K�DJ�	K� 	K� 	K� 	K� 	K�2J� =C� 	K� 	K� 	K� 	K�AJ� =C� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K�DJ�F�	K�DJ�F�F�	K�<J�	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K�9J�J�&�J�J�	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K�7J�	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K� 	K�	G� 	G�w� 	G�w�f�$� 	G� 	G� 	G� 	G� 	G�� 	G��F�)B� 	G� 	G� 	G� 	G� 	G� 	G�5F�	G� 	G� 	G� 	G�w�f� 	G� 	G� 	G� 	G�=F� � 	G� 	G� 	G� 	G�@F�	G� 	G� 	G� 	G� 	G�.F� %� 	G� 	G� 	G� 	G�=F� %� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G�@F��	G�@F���	G� 	G� 	G�5F�	G� 	G� 	G� 	G��F� 	G� 	G� 	G� 	G�=F� *5� 	G� 	G� 	G� 	G�@F�	G� 	G� 	G� 	G� 	G�.F� =C� 	G� 	G� 	G� 	G�=F� =C� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G�@F��	G�@F���	G�8F�	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G�5F�F�f�F�F�	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G�3F�	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	G� 	�P�Q�Q�Q�Q���$� 
X� 
X� 
X��k�l�l�l�� 	X��L�L�N�N�N�$�0�0�2�2�N�F�F�O� O�7� O�7�&�(� O� O� O� O� O�[� O�[��-F� O� O� O� O� O� O�=N�O� O� O� O�7�&� O� O� O� O�EN� � O� O� O� O�HN�O� O� O� O� O�6N� #)� O� O� O� O�EN� #)� O� O� O� O� O� O� O� O� O� O� O� O� O� O� O�HN��O�HN���O� O� O�=N�O� O� O� O�[�� O� O� O� O�EN� .9� O� O� O� O�HN�O� O� O� O� O�6N� AG� O� O� O� O�EN� AG� O� O� O� O� O� O� O� O� O� O� O� O� O� O� O�HN��O�HN���O�@N�O� O� O� O� O� O� O� O�=N�N�f�N�N�O� O� O� O� O� O� O� O� O� O� O�;N�O� O� O� O� O� O� O� O� O� O� O� O� O� O� O� O� O� O�K� K�7� K�7�&�(� K� K� K� K� K�[� K�[��-F� K� K� K� K� K� K�9J�K� K� K� K�7�&� K� K� K� K�AJ� � K� K� K� K�DJ�K� K� K� K� K�2J� #)� K� K� K� K�AJ� #)� K� K� K� K� K� K� K� K� K� K� K� K� K� K� K�DJ�F�K�DJ�F�F�K� K� K�9J�K� K� K� K�[�� K� K� K� K�AJ� .9� K� K� K� K�DJ�K� K� K� K� K�2J� AG� K� K� K� K�AJ� AG� K� K� K� K� K� K� K� K� K� K� K� K� K� K� K�DJ�F�K�DJ�F�F�K�<J�K� K� K� K� K� K� K� K�9J�J�&�J�J�K� K� K� K� K� K� K� K� K� K� K�7J�K� K� K� K� K� K� K� K� K� K� K� K� K� K� K� K� K� K��V�W�W�W���� Z� Z� Z�� 	5��L�L�N�N�N�$�0�0�2�2�N�F�F��3�6�3�3�4�4�4��3�6�3�3�4�4�4���X�UV�X�X�Y�Y�Y�Y�Y�Y�Y�Y�����Z���� � 	�w�|�|�~�~� 	��L�L�N�N�N��L�L�N�N�N�N�N�	� 	� 	� 	��7� 	�w�|�|�~�~� 	��L�L�N�N�N��L�L�N�N�N�N�	� 	���s?   �M:N �_ �N^�_ �	^�$A(^�_ �^�_ �A`)
�builtinsr!   �_pytest.assertion.rewrite�	assertion�rewriter   r   r   r-   rA   � �    r@   �<module>rH      sW   ��  � � � � � � � � � � � � � � � � � 
�
�
�
� ����;� ;� ;� ;� ;rG   
